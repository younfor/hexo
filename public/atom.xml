<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Younfor</title>
  
  <subtitle>随心而笔</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://younfor.com/"/>
  <updated>2018-06-09T14:33:27.000Z</updated>
  <id>http://younfor.com/</id>
  
  <author>
    <name>younfor</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go基础语法.md</title>
    <link href="http://younfor.com/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>http://younfor.com/Go基础语法/</id>
    <published>2018-06-09T13:11:17.000Z</published>
    <updated>2018-06-09T14:33:27.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-编码风格"><a href="#1-编码风格" class="headerlink" title="1. 编码风格"></a>1. 编码风格</h1><h2 id="1-1-gofmt"><a href="#1-1-gofmt" class="headerlink" title="1.1 gofmt"></a>1.1 gofmt</h2><p>一般会自动规范代码风格</p><h2 id="1-2-注释-amp-驼峰命名"><a href="#1-2-注释-amp-驼峰命名" class="headerlink" title="1.2 注释&amp;驼峰命名"></a>1.2 注释&amp;驼峰命名</h2><p>/<em><br>    需要注释的内容</em>/</p><h2 id="1-3-包名"><a href="#1-3-包名" class="headerlink" title="1.3 包名"></a>1.3 包名</h2><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"bytes"</span></span><br></pre></td></tr></table></figure><h1 id="2-变量"><a href="#2-变量" class="headerlink" title="2. 变量"></a>2. 变量</h1><h2 id="2-0-常量"><a href="#2-0-常量" class="headerlink" title="2.0 常量"></a>2.0 常量</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ByteSize <span class="keyword">float64</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">_           = <span class="literal">iota</span></span><br><span class="line">KB ByteSize = <span class="number">1</span> &lt;&lt; (<span class="number">2</span> * <span class="literal">iota</span>)</span><br><span class="line">MB</span><br><span class="line">GB</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 主函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello World!"</span>)</span><br><span class="line">fmt.Println(<span class="string">"size %f"</span>, GB)</span><br><span class="line"><span class="comment">// size %f 64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-1-声明"><a href="#2-1-声明" class="headerlink" title="2.1 声明"></a>2.1 声明</h2><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var (</span><br><span class="line">    ErrInternal = errors.New(<span class="string">"error1"</span>)</span><br><span class="line">    ErrInternal2 = errors.New(<span class="string">"error2"</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="2-2-初始化"><a href="#2-2-初始化" class="headerlink" title="2.2 初始化"></a>2.2 初始化</h2><p>Go语言提供了New和make</p><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 0值初始化</span></span><br><span class="line"><span class="keyword">type</span> SyncedBuffer <span class="keyword">struct</span> &#123;</span><br><span class="line">    lock sync.Mutex</span><br><span class="line">    buffer bytes.Buffer</span><br><span class="line">&#125;</span><br><span class="line">p := <span class="built_in">new</span>(SyncedBuffer)     <span class="comment">// type *SyncedBuffer</span></span><br><span class="line"><span class="keyword">var</span> v SyncedBuffer            <span class="comment">// type SyncedBuffer</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewFile</span><span class="params">(fd <span class="keyword">int</span>, name <span class="keyword">string</span>)</span> *<span class="title">File</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> fd &lt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    f := File&#123;fd, name, <span class="literal">nil</span>, <span class="number">0</span>&#125; <span class="comment">// 如果不按顺序，就需要加名字</span></span><br><span class="line">    <span class="keyword">return</span> &amp;f</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 复合字面可以初始化多种结构</span></span><br><span class="line">a := [...]<span class="keyword">string</span> &#123;Enone: <span class="string">"no error"</span>, Eio: <span class="string">"Eio"</span>, Einval: <span class="string">"invalid argument"</span>&#125;</span><br><span class="line">s := []<span class="keyword">string</span> &#123;Enone: <span class="string">"no error"</span>, Eio: <span class="string">"Eio"</span>, Einval: <span class="string">"invalid argument"</span>&#125;</span><br><span class="line">m := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span> &#123;Enone: <span class="string">"no error"</span>, Eio: <span class="string">"Eio"</span>, Einval: <span class="string">"invalid argument"</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="make"><a href="#make" class="headerlink" title="make"></a>make</h3><p>`make一般用于初始化切片，映射，信道<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line"><span class="comment">// 一般用法, 返回的不是指针</span></span><br><span class="line">v := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure></p><h1 id="3-分支循环"><a href="#3-分支循环" class="headerlink" title="3. 分支循环"></a>3. 分支循环</h1><h2 id="3-1-if"><a href="#3-1-if" class="headerlink" title="3.1 if"></a>3.1 if</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> i &lt; <span class="built_in">f</span>() &#123;</span><br><span class="line">    <span class="keyword">g</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">err</span> := <span class="keyword">file</span>.Chmod(0664); <span class="keyword">err</span> != nil &#123;</span><br><span class="line">    <span class="keyword">log</span>.<span class="keyword">Print</span>(<span class="keyword">err</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">err</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-for"><a href="#3-2-for" class="headerlink" title="3.2 for"></a>3.2 for</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> init; condition; post &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> condition &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;&#125;</span><br><span class="line"><span class="comment">// 举例</span></span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">    sum += i</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历复合结构</span></span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> oldMap &#123;</span><br><span class="line">    newMap[key] = value</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 只遍历第一个</span></span><br><span class="line"><span class="keyword">for</span> key := <span class="keyword">range</span> oldMap &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 只遍历第二个</span></span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> array &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历字符串</span></span><br><span class="line"><span class="keyword">for</span> pos, char := <span class="keyword">range</span> <span class="string">"日本 \ x80 语"</span> &#123;</span><br><span class="line">    fmt.Printf()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 反转数字</span></span><br><span class="line"><span class="keyword">for</span> i, j := <span class="number">0</span>, <span class="built_in">len</span>(a) - <span class="number">1</span>; i &lt; j; i,j = i+<span class="number">1</span>, j<span class="number">-1</span> &#123;</span><br><span class="line">    a[i], a[j] = a[j], a[i]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-switch"><a href="#3-3-switch" class="headerlink" title="3.3 switch"></a>3.3 switch</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'0'</span> &lt;= c &amp;&amp; c &lt;= <span class="string">'9'</span> :</span><br><span class="line">    <span class="keyword">return</span> c - <span class="string">'0'</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">'a'</span> &lt;= c &amp;&amp; c &lt;= <span class="string">'f'</span> :</span><br><span class="line">    <span class="keyword">return</span> c - <span class="string">'a'</span> + <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理相同条件</span></span><br><span class="line"><span class="keyword">switch</span> c &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断类型</span></span><br><span class="line"><span class="keyword">var</span> t <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">t = getType()</span><br><span class="line"><span class="keyword">switch</span> t := t.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">default</span> :</span><br><span class="line">    fmt.Printf(<span class="string">"%T"</span>, t)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">bool</span> :</span><br><span class="line">    fmt.Printf(<span class="string">"boolean %t\n"</span>, t)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">int</span>:</span><br><span class="line">    fmt.Printf(<span class="string">"integer %d\n"</span>, t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-函数"><a href="#4-函数" class="headerlink" title="4. 函数"></a>4. 函数</h1><h2 id="4-1-多值返回"><a href="#4-1-多值返回" class="headerlink" title="4.1 多值返回"></a>4.1 多值返回</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(file *File)</span> <span class="title">Write</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br></pre></td></tr></table></figure><h2 id="4-2-defer"><a href="#4-2-defer" class="headerlink" title="4.2 defer"></a>4.2 defer</h2><p>无论何种路径都能返回，如果定义多个按定义顺序相反顺序执行</p><h1 id="5-切片-数组"><a href="#5-切片-数组" class="headerlink" title="5. 切片(数组)"></a>5. 切片(数组)</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 切片是按值传递，但是底层可能是同一份数组</span></span><br><span class="line"><span class="comment">// 二维切片</span></span><br><span class="line"><span class="keyword">type</span> Transform [<span class="number">3</span>][<span class="number">3</span>]<span class="keyword">float64</span></span><br><span class="line"><span class="keyword">type</span> LinesOfText [][]<span class="keyword">byte</span></span><br><span class="line">test := LinesOfTest&#123;</span><br><span class="line">    []<span class="keyword">byte</span>(<span class="string">"abc"</span>),</span><br><span class="line">    []<span class="keyword">byte</span>(<span class="string">"abc"</span>),</span><br><span class="line">    []<span class="keyword">byte</span>(<span class="string">"abc"</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-1-append"><a href="#5-1-append" class="headerlink" title="5.1 append"></a>5.1 append</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增加元素</span></span><br><span class="line">x := []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">x = <span class="built_in">append</span>(x, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">fmt.Println(x)</span><br><span class="line"><span class="comment">// 增加切片</span></span><br><span class="line">y := []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">x = <span class="built_in">append</span>(x, y...)</span><br><span class="line">fmt.Println(x)</span><br></pre></td></tr></table></figure><h1 id="6-Map映射"><a href="#6-Map映射" class="headerlink" title="6. Map映射"></a>6. Map映射</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">attend := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">bool</span>&#123;</span><br><span class="line">    <span class="string">"Ann"</span> : <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"Joe"</span> : <span class="literal">true</span>,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断是否存在</span></span><br><span class="line"><span class="keyword">var</span> seconds <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> ok <span class="keyword">bool</span></span><br><span class="line">seconds, ok = timeZone[tz]</span><br><span class="line"><span class="keyword">if</span> _, ok := timeZone[tz]; ok &#123;</span><br><span class="line">    doSomething()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 删除映射</span></span><br><span class="line"><span class="built_in">delete</span>(timeZone, <span class="string">"PDT"</span>)</span><br></pre></td></tr></table></figure><p>初始化方式：<br>File{fd, name, nil, 0}<br>File{fd: fd, name: name}<br>make([]int, 100)</p><h1 id="7-函数"><a href="#7-函数" class="headerlink" title="7. 函数"></a>7. 函数</h1><h2 id="7-1-init"><a href="#7-1-init" class="headerlink" title="7.1 init"></a>7.1 init</h2><p>在变量初始化之后，导入包初始化之后，就会初始化<br>`以指针或值为接收者的区别在于：值方法可通过指针和值调用， 而指针方法只能通过指针来调用。</p><h1 id="8-接口"><a href="#8-接口" class="headerlink" title="8. 接口"></a>8. 接口</h1><h2 id="8-1-断言"><a href="#8-1-断言" class="headerlink" title="8.1 断言"></a>8.1 断言</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str, ok := <span class="keyword">value</span>.(string)</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">    fmt.Printf(<span class="string">""</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-2-内嵌"><a href="#8-2-内嵌" class="headerlink" title="8.2 内嵌"></a>8.2 内嵌</h2><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 接口</span><br><span class="line"><span class="keyword">type</span> <span class="type">Reader</span> interface &#123;</span><br><span class="line">    <span class="type">Read</span>(p []byte) (n int, err error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="type">Writer</span> interface &#123;</span><br><span class="line">    <span class="type">Write</span>(p []byte) (n int, err error)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="type">ReaderWriter</span> interface &#123;</span><br><span class="line">    <span class="type">Reader</span></span><br><span class="line">    <span class="type">Writer</span></span><br><span class="line">&#125;</span><br><span class="line">// 结构体</span><br><span class="line"><span class="keyword">type</span> <span class="type">ReaderWriter</span> struct &#123;</span><br><span class="line">    *<span class="type">Reader</span></span><br><span class="line">    *<span class="type">Writer</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="9-并发"><a href="#9-并发" class="headerlink" title="9 并发"></a>9 并发</h1><h2 id="9-1-chan"><a href="#9-1-chan" class="headerlink" title="9.1 chan"></a>9.1 chan</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cj := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)                <span class="comment">// 无缓冲信道</span></span><br><span class="line">cj := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">0</span>)            <span class="comment">// 无缓冲信道</span></span><br><span class="line">cj := <span class="built_in">make</span>(<span class="keyword">chan</span> *os.File, <span class="number">100</span>) <span class="comment">// 指向文件指针的带缓冲信道</span></span><br></pre></td></tr></table></figure><h2 id="9-2-例子"><a href="#9-2-例子" class="headerlink" title="9.2 例子"></a>9.2 例子</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    list.Sort()</span><br><span class="line">    c &lt;- <span class="number">1</span></span><br><span class="line">&#125;()</span><br><span class="line">doSomethingForAWhile()</span><br><span class="line">&lt;- c</span><br><span class="line"></span><br><span class="line"><span class="comment">// 考虑带缓冲的任务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Serve</span><span class="params">(queue <span class="keyword">chan</span> *Request)</span></span> &#123;</span><br><span class="line">       <span class="keyword">for</span> req := <span class="keyword">range</span> queue &#123;</span><br><span class="line">            req := req</span><br><span class="line">           sem &lt;- <span class="number">1</span></span><br><span class="line">            <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">                process(req)</span><br><span class="line">                &lt;-sem</span><br><span class="line">            &#125;()</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10-panic-amp-recover"><a href="#10-panic-amp-recover" class="headerlink" title="10 panic&amp;recover"></a>10 panic&amp;recover</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-编码风格&quot;&gt;&lt;a href=&quot;#1-编码风格&quot; class=&quot;headerlink&quot; title=&quot;1. 编码风格&quot;&gt;&lt;/a&gt;1. 编码风格&lt;/h1&gt;&lt;h2 id=&quot;1-1-gofmt&quot;&gt;&lt;a href=&quot;#1-1-gofmt&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="Go语言" scheme="http://younfor.com/categories/Go%E8%AF%AD%E8%A8%80/"/>
    
    
  </entry>
  
  <entry>
    <title>First</title>
    <link href="http://younfor.com/First/"/>
    <id>http://younfor.com/First/</id>
    <published>2015-12-30T16:34:21.000Z</published>
    <updated>2018-06-09T13:04:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>图片测试哦, <img src="/First/logo.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;图片测试哦, &lt;img src=&quot;/First/logo.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="随笔" scheme="http://younfor.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="日记" scheme="http://younfor.com/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="随笔" scheme="http://younfor.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
