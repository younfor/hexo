<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Go基础语法.md</title>
      <link href="/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="1-编码风格"><a href="#1-编码风格" class="headerlink" title="1. 编码风格"></a>1. 编码风格</h1><h2 id="1-1-gofmt"><a href="#1-1-gofmt" class="headerlink" title="1.1 gofmt"></a>1.1 gofmt</h2><p>一般会自动规范代码风格</p><h2 id="1-2-注释-amp-驼峰命名"><a href="#1-2-注释-amp-驼峰命名" class="headerlink" title="1.2 注释&amp;驼峰命名"></a>1.2 注释&amp;驼峰命名</h2><p>/<em><br>    需要注释的内容</em>/</p><h2 id="1-3-包名"><a href="#1-3-包名" class="headerlink" title="1.3 包名"></a>1.3 包名</h2><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"bytes"</span></span><br></pre></td></tr></table></figure><h1 id="2-变量"><a href="#2-变量" class="headerlink" title="2. 变量"></a>2. 变量</h1><h2 id="2-0-常量"><a href="#2-0-常量" class="headerlink" title="2.0 常量"></a>2.0 常量</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ByteSize <span class="keyword">float64</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">_           = <span class="literal">iota</span></span><br><span class="line">KB ByteSize = <span class="number">1</span> &lt;&lt; (<span class="number">2</span> * <span class="literal">iota</span>)</span><br><span class="line">MB</span><br><span class="line">GB</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 主函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello World!"</span>)</span><br><span class="line">fmt.Println(<span class="string">"size %f"</span>, GB)</span><br><span class="line"><span class="comment">// size %f 64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-1-声明"><a href="#2-1-声明" class="headerlink" title="2.1 声明"></a>2.1 声明</h2><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var (</span><br><span class="line">    ErrInternal = errors.New(<span class="string">"error1"</span>)</span><br><span class="line">    ErrInternal2 = errors.New(<span class="string">"error2"</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="2-2-初始化"><a href="#2-2-初始化" class="headerlink" title="2.2 初始化"></a>2.2 初始化</h2><p>Go语言提供了New和make</p><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 0值初始化</span></span><br><span class="line"><span class="keyword">type</span> SyncedBuffer <span class="keyword">struct</span> &#123;</span><br><span class="line">    lock sync.Mutex</span><br><span class="line">    buffer bytes.Buffer</span><br><span class="line">&#125;</span><br><span class="line">p := <span class="built_in">new</span>(SyncedBuffer)     <span class="comment">// type *SyncedBuffer</span></span><br><span class="line"><span class="keyword">var</span> v SyncedBuffer            <span class="comment">// type SyncedBuffer</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewFile</span><span class="params">(fd <span class="keyword">int</span>, name <span class="keyword">string</span>)</span> *<span class="title">File</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> fd &lt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    f := File&#123;fd, name, <span class="literal">nil</span>, <span class="number">0</span>&#125; <span class="comment">// 如果不按顺序，就需要加名字</span></span><br><span class="line">    <span class="keyword">return</span> &amp;f</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 复合字面可以初始化多种结构</span></span><br><span class="line">a := [...]<span class="keyword">string</span> &#123;Enone: <span class="string">"no error"</span>, Eio: <span class="string">"Eio"</span>, Einval: <span class="string">"invalid argument"</span>&#125;</span><br><span class="line">s := []<span class="keyword">string</span> &#123;Enone: <span class="string">"no error"</span>, Eio: <span class="string">"Eio"</span>, Einval: <span class="string">"invalid argument"</span>&#125;</span><br><span class="line">m := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span> &#123;Enone: <span class="string">"no error"</span>, Eio: <span class="string">"Eio"</span>, Einval: <span class="string">"invalid argument"</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="make"><a href="#make" class="headerlink" title="make"></a>make</h3><p>`make一般用于初始化切片，映射，信道<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line"><span class="comment">// 一般用法, 返回的不是指针</span></span><br><span class="line">v := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure></p><h1 id="3-分支循环"><a href="#3-分支循环" class="headerlink" title="3. 分支循环"></a>3. 分支循环</h1><h2 id="3-1-if"><a href="#3-1-if" class="headerlink" title="3.1 if"></a>3.1 if</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> i &lt; <span class="built_in">f</span>() &#123;</span><br><span class="line">    <span class="keyword">g</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">err</span> := <span class="keyword">file</span>.Chmod(0664); <span class="keyword">err</span> != nil &#123;</span><br><span class="line">    <span class="keyword">log</span>.<span class="keyword">Print</span>(<span class="keyword">err</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">err</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-for"><a href="#3-2-for" class="headerlink" title="3.2 for"></a>3.2 for</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> init; condition; post &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> condition &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;&#125;</span><br><span class="line"><span class="comment">// 举例</span></span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">    sum += i</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历复合结构</span></span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> oldMap &#123;</span><br><span class="line">    newMap[key] = value</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 只遍历第一个</span></span><br><span class="line"><span class="keyword">for</span> key := <span class="keyword">range</span> oldMap &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 只遍历第二个</span></span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> array &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历字符串</span></span><br><span class="line"><span class="keyword">for</span> pos, char := <span class="keyword">range</span> <span class="string">"日本 \ x80 语"</span> &#123;</span><br><span class="line">    fmt.Printf()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 反转数字</span></span><br><span class="line"><span class="keyword">for</span> i, j := <span class="number">0</span>, <span class="built_in">len</span>(a) - <span class="number">1</span>; i &lt; j; i,j = i+<span class="number">1</span>, j<span class="number">-1</span> &#123;</span><br><span class="line">    a[i], a[j] = a[j], a[i]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-switch"><a href="#3-3-switch" class="headerlink" title="3.3 switch"></a>3.3 switch</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'0'</span> &lt;= c &amp;&amp; c &lt;= <span class="string">'9'</span> :</span><br><span class="line">    <span class="keyword">return</span> c - <span class="string">'0'</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">'a'</span> &lt;= c &amp;&amp; c &lt;= <span class="string">'f'</span> :</span><br><span class="line">    <span class="keyword">return</span> c - <span class="string">'a'</span> + <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理相同条件</span></span><br><span class="line"><span class="keyword">switch</span> c &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断类型</span></span><br><span class="line"><span class="keyword">var</span> t <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">t = getType()</span><br><span class="line"><span class="keyword">switch</span> t := t.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">default</span> :</span><br><span class="line">    fmt.Printf(<span class="string">"%T"</span>, t)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">bool</span> :</span><br><span class="line">    fmt.Printf(<span class="string">"boolean %t\n"</span>, t)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">int</span>:</span><br><span class="line">    fmt.Printf(<span class="string">"integer %d\n"</span>, t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-函数"><a href="#4-函数" class="headerlink" title="4. 函数"></a>4. 函数</h1><h2 id="4-1-多值返回"><a href="#4-1-多值返回" class="headerlink" title="4.1 多值返回"></a>4.1 多值返回</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(file *File)</span> <span class="title">Write</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br></pre></td></tr></table></figure><h2 id="4-2-defer"><a href="#4-2-defer" class="headerlink" title="4.2 defer"></a>4.2 defer</h2><p>无论何种路径都能返回，如果定义多个按定义顺序相反顺序执行</p><h1 id="5-切片-数组"><a href="#5-切片-数组" class="headerlink" title="5. 切片(数组)"></a>5. 切片(数组)</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 切片是按值传递，但是底层可能是同一份数组</span></span><br><span class="line"><span class="comment">// 二维切片</span></span><br><span class="line"><span class="keyword">type</span> Transform [<span class="number">3</span>][<span class="number">3</span>]<span class="keyword">float64</span></span><br><span class="line"><span class="keyword">type</span> LinesOfText [][]<span class="keyword">byte</span></span><br><span class="line">test := LinesOfTest&#123;</span><br><span class="line">    []<span class="keyword">byte</span>(<span class="string">"abc"</span>),</span><br><span class="line">    []<span class="keyword">byte</span>(<span class="string">"abc"</span>),</span><br><span class="line">    []<span class="keyword">byte</span>(<span class="string">"abc"</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-1-append"><a href="#5-1-append" class="headerlink" title="5.1 append"></a>5.1 append</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增加元素</span></span><br><span class="line">x := []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">x = <span class="built_in">append</span>(x, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">fmt.Println(x)</span><br><span class="line"><span class="comment">// 增加切片</span></span><br><span class="line">y := []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">x = <span class="built_in">append</span>(x, y...)</span><br><span class="line">fmt.Println(x)</span><br></pre></td></tr></table></figure><h1 id="6-Map映射"><a href="#6-Map映射" class="headerlink" title="6. Map映射"></a>6. Map映射</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">attend := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">bool</span>&#123;</span><br><span class="line">    <span class="string">"Ann"</span> : <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"Joe"</span> : <span class="literal">true</span>,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断是否存在</span></span><br><span class="line"><span class="keyword">var</span> seconds <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> ok <span class="keyword">bool</span></span><br><span class="line">seconds, ok = timeZone[tz]</span><br><span class="line"><span class="keyword">if</span> _, ok := timeZone[tz]; ok &#123;</span><br><span class="line">    doSomething()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 删除映射</span></span><br><span class="line"><span class="built_in">delete</span>(timeZone, <span class="string">"PDT"</span>)</span><br></pre></td></tr></table></figure><p>初始化方式：<br>File{fd, name, nil, 0}<br>File{fd: fd, name: name}<br>make([]int, 100)</p><h1 id="7-函数"><a href="#7-函数" class="headerlink" title="7. 函数"></a>7. 函数</h1><h2 id="7-1-init"><a href="#7-1-init" class="headerlink" title="7.1 init"></a>7.1 init</h2><p>在变量初始化之后，导入包初始化之后，就会初始化<br>`以指针或值为接收者的区别在于：值方法可通过指针和值调用， 而指针方法只能通过指针来调用。</p><h1 id="8-接口"><a href="#8-接口" class="headerlink" title="8. 接口"></a>8. 接口</h1><h2 id="8-1-断言"><a href="#8-1-断言" class="headerlink" title="8.1 断言"></a>8.1 断言</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str, ok := <span class="keyword">value</span>.(string)</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">    fmt.Printf(<span class="string">""</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-2-内嵌"><a href="#8-2-内嵌" class="headerlink" title="8.2 内嵌"></a>8.2 内嵌</h2><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 接口</span><br><span class="line"><span class="keyword">type</span> <span class="type">Reader</span> interface &#123;</span><br><span class="line">    <span class="type">Read</span>(p []byte) (n int, err error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="type">Writer</span> interface &#123;</span><br><span class="line">    <span class="type">Write</span>(p []byte) (n int, err error)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="type">ReaderWriter</span> interface &#123;</span><br><span class="line">    <span class="type">Reader</span></span><br><span class="line">    <span class="type">Writer</span></span><br><span class="line">&#125;</span><br><span class="line">// 结构体</span><br><span class="line"><span class="keyword">type</span> <span class="type">ReaderWriter</span> struct &#123;</span><br><span class="line">    *<span class="type">Reader</span></span><br><span class="line">    *<span class="type">Writer</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="9-并发"><a href="#9-并发" class="headerlink" title="9 并发"></a>9 并发</h1><h2 id="9-1-chan"><a href="#9-1-chan" class="headerlink" title="9.1 chan"></a>9.1 chan</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cj := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)                <span class="comment">// 无缓冲信道</span></span><br><span class="line">cj := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">0</span>)            <span class="comment">// 无缓冲信道</span></span><br><span class="line">cj := <span class="built_in">make</span>(<span class="keyword">chan</span> *os.File, <span class="number">100</span>) <span class="comment">// 指向文件指针的带缓冲信道</span></span><br></pre></td></tr></table></figure><h2 id="9-2-例子"><a href="#9-2-例子" class="headerlink" title="9.2 例子"></a>9.2 例子</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    list.Sort()</span><br><span class="line">    c &lt;- <span class="number">1</span></span><br><span class="line">&#125;()</span><br><span class="line">doSomethingForAWhile()</span><br><span class="line">&lt;- c</span><br><span class="line"></span><br><span class="line"><span class="comment">// 考虑带缓冲的任务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Serve</span><span class="params">(queue <span class="keyword">chan</span> *Request)</span></span> &#123;</span><br><span class="line">       <span class="keyword">for</span> req := <span class="keyword">range</span> queue &#123;</span><br><span class="line">            req := req</span><br><span class="line">           sem &lt;- <span class="number">1</span></span><br><span class="line">            <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">                process(req)</span><br><span class="line">                &lt;-sem</span><br><span class="line">            &#125;()</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10-panic-amp-recover"><a href="#10-panic-amp-recover" class="headerlink" title="10 panic&amp;recover"></a>10 panic&amp;recover</h1>]]></content>
      
      <categories>
          
          <category> Go语言 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Go高级编程.md</title>
      <link href="/Go%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
      <url>/Go%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p><a href="https://books.studygolang.com/advanced-go-programming-book/ch2-cgo/ch2-04-memory.html" target="_blank" rel="noopener">https://books.studygolang.com/advanced-go-programming-book/ch2-cgo/ch2-04-memory.html</a></p><h1 id="1-数组"><a href="#1-数组" class="headerlink" title="1.数组"></a>1.数组</h1><h2 id="1-1数组定义方式"><a href="#1-1数组定义方式" class="headerlink" title="1.1数组定义方式"></a>1.1数组定义方式</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span> [<span class="number">3</span>]int                    <span class="comment">// 定义一个长度为3的int类型数组, 元素全部为0</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">b</span> = [...]int&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;       <span class="comment">// 定义一个长度为3的int类型数组, 元素为 1, 2, 3</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">var</span> c = [...]int&#123;<span class="number">2</span>: <span class="number">3</span>, <span class="number">1</span>: <span class="number">2</span>&#125;    <span class="comment">// 定义一个长度为3的int类型数组, 元素为 0, 2, 3</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">var</span> d = [...]int&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>: <span class="number">5</span>, <span class="number">6</span>&#125; <span class="comment">// 定义一个长度为6的int类型数组, 元素为 1, 2, 0, 0, 5, 6</span></span><br></pre></td></tr></table></figure><h2 id="1-2数组指针"><a href="#1-2数组指针" class="headerlink" title="1.2数组指针"></a>1.2数组指针</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span> = [...]int&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; <span class="comment">// a 是一个数组</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">b</span> = &amp;<span class="selector-tag">a</span>                <span class="comment">// b 是指向数组的指针</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="selector-tag">a</span>[<span class="number">0</span>], <span class="selector-tag">a</span>[<span class="number">1</span>])   <span class="comment">// 打印数组的前2个元素</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="selector-tag">b</span>[<span class="number">0</span>], <span class="selector-tag">b</span>[<span class="number">1</span>])   <span class="comment">// 通过数组指针访问数组元素的方式和数组类似</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="selector-tag">i</span>, v := range <span class="selector-tag">b</span> &#123;     <span class="comment">// 通过数组指针迭代数组的元素</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="selector-tag">i</span>, v)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3数组遍历"><a href="#1-3数组遍历" class="headerlink" title="1.3数组遍历"></a>1.3数组遍历</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> a &#123;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"b[%d]: %d\n"</span>, i, b[i])</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> b &#123;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"b[%d]: %d\n"</span>, i, v)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(c); i++ &#123;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"b[%d]: %d\n"</span>, i, b[i])</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4函数数组、管道数组"><a href="#1-4函数数组、管道数组" class="headerlink" title="1.4函数数组、管道数组"></a>1.4函数数组、管道数组</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 图像解码器数组</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">var</span> decoder1 [<span class="number">2</span>]func(io.Reader) (image<span class="selector-class">.Image</span>, error)</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">var</span> decoder2 = [...]func(io.Reader) (image<span class="selector-class">.Image</span>, error)&#123;</span><br><span class="line"></span><br><span class="line">    png<span class="selector-class">.Decode</span>,</span><br><span class="line"></span><br><span class="line">    jpeg<span class="selector-class">.Decode</span>,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口数组</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">var</span> unknown1 [<span class="number">2</span>]interface&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">var</span> unknown2 = [...]interface&#123;&#125;&#123;<span class="number">123</span>, <span class="string">"你好"</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 管道数组</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">var</span> chanList = [<span class="number">2</span>]chan int&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5空数组"><a href="#1-5空数组" class="headerlink" title="1.5空数组"></a>1.5空数组</h2><p>长度为0的数组在内存中并不占用空间。空数组虽然很少直接使用，但是可以用于强调某种特有类型的操作时避免分配额外的内存空间，比如用于管道的同步操作：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">c1 := <span class="built_in">make</span>(<span class="keyword">chan</span> [<span class="number">0</span>]<span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"c1"</span>)</span><br><span class="line"></span><br><span class="line">    c1 &lt;- [<span class="number">0</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">&lt;-c1</span><br></pre></td></tr></table></figure></p><p>在这里，我们并不关心管道中传输数据的真实类型，其中管道接收和发送操作只是用于消息的同步。对于这种场景，我们用空数组来作为管道类型可以减少管道元素赋值时的开销。当然一般更倾向于用无类型的匿名结构体代替：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">c2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"c2"</span>)</span><br><span class="line"></span><br><span class="line">    c2 &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125; <span class="comment">// struct&#123;&#125;部分是类型, &#123;&#125;表示对应的结构体值</span></span><br><span class="line"></span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">&lt;-c2</span><br></pre></td></tr></table></figure></p><h1 id="2-字符串"><a href="#2-字符串" class="headerlink" title="2.字符串"></a>2.字符串</h1><h2 id="2-1类似切片"><a href="#2-1类似切片" class="headerlink" title="2.1类似切片"></a>2.1类似切片</h2><p>字符串虽然不是切片，但是支持切片操作，不同位置的切片底层也访问的同一块内存数据（因为字符串是只读的，相同的字符串面值常量通常是对应同一个字符串常量）：<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="string">"hello, world"</span></span><br><span class="line"></span><br><span class="line">hello := s[:5]</span><br><span class="line"></span><br><span class="line">world := s[7:]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 := <span class="string">"hello, world"</span>[:5]</span><br><span class="line"></span><br><span class="line">s2 := <span class="string">"hello, world"</span>[7:]</span><br></pre></td></tr></table></figure></p><p>和数组一样，内置的len和cap函数返回相同的结果，都对应字符串的长度。也可以通过reflect.StringHeader结构访问字符串的长度（这里只是为了演示字符串的结构，并不是推荐的做法）：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(<span class="string">"len(s):"</span>, (*reflect.StringHeader)(unsafe.Pointer(<span class="meta">&amp;s)).Len)   <span class="comment">// 12</span></span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"len(s1):"</span>, (*reflect.StringHeader)(unsafe.Pointer(<span class="meta">&amp;s1)).Len) <span class="comment">// 5</span></span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"len(s2):"</span>, (*reflect.StringHeader)(unsafe.Pointer(<span class="meta">&amp;s2)).Len) <span class="comment">// 5</span></span></span><br></pre></td></tr></table></figure></p><h1 id="3-切片-slice"><a href="#3-切片-slice" class="headerlink" title="3.切片(slice)"></a>3.切片(slice)</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line"></span><br><span class="line">    a []<span class="keyword">int</span>               <span class="comment">// nil切片, 和 nil 相等, 一般用来表示一个不存在的切片</span></span><br><span class="line"></span><br><span class="line">    b = []<span class="keyword">int</span>&#123;&#125;           <span class="comment">// 空切片, 和 nil 不相等, 一般用来表示一个空的集合</span></span><br><span class="line"></span><br><span class="line">    c = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;    <span class="comment">// 有3个元素的切片, len和cap都为3</span></span><br><span class="line"></span><br><span class="line">    d = c[:<span class="number">2</span>]             <span class="comment">// 有2个元素的切片, len为2, cap为3</span></span><br><span class="line"></span><br><span class="line">    e = c[<span class="number">0</span>:<span class="number">2</span>:<span class="built_in">cap</span>(c)]     <span class="comment">// 有2个元素的切片, len为2, cap为3</span></span><br><span class="line"></span><br><span class="line">    f = c[:<span class="number">0</span>]             <span class="comment">// 有0个元素的切片, len为0, cap为3</span></span><br><span class="line"></span><br><span class="line">    g = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">3</span>)    <span class="comment">// 有3个元素的切片, len和cap都为3</span></span><br><span class="line"></span><br><span class="line">    h = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// 有2个元素的切片, len为2, cap为3</span></span><br><span class="line"></span><br><span class="line">    i = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, <span class="number">3</span>) <span class="comment">// 有0个元素的切片, len为0, cap为3</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"><span class="string">``</span></span><br><span class="line">## <span class="number">3.1</span>添加切片</span><br></pre></td></tr></table></figure><p>var a []int</p><p>a = append(a, 1)               // 追加1个元素</p><p>a = append(a, 1, 2, 3)         // 追加多个元素, 手写解包方式</p><p>a = append(a, []int{1,2,3}…) // 追加一个切片, 切片需要解包</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`在容量不足的情况下，append的操作会导致重新分配内存，从而导致巨大的内存分配和复制数据代价`</span><br></pre></td></tr></table></figure><p>var a = []int{1,2,3}</p><p>a = append([]int{0}, a…)        // 在开头添加1个元素</p><p>a = append([]int{-3,-2,-1}, a…) // 在开头添加1个切片<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span> []int</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> = append(<span class="selector-tag">a</span>[:i], append([]int&#123;x&#125;, <span class="selector-tag">a</span>[<span class="selector-tag">i</span>:]...)...)     <span class="comment">// 在第i个位置插入x</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> = append(<span class="selector-tag">a</span>[:i], append([]int&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;, <span class="selector-tag">a</span>[<span class="selector-tag">i</span>:]...)...) <span class="comment">// 在第i个位置插入切片</span></span><br><span class="line"><span class="selector-tag">a</span> = append(<span class="selector-tag">a</span>, x...)       <span class="comment">// 为x切片扩展足够的空间</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">copy</span><span class="params">(a[i+len(x)</span></span>:], <span class="selector-tag">a</span>[<span class="selector-tag">i</span>:]) <span class="comment">// a[i:]向后移动len(x)个位置</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">copy</span><span class="params">(a[i:], x)</span></span>            <span class="comment">// 复制新添加的切片</span></span><br></pre></td></tr></table></figure></p><h2 id="3-2删除切片"><a href="#3-2删除切片" class="headerlink" title="3.2删除切片"></a>3.2删除切片</h2><p>需要重新赋值切片防止内存泄漏<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FindPhoneNumber</span><span class="params">(filename <span class="keyword">string</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    b, _ := ioutil.ReadFile(filename)</span><br><span class="line"></span><br><span class="line">    b = regexp.MustCompile(<span class="string">"[0-9]+"</span>).Find(b)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">append</span>([]<span class="keyword">byte</span>&#123;&#125;, b...) <span class="comment">// 这里</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>删除切片有时候会影响GC<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span> []*int&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> = <span class="selector-tag">a</span>[:len(a)-<span class="number">1</span>]    <span class="comment">// 本删除的最后一个元素依然被引用, 可能导致GC操作被阻碍</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span> []*int&#123; ... &#125;</span><br><span class="line"><span class="selector-tag">a</span>[len(a)-<span class="number">1</span>] = nil <span class="comment">// GC回收最后一个元素内存</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> = <span class="selector-tag">a</span>[:len(a)-<span class="number">1</span>]  <span class="comment">// 从切片删除最后一个元素</span></span><br></pre></td></tr></table></figure></p><p>可以用copy和append组合可以避免创建中间的临时切片，同样是完成添加元素的操作：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> = append(<span class="selector-tag">a</span>, <span class="number">0</span>)     <span class="comment">// 切片扩展1个空间</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">copy</span><span class="params">(a[i+<span class="number">1</span>:], a[i:])</span></span> <span class="comment">// a[i:]向后移动1个位置</span></span><br><span class="line"></span><br><span class="line">s[i] = x             <span class="comment">// 设置新添加的元素</span></span><br></pre></td></tr></table></figure></p><p>第一句append用于扩展切片的长度，为要插入的元素留出空间。第二句copy操作将要插入位置开始之后的元素向后挪动一个位置。第三句真实地将新添加的元素赋值到对应的位置。操作语句虽然冗长了一点，但是相比前面的方法，可以减少中间创建的临时切片。<br>用copy和append组合也可以实现在中间位置插入多个元素(也就是插入一个切片):<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> = append(<span class="selector-tag">a</span>, x...)       <span class="comment">// 为x切片扩展足够的空间</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">copy</span><span class="params">(a[i+len(x)</span></span>:], <span class="selector-tag">a</span>[<span class="selector-tag">i</span>:]) <span class="comment">// a[i:]向后移动len(x)个位置</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">copy</span><span class="params">(a[i:], x)</span></span>            <span class="comment">// 复制新添加的切片</span></span><br></pre></td></tr></table></figure></p><p>也可以用copy完成删除开头的元素：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> = []int&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> = <span class="selector-tag">a</span>[:copy(<span class="selector-tag">a</span>, <span class="selector-tag">a</span>[<span class="number">1</span>:])] <span class="comment">// 删除开头1个元素</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> = <span class="selector-tag">a</span>[:copy(<span class="selector-tag">a</span>, <span class="selector-tag">a</span>[N:])] <span class="comment">// 删除开头N个元素</span></span><br></pre></td></tr></table></figure></p><p>对于删除中间的元素，需要对剩余的元素进行一次整体挪动，同样可以用append或copy原地完成：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> = []int&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, ...&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> = append(<span class="selector-tag">a</span>[:i], <span class="selector-tag">a</span>[i+<span class="number">1</span>:]...) <span class="comment">// 删除中间1个元素</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> = append(<span class="selector-tag">a</span>[:i], <span class="selector-tag">a</span>[i+N:]...) <span class="comment">// 删除中间N个元素</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> = <span class="selector-tag">a</span>[:copy(<span class="selector-tag">a</span>[<span class="selector-tag">i</span>:], <span class="selector-tag">a</span>[i+<span class="number">1</span>:])]  <span class="comment">// 删除中间1个元素</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> = <span class="selector-tag">a</span>[:copy(<span class="selector-tag">a</span>[<span class="selector-tag">i</span>:], <span class="selector-tag">a</span>[i+N:])]  <span class="comment">// 删除中间N个元素</span></span><br></pre></td></tr></table></figure></p><h1 id="4-并发模型"><a href="#4-并发模型" class="headerlink" title="4.并发模型"></a>4.并发模型</h1><h2 id="4-1加锁"><a href="#4-1加锁" class="headerlink" title="4.1加锁"></a>4.1加锁</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> total <span class="keyword">struct</span> &#123;</span><br><span class="line"></span><br><span class="line">    sync.Mutex</span><br><span class="line"></span><br><span class="line">    <span class="keyword">value</span> <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">通过sync.<span class="keyword">lock</span>()和sync.Done()</span><br></pre></td></tr></table></figure><h2 id="4-2原子"><a href="#4-2原子" class="headerlink" title="4.2原子"></a>4.2原子</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"></span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"sync/atomic"</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"><span class="comment">//用法：</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(wg *sync.WaitGroup)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">defer</span> wg.Done()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> i <span class="keyword">uint64</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++ &#123;</span><br><span class="line"></span><br><span class="line">        atomic.AddUint64(&amp;total, i)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line">    wg.Add(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> worker(&amp;wg)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> worker(&amp;wg)</span><br><span class="line"></span><br><span class="line">    wg.Wait()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3单例"><a href="#4-3单例" class="headerlink" title="4.3单例"></a>4.3单例</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">我们可以将通用的代码提取出来，就成了标准库中sync.Once的实现：</span><br><span class="line">type Once struct &#123;</span><br><span class="line"></span><br><span class="line">    m    Mutex</span><br><span class="line"></span><br><span class="line">    done uint32</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func (o *Once) <span class="keyword">Do</span>(f func()) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> atomic.LoadUint32(&amp;o.done) == 1 &#123;</span><br><span class="line"></span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    o.m.Lock()</span><br><span class="line"></span><br><span class="line">    defer o.m.Unlock()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> o.done == 0 &#123;</span><br><span class="line"></span><br><span class="line">        defer atomic.StoreUint32(&amp;o.done, 1)</span><br><span class="line"></span><br><span class="line">        f()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">基于sync.Once重新实现单件模式：</span><br><span class="line">var (</span><br><span class="line"></span><br><span class="line">   <span class="built_in"> instance </span>*singleton</span><br><span class="line"></span><br><span class="line">    once     sync.Once</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func Instance() *singleton &#123;</span><br><span class="line"></span><br><span class="line">    once.<span class="keyword">Do</span>(func() &#123;</span><br><span class="line"></span><br><span class="line">       <span class="built_in"> instance </span>= &amp;singleton&#123;&#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    return instance</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4带缓冲chan"><a href="#4-4带缓冲chan" class="headerlink" title="4.4带缓冲chan"></a>4.4带缓冲chan</h2><p>测试了下才知道原来<br>&lt;-chan int  像这样的只能接收值<br>chan&lt;- int  像这样的只能发送值<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> limit = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, w := <span class="keyword">range</span> work &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">            limit &lt;- <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            w()</span><br><span class="line"></span><br><span class="line">            &lt;-limit</span><br><span class="line"></span><br><span class="line">        &#125;()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>) <span class="comment">// 带 10 个缓存</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开N个后台打印线程</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">cap</span>(done); i++ &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">            fmt.Println(<span class="string">"你好, 世界"</span>)</span><br><span class="line"></span><br><span class="line">            done &lt;- <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        &#125;()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待N个后台线程完成</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">cap</span>(done); i++ &#123;</span><br><span class="line"></span><br><span class="line">        &lt;-done</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//其实也可以用</span></span><br><span class="line">sync.WaitGroup</span><br></pre></td></tr></table></figure></p><h2 id="4-5-select"><a href="#4-5-select" class="headerlink" title="4.5 select"></a>4.5 select</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">基于<span class="keyword">select</span>实现的管道的超时判断：</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> v := &lt;-in:</span><br><span class="line"></span><br><span class="line">        fmt.Println(v)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> &lt;-time.After(time.Second):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="comment">// 超时</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">通过<span class="keyword">select</span>的<span class="keyword">default</span>分支实现非阻塞的管道发送或接收操作：</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> v := &lt;-in:</span><br><span class="line"></span><br><span class="line">        fmt.Println(v)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 没有数据</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">通过<span class="keyword">select</span>来阻止main函数退出：</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// do some thins</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是管道的发送操作和接收操作是一一对应的，如果要停止多个Goroutine那么可能需要创建同样数量的管道，这个代价太大了。其实我们可以通过close关闭一个管道来实现广播的效果，所有从关闭管道接收的操作均会收到一个零值和一个可选的失败标志。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(cannel <span class="keyword">chan</span> <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line"></span><br><span class="line">            fmt.Println(<span class="string">"hello"</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 正常工作</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> &lt;-cannel:</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 退出</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    cancel := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">go</span> worker(cancel)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    time.Sleep(time.Second)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">close</span>(cancel)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="5-异常"><a href="#5-异常" class="headerlink" title="5.异常"></a>5.异常</h1><p>异常必须放在defer func () {}()</p>]]></content>
      
      <categories>
          
          <category> Go语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
