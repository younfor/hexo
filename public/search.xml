<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>MySQL高级知识</title>
      <link href="/MySQL%E7%9F%A5%E8%AF%86/"/>
      <url>/MySQL%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<h1 id="系统命令"><a href="#系统命令" class="headerlink" title="系统命令"></a>系统命令</h1><ul><li>show databases</li><li>show tables</li><li>show columns from customers<br><img src="41590934.png" alt="41590934.png"></li><li>show status<br>显示服务器状态信息</li><li>show create database / show create table xxx<br>显示创表语句<h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1></li><li>select xx from table order by column1 desc, column2;<br>按column1降序，column2升序，默认大小写是一样的</li><li>select xx from table order by column limit 1<br>先排序column，再取第一个</li><li>where xxx order by<br>提示：order by 必须放where之后，where默认不区分大小写</li><li>where xxx is null<br>空值检查</li><li>and or<br>操作符要打括号，and优先级更高</li><li><p>in not</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">where xxx <span class="keyword">in</span> (<span class="selector-tag">a</span>,<span class="selector-tag">b</span>,c) <span class="comment">// 也可以嵌套select语句</span></span><br><span class="line">where xxx not <span class="keyword">in</span> (<span class="selector-tag">a</span>,<span class="selector-tag">b</span>,c)</span><br></pre></td></tr></table></figure></li><li><p>like</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> prob_name <span class="keyword">from</span> products <span class="keyword">where</span> prod_name <span class="keyword">like</span> <span class="string">'s%e'</span>  // 其中%表示任意字符出现任意次</span><br><span class="line"><span class="keyword">select</span> xxx <span class="keyword">where</span> xxx <span class="keyword">like</span> <span class="string">'_ se'</span> // 其中<span class="string">'_'</span>匹配一个字符</span><br></pre></td></tr></table></figure></li><li><p>regexp (正则)<br>^$可以表示单词的开始和结尾，<code>.</code>表示单个字符</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select xxx where xxx regexp [<span class="string">binary</span>] 'hello .000 | abcd [<span class="string">123</span>][<span class="symbol">5-6</span>]\\.'</span><br></pre></td></tr></table></figure></li></ul><p>其中binary可选参数，表示是否区分大小写<br>其中<code>|</code>表示或者，<code>[]</code>表示匹配里面的多个字符之一<br><code>\\.</code>表示匹配<code>.</code></p><ul><li><p>concat</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">concat</span> (var1, <span class="string">'a'</span>, var2) <span class="keyword">from</span> <span class="keyword">table</span>; //拼接起来</span><br></pre></td></tr></table></figure></li><li><p>as (别名)</p></li><li>upper left length locate lower ltrim right substring</li><li>CurDate CurTime<br>当前日期，当前时间</li><li>Now<br>当前日期+时间</li><li>avg, count, max, min, sum<br>求平均，求总数，最大值等</li><li>group by<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> count<span class="comment">(*) from table group by xxx having count(*)</span> &gt; <span class="number">2</span> <span class="keyword">order</span> <span class="keyword">by</span> xxx;</span><br></pre></td></tr></table></figure></li></ul><h1 id="联结表、组合查询"><a href="#联结表、组合查询" class="headerlink" title="联结表、组合查询"></a>联结表、组合查询</h1><ul><li>默认笛卡尔积<br><code>检索出的行数为第一个表乘以第二个表的行数</code></li><li>inner join table on xx = xx 类似默认笛卡尔积</li><li>left outer join 和 right outer join<br>CROSS JOIN        笛卡尔乘积（所有可能的行对）<br><img src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" alt="None.gif">INNER JOIN        仅对满足连接条件的CROSS中的列<br><img src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" alt="None.gif">LEFT OUTER JOIN        一个表满足条件的行，和另一个表的所有行<br><img src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" alt="None.gif">RIGHT OUTER JOIN        与LEFT相同，但两个表的角色互换<br><img src="http://images.csdn.net/syntaxhighlighting/OutliningIndicators/None.gif" alt="None.gif">FULL OUTER JOIN        LEFT OUTER 和 RIGHT OUTER中所有行的超集</li><li>union / union all<br>其中union会去重<h1 id="数据插入、更新、删除"><a href="#数据插入、更新、删除" class="headerlink" title="数据插入、更新、删除"></a>数据插入、更新、删除</h1></li><li>插入多条数据<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span>(表字段) <span class="keyword">values</span>(xxx),(xxx);</span><br></pre></td></tr></table></figure></li></ul><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><h2 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h2><p>创建方式如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 直接创建索引</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> index_name <span class="keyword">ON</span> <span class="keyword">table</span>(<span class="keyword">column</span>(<span class="keyword">length</span>))</span><br><span class="line">// 修改表结构的方式添加索引</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> <span class="keyword">INDEX</span> index_name <span class="keyword">ON</span> (<span class="keyword">column</span>(<span class="keyword">length</span>))</span><br><span class="line">// 创建表的时候同时创建索引</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`table`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT ,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">    <span class="keyword">INDEX</span> index_name (title(<span class="keyword">length</span>))</span><br><span class="line"> )</span><br><span class="line">// 删除索引</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> index_name <span class="keyword">ON</span> <span class="keyword">table</span></span><br></pre></td></tr></table></figure></p><h2 id="唯一索引-和主键索引唯一的区别是可以为null"><a href="#唯一索引-和主键索引唯一的区别是可以为null" class="headerlink" title="唯一索引(和主键索引唯一的区别是可以为null)"></a>唯一索引(和主键索引唯一的区别是可以为null)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 直接创建索引</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> index_name <span class="keyword">ON</span> <span class="keyword">table</span>(<span class="keyword">column</span>(<span class="keyword">length</span>))</span><br><span class="line">// 修改表结构的方式添加索引</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> index_name <span class="keyword">ON</span> (<span class="keyword">column</span>(<span class="keyword">length</span>))</span><br><span class="line">// 创建表的时候同时创建索引</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`table`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT ,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">   <span class="keyword">UNIQUE</span> index_name (title(<span class="keyword">length</span>))</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这里length的意思取字段的前几个字符建立索引，这样的好处是能够灵活控制索引的磁盘空间</p><h2 id="主键索引PK"><a href="#主键索引PK" class="headerlink" title="主键索引PK"></a>主键索引PK</h2><p>一般为自增唯一字段，不允许为空</p><h2 id="组合索引"><a href="#组合索引" class="headerlink" title="组合索引"></a>组合索引</h2><ul><li>从左到右，如果where不按这个顺序不会用索引</li><li>范围查询之后不会再用索引</li><li>跳跃查询也不会用索引<h2 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h2></li></ul>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术栈 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Redis实战</title>
      <link href="/Redis%E5%AE%9E%E6%88%98/"/>
      <url>/Redis%E5%AE%9E%E6%88%98/</url>
      <content type="html"><![CDATA[<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><ul><li>当做缓存，缓存未命中再访问MySQL，这样能降低读的延迟</li><li>原子计数</li><li>最新TopN数据<br>使用list中的LTRIM latest.comments 0 5000 这样永远只保存最近的5000个ID</li><li>带权值的排序<br>使用sorted set， 然后ZADD命令</li><li>过期时间</li><li>优先级的队列系统</li></ul><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><ul><li>List</li><li>Set</li><li>Sorted set</li><li>Hash</li><li>自增原子<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1></li><li>主从同步</li><li><p>持久化</p><h1 id="strings"><a href="#strings" class="headerlink" title="strings"></a>strings</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sdshdr</span> &#123;</span></span><br><span class="line">    <span class="keyword">long</span> len;</span><br><span class="line">    <span class="keyword">long</span> <span class="built_in">free</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>set</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="built_in">name</span> <span class="string">"hello"</span></span><br></pre></td></tr></table></figure></li><li><p>setnx<br>其中nx是不存在的意思, 如果存在则设置失败</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setnx <span class="built_in">name</span> <span class="string">"hello"</span></span><br></pre></td></tr></table></figure></li><li><p>setex<br>如果超过10秒，get就会为空</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setex <span class="built_in">name</span> <span class="number">10</span> <span class="string">"red"</span></span><br></pre></td></tr></table></figure></li><li><p>setrange<br>替换字符串</p></li><li>mset<br>设置多组值</li><li>msetnx<br>会回滚</li><li>getset<br>返回旧值</li><li>mget<br>获取多组数据，如果不存在返回nil</li><li>incr/decr<br>自增，如果不存在默认为1,而且用get的时候得到的会是字符串<h1 id="hashes"><a href="#hashes" class="headerlink" title="hashes"></a>hashes</h1></li><li><p>hset</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hset</span> myhash filed1 hello</span><br></pre></td></tr></table></figure></li><li><p>hsetnx<br>如果key不存在则创建，如果key存在则返回0（不会覆盖）</p></li><li>hmset<br>设置多个filed</li><li><p>hget</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hget</span> myhash field1</span><br></pre></td></tr></table></figure></li><li><p>hmget</p></li><li><p>hincrby</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给指定的filed加定值</span></span><br><span class="line">hincrby myhash field3 <span class="number">-8</span></span><br></pre></td></tr></table></figure></li><li><p>hexists</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断filed是否存在</span></span><br><span class="line">hexists myhash filed1</span><br></pre></td></tr></table></figure></li></ul><ul><li>hlen<br>返回filed的数量</li><li>hdel<br>删除指定filed，并返回1 成功</li><li>hkeys hvals hgetall<h1 id="lists"><a href="#lists" class="headerlink" title="lists"></a>lists</h1>链表结构，主要只有push和pop, 是一个双向链表，长度为2的32次方，既可以当做栈也可以当做队列<br>也有阻塞版本的pop</li><li><p>lpush rpush</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// l和r是表示左右的意思</span><br><span class="line">lpush mylist <span class="string">"world"</span></span><br><span class="line"><span class="keyword">lrange</span> mylist <span class="number">0</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure></li><li><p>linsert</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 在world前面加上there</span><br><span class="line"><span class="keyword">linsert</span> mylist3 before <span class="string">"world"</span> <span class="string">"there"</span></span><br></pre></td></tr></table></figure></li><li><p>lset</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设置指定下标的值</span><br><span class="line"><span class="keyword">lset</span> mylist <span class="number">0</span> <span class="string">"four"</span></span><br></pre></td></tr></table></figure></li><li><p>lrem</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 从 key 对应 list 中删除 <span class="built_in">count</span> 个和 <span class="built_in">value</span> 相同的元素</span><br><span class="line">// <span class="built_in">count</span> &gt; <span class="number">0</span> 删除<span class="built_in">count</span>， <span class="built_in">count</span> &lt; <span class="number">0</span> 从尾部开始删除, <span class="built_in">count</span> == <span class="number">0</span>删除所有</span><br><span class="line">lrem mylist <span class="number">2</span> <span class="string">"hello"</span></span><br></pre></td></tr></table></figure></li><li><p>ltrim</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只保留from到to的数据</span></span><br><span class="line">ltrim mylist8 <span class="number">1</span> <span class="number">-1</span> <span class="comment">// 相当于删除了第一个元素</span></span><br></pre></td></tr></table></figure></li><li><p>lpop<br>删除头部元素并返回头部元素</p></li><li>rpoplpush<br>原子操作，从第一个链表取出来放到第二个链表头，并返回这个值</li><li>lindex <figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lindex</span> mylist index  // 返回第index的位置</span><br></pre></td></tr></table></figure></li></ul><h1 id="sets"><a href="#sets" class="headerlink" title="sets"></a>sets</h1><p>set 是集合， hashtable实现， sorted_set是跳表</p><ul><li>sadd</li><li>smemebers<br>获取所有元素</li><li>srem<br>删除</li><li>spop<br>随机返回</li><li>sdiff<br>去除 a里面和b相关，把剩下的返回<br>比如  1 2 3 diff 3 4 5 =  1 2</li><li>sdiffstore<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 与sdiff的区别就是会存起来</span></span><br><span class="line">sdiffstore myset1 myset2 tomyset3</span><br></pre></td></tr></table></figure></li></ul><ul><li>sinter sinterstore<br>交集</li><li>sunion sunionstore<br>并集</li><li><p>smove</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">smove mysetfrom mysetto <span class="literal">three</span></span><br><span class="line">// 把<span class="literal">three</span>从<span class="built_in">from</span>移动到<span class="built_in">to</span></span><br></pre></td></tr></table></figure></li><li><p>scard<br>返回元素个数</p></li><li>sismember<br>返回是否是元素</li><li><p>srandmember<br>随机返回，不删除</p><h1 id="sorted-sets"><a href="#sorted-sets" class="headerlink" title="sorted sets"></a>sorted sets</h1><p>排序的， 跳表+hashtable</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zadd myzset <span class="number">1</span> <span class="string">"one"</span></span><br><span class="line">zadd myzset <span class="number">2</span> <span class="string">"two"</span></span><br><span class="line">zadd myzset <span class="number">3</span> <span class="string">"three"</span></span><br><span class="line">zrange myzset <span class="number">0</span> -<span class="number">1</span> withscores <span class="regexp">//</span> zrevrange是从大到小的顺序</span><br><span class="line"><span class="regexp">//</span> <span class="string">"one"</span> <span class="string">"1"</span> <span class="string">"two"</span> <span class="string">"2"</span> <span class="string">"three"</span> <span class="string">"3"</span></span><br></pre></td></tr></table></figure></li><li><p>zincrby</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zincrby myset <span class="number">2</span> <span class="string">"one"</span> <span class="comment">// 增加分数</span></span><br></pre></td></tr></table></figure></li><li><p>zrank zrevrank<br>从小到大返回 下标, 从大到小返回 下标</p></li><li>zrangebyscore</li><li>zcount<br>返回分数score区间的个数</li><li>zcard<br>返回集合个数</li><li>zscore<br>返回元素的score</li><li>zremrangebyrank<br>删除排名区间的， 下标顺序</li><li><p>zremrangebyscore<br>删除score区间的元素</p></li><li><p>keys <em><br>列出所有key, 可以用字符串匹配 keys abc</em> 之类</p></li><li>exists<br>判断key是否存在</li><li>del<br>删除key</li><li>expire<br>设置有效时间, 通过ttl获取有效时长</li><li><p>move<br>转移数据库</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select <span class="number">0</span></span><br><span class="line"><span class="keyword">set</span> age <span class="comment">30</span></span><br><span class="line">move <span class="comment">age 1</span></span><br><span class="line">select <span class="comment">1</span></span><br><span class="line">get <span class="comment">age</span></span><br></pre></td></tr></table></figure></li><li><p>persist<br>移除过期时间</p></li><li>randomkey</li><li>rename</li><li>type<br>获取key对应的value类型</li><li>ping  info  quit ..</li></ul>]]></content>
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术栈 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go基础语法.md</title>
      <link href="/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="编码风格"><a href="#编码风格" class="headerlink" title="编码风格"></a>编码风格</h1><h2 id="gofmt"><a href="#gofmt" class="headerlink" title="gofmt"></a>gofmt</h2><p>一般会自动规范代码风格</p><p> ##注释&amp;驼峰命名<br>/<em><br>    需要注释的内容</em>/</p><h2 id="包名"><a href="#包名" class="headerlink" title="包名"></a>包名</h2><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"bytes"</span></span><br></pre></td></tr></table></figure><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ByteSize <span class="keyword">float64</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">_           = <span class="literal">iota</span></span><br><span class="line">KB ByteSize = <span class="number">1</span> &lt;&lt; (<span class="number">2</span> * <span class="literal">iota</span>)</span><br><span class="line">MB</span><br><span class="line">GB</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 主函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello World!"</span>)</span><br><span class="line">fmt.Println(<span class="string">"size %f"</span>, GB)</span><br><span class="line"><span class="comment">// size %f 64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var (</span><br><span class="line">    ErrInternal = errors.New(<span class="string">"error1"</span>)</span><br><span class="line">    ErrInternal2 = errors.New(<span class="string">"error2"</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>Go语言提供了New和make</p><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 0值初始化</span></span><br><span class="line"><span class="keyword">type</span> SyncedBuffer <span class="keyword">struct</span> &#123;</span><br><span class="line">    lock sync.Mutex</span><br><span class="line">    buffer bytes.Buffer</span><br><span class="line">&#125;</span><br><span class="line">p := <span class="built_in">new</span>(SyncedBuffer)     <span class="comment">// type *SyncedBuffer</span></span><br><span class="line"><span class="keyword">var</span> v SyncedBuffer            <span class="comment">// type SyncedBuffer</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewFile</span><span class="params">(fd <span class="keyword">int</span>, name <span class="keyword">string</span>)</span> *<span class="title">File</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> fd &lt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    f := File&#123;fd, name, <span class="literal">nil</span>, <span class="number">0</span>&#125; <span class="comment">// 如果不按顺序，就需要加名字</span></span><br><span class="line">    <span class="keyword">return</span> &amp;f</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 复合字面可以初始化多种结构</span></span><br><span class="line">a := [...]<span class="keyword">string</span> &#123;Enone: <span class="string">"no error"</span>, Eio: <span class="string">"Eio"</span>, Einval: <span class="string">"invalid argument"</span>&#125;</span><br><span class="line">s := []<span class="keyword">string</span> &#123;Enone: <span class="string">"no error"</span>, Eio: <span class="string">"Eio"</span>, Einval: <span class="string">"invalid argument"</span>&#125;</span><br><span class="line">m := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span> &#123;Enone: <span class="string">"no error"</span>, Eio: <span class="string">"Eio"</span>, Einval: <span class="string">"invalid argument"</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="make"><a href="#make" class="headerlink" title="make"></a>make</h3><p>`make一般用于初始化切片，映射，信道<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line"><span class="comment">// 一般用法, 返回的不是指针</span></span><br><span class="line">v := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure></p><h1 id="分支循环"><a href="#分支循环" class="headerlink" title="分支循环"></a>分支循环</h1><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> i &lt; <span class="built_in">f</span>() &#123;</span><br><span class="line">    <span class="keyword">g</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">err</span> := <span class="keyword">file</span>.Chmod(0664); <span class="keyword">err</span> != nil &#123;</span><br><span class="line">    <span class="keyword">log</span>.<span class="keyword">Print</span>(<span class="keyword">err</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">err</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> init; condition; post &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> condition &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;&#125;</span><br><span class="line"><span class="comment">// 举例</span></span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">    sum += i</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历复合结构</span></span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> oldMap &#123;</span><br><span class="line">    newMap[key] = value</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 只遍历第一个</span></span><br><span class="line"><span class="keyword">for</span> key := <span class="keyword">range</span> oldMap &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 只遍历第二个</span></span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> array &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历字符串</span></span><br><span class="line"><span class="keyword">for</span> pos, char := <span class="keyword">range</span> <span class="string">"日本 \ x80 语"</span> &#123;</span><br><span class="line">    fmt.Printf()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 反转数字</span></span><br><span class="line"><span class="keyword">for</span> i, j := <span class="number">0</span>, <span class="built_in">len</span>(a) - <span class="number">1</span>; i &lt; j; i,j = i+<span class="number">1</span>, j<span class="number">-1</span> &#123;</span><br><span class="line">    a[i], a[j] = a[j], a[i]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'0'</span> &lt;= c &amp;&amp; c &lt;= <span class="string">'9'</span> :</span><br><span class="line">    <span class="keyword">return</span> c - <span class="string">'0'</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">'a'</span> &lt;= c &amp;&amp; c &lt;= <span class="string">'f'</span> :</span><br><span class="line">    <span class="keyword">return</span> c - <span class="string">'a'</span> + <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理相同条件</span></span><br><span class="line"><span class="keyword">switch</span> c &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断类型</span></span><br><span class="line"><span class="keyword">var</span> t <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">t = getType()</span><br><span class="line"><span class="keyword">switch</span> t := t.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">default</span> :</span><br><span class="line">    fmt.Printf(<span class="string">"%T"</span>, t)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">bool</span> :</span><br><span class="line">    fmt.Printf(<span class="string">"boolean %t\n"</span>, t)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">int</span>:</span><br><span class="line">    fmt.Printf(<span class="string">"integer %d\n"</span>, t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="多值返回"><a href="#多值返回" class="headerlink" title="多值返回"></a>多值返回</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(file *File)</span> <span class="title">Write</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br></pre></td></tr></table></figure><h2 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h2><p>无论何种路径都能返回，如果定义多个按定义顺序相反顺序执行</p><h1 id="切片-数组"><a href="#切片-数组" class="headerlink" title="切片(数组)"></a>切片(数组)</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 切片是按值传递，但是底层可能是同一份数组</span></span><br><span class="line"><span class="comment">// 二维切片</span></span><br><span class="line"><span class="keyword">type</span> Transform [<span class="number">3</span>][<span class="number">3</span>]<span class="keyword">float64</span></span><br><span class="line"><span class="keyword">type</span> LinesOfText [][]<span class="keyword">byte</span></span><br><span class="line">test := LinesOfTest&#123;</span><br><span class="line">    []<span class="keyword">byte</span>(<span class="string">"abc"</span>),</span><br><span class="line">    []<span class="keyword">byte</span>(<span class="string">"abc"</span>),</span><br><span class="line">    []<span class="keyword">byte</span>(<span class="string">"abc"</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="append"><a href="#append" class="headerlink" title="append"></a>append</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增加元素</span></span><br><span class="line">x := []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">x = <span class="built_in">append</span>(x, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">fmt.Println(x)</span><br><span class="line"><span class="comment">// 增加切片</span></span><br><span class="line">y := []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">x = <span class="built_in">append</span>(x, y...)</span><br><span class="line">fmt.Println(x)</span><br></pre></td></tr></table></figure><h1 id="Map映射"><a href="#Map映射" class="headerlink" title="Map映射"></a>Map映射</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">attend := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">bool</span>&#123;</span><br><span class="line">    <span class="string">"Ann"</span> : <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"Joe"</span> : <span class="literal">true</span>,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断是否存在</span></span><br><span class="line"><span class="keyword">var</span> seconds <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> ok <span class="keyword">bool</span></span><br><span class="line">seconds, ok = timeZone[tz]</span><br><span class="line"><span class="keyword">if</span> _, ok := timeZone[tz]; ok &#123;</span><br><span class="line">    doSomething()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 删除映射</span></span><br><span class="line"><span class="built_in">delete</span>(timeZone, <span class="string">"PDT"</span>)</span><br></pre></td></tr></table></figure><p>初始化方式：<br>File{fd, name, nil, 0}<br>File{fd: fd, name: name}<br>make([]int, 100)</p><h1 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h1><h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><p>在变量初始化之后，导入包初始化之后，就会初始化<br>`以指针或值为接收者的区别在于：值方法可通过指针和值调用， 而指针方法只能通过指针来调用。</p><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str, ok := <span class="keyword">value</span>.(string)</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">    fmt.Printf(<span class="string">""</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内嵌"><a href="#内嵌" class="headerlink" title="内嵌"></a>内嵌</h2><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 接口</span><br><span class="line"><span class="keyword">type</span> <span class="type">Reader</span> interface &#123;</span><br><span class="line">    <span class="type">Read</span>(p []byte) (n int, err error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="type">Writer</span> interface &#123;</span><br><span class="line">    <span class="type">Write</span>(p []byte) (n int, err error)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="type">ReaderWriter</span> interface &#123;</span><br><span class="line">    <span class="type">Reader</span></span><br><span class="line">    <span class="type">Writer</span></span><br><span class="line">&#125;</span><br><span class="line">// 结构体</span><br><span class="line"><span class="keyword">type</span> <span class="type">ReaderWriter</span> struct &#123;</span><br><span class="line">    *<span class="type">Reader</span></span><br><span class="line">    *<span class="type">Writer</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h1><h2 id="chan"><a href="#chan" class="headerlink" title="chan"></a>chan</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cj := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)                <span class="comment">// 无缓冲信道</span></span><br><span class="line">cj := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">0</span>)            <span class="comment">// 无缓冲信道</span></span><br><span class="line">cj := <span class="built_in">make</span>(<span class="keyword">chan</span> *os.File, <span class="number">100</span>) <span class="comment">// 指向文件指针的带缓冲信道</span></span><br></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    list.Sort()</span><br><span class="line">    c &lt;- <span class="number">1</span></span><br><span class="line">&#125;()</span><br><span class="line">doSomethingForAWhile()</span><br><span class="line">&lt;- c</span><br><span class="line"></span><br><span class="line"><span class="comment">// 考虑带缓冲的任务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Serve</span><span class="params">(queue <span class="keyword">chan</span> *Request)</span></span> &#123;</span><br><span class="line">       <span class="keyword">for</span> req := <span class="keyword">range</span> queue &#123;</span><br><span class="line">            req := req</span><br><span class="line">           sem &lt;- <span class="number">1</span></span><br><span class="line">            <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">                process(req)</span><br><span class="line">                &lt;-sem</span><br><span class="line">            &#125;()</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="panic-amp-recover"><a href="#panic-amp-recover" class="headerlink" title="panic&amp;recover"></a>panic&amp;recover</h1>]]></content>
      
      <categories>
          
          <category> Go语言 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Go高级编程.md</title>
      <link href="/Go%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
      <url>/Go%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p><a href="https://books.studygolang.com/advanced-go-programming-book/ch2-cgo/ch2-04-memory.html" target="_blank" rel="noopener">https://books.studygolang.com/advanced-go-programming-book/ch2-cgo/ch2-04-memory.html</a></p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="数组定义方式"><a href="#数组定义方式" class="headerlink" title="数组定义方式"></a>数组定义方式</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span> [<span class="number">3</span>]int                    <span class="comment">// 定义一个长度为3的int类型数组, 元素全部为0</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">b</span> = [...]int&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;       <span class="comment">// 定义一个长度为3的int类型数组, 元素为 1, 2, 3</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">var</span> c = [...]int&#123;<span class="number">2</span>: <span class="number">3</span>, <span class="number">1</span>: <span class="number">2</span>&#125;    <span class="comment">// 定义一个长度为3的int类型数组, 元素为 0, 2, 3</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">var</span> d = [...]int&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>: <span class="number">5</span>, <span class="number">6</span>&#125; <span class="comment">// 定义一个长度为6的int类型数组, 元素为 1, 2, 0, 0, 5, 6</span></span><br></pre></td></tr></table></figure><h2 id="数组指针"><a href="#数组指针" class="headerlink" title="数组指针"></a>数组指针</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span> = [...]int&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; <span class="comment">// a 是一个数组</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">b</span> = &amp;<span class="selector-tag">a</span>                <span class="comment">// b 是指向数组的指针</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="selector-tag">a</span>[<span class="number">0</span>], <span class="selector-tag">a</span>[<span class="number">1</span>])   <span class="comment">// 打印数组的前2个元素</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="selector-tag">b</span>[<span class="number">0</span>], <span class="selector-tag">b</span>[<span class="number">1</span>])   <span class="comment">// 通过数组指针访问数组元素的方式和数组类似</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="selector-tag">i</span>, v := range <span class="selector-tag">b</span> &#123;     <span class="comment">// 通过数组指针迭代数组的元素</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="selector-tag">i</span>, v)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> a &#123;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"b[%d]: %d\n"</span>, i, b[i])</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> b &#123;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"b[%d]: %d\n"</span>, i, v)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(c); i++ &#123;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"b[%d]: %d\n"</span>, i, b[i])</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数数组、管道数组"><a href="#函数数组、管道数组" class="headerlink" title="函数数组、管道数组"></a>函数数组、管道数组</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 图像解码器数组</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">var</span> decoder1 [<span class="number">2</span>]func(io.Reader) (image<span class="selector-class">.Image</span>, error)</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">var</span> decoder2 = [...]func(io.Reader) (image<span class="selector-class">.Image</span>, error)&#123;</span><br><span class="line"></span><br><span class="line">    png<span class="selector-class">.Decode</span>,</span><br><span class="line"></span><br><span class="line">    jpeg<span class="selector-class">.Decode</span>,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口数组</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">var</span> unknown1 [<span class="number">2</span>]interface&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">var</span> unknown2 = [...]interface&#123;&#125;&#123;<span class="number">123</span>, <span class="string">"你好"</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 管道数组</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">var</span> chanList = [<span class="number">2</span>]chan int&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="空数组"><a href="#空数组" class="headerlink" title="空数组"></a>空数组</h2><p>长度为0的数组在内存中并不占用空间。空数组虽然很少直接使用，但是可以用于强调某种特有类型的操作时避免分配额外的内存空间，比如用于管道的同步操作：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">c1 := <span class="built_in">make</span>(<span class="keyword">chan</span> [<span class="number">0</span>]<span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"c1"</span>)</span><br><span class="line"></span><br><span class="line">    c1 &lt;- [<span class="number">0</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">&lt;-c1</span><br></pre></td></tr></table></figure></p><p>在这里，我们并不关心管道中传输数据的真实类型，其中管道接收和发送操作只是用于消息的同步。对于这种场景，我们用空数组来作为管道类型可以减少管道元素赋值时的开销。当然一般更倾向于用无类型的匿名结构体代替：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">c2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"c2"</span>)</span><br><span class="line"></span><br><span class="line">    c2 &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125; <span class="comment">// struct&#123;&#125;部分是类型, &#123;&#125;表示对应的结构体值</span></span><br><span class="line"></span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">&lt;-c2</span><br></pre></td></tr></table></figure></p><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="类似切片"><a href="#类似切片" class="headerlink" title="类似切片"></a>类似切片</h2><p>字符串虽然不是切片，但是支持切片操作，不同位置的切片底层也访问的同一块内存数据（因为字符串是只读的，相同的字符串面值常量通常是对应同一个字符串常量）：<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="string">"hello, world"</span></span><br><span class="line"></span><br><span class="line">hello := s[:5]</span><br><span class="line"></span><br><span class="line">world := s[7:]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 := <span class="string">"hello, world"</span>[:5]</span><br><span class="line"></span><br><span class="line">s2 := <span class="string">"hello, world"</span>[7:]</span><br></pre></td></tr></table></figure></p><p>和数组一样，内置的len和cap函数返回相同的结果，都对应字符串的长度。也可以通过reflect.StringHeader结构访问字符串的长度（这里只是为了演示字符串的结构，并不是推荐的做法）：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(<span class="string">"len(s):"</span>, (*reflect.StringHeader)(unsafe.Pointer(<span class="meta">&amp;s)).Len)   <span class="comment">// 12</span></span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"len(s1):"</span>, (*reflect.StringHeader)(unsafe.Pointer(<span class="meta">&amp;s1)).Len) <span class="comment">// 5</span></span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"len(s2):"</span>, (*reflect.StringHeader)(unsafe.Pointer(<span class="meta">&amp;s2)).Len) <span class="comment">// 5</span></span></span><br></pre></td></tr></table></figure></p><h1 id="切片-slice"><a href="#切片-slice" class="headerlink" title="切片(slice)"></a>切片(slice)</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line"></span><br><span class="line">    a []<span class="keyword">int</span>               <span class="comment">// nil切片, 和 nil 相等, 一般用来表示一个不存在的切片</span></span><br><span class="line"></span><br><span class="line">    b = []<span class="keyword">int</span>&#123;&#125;           <span class="comment">// 空切片, 和 nil 不相等, 一般用来表示一个空的集合</span></span><br><span class="line"></span><br><span class="line">    c = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;    <span class="comment">// 有3个元素的切片, len和cap都为3</span></span><br><span class="line"></span><br><span class="line">    d = c[:<span class="number">2</span>]             <span class="comment">// 有2个元素的切片, len为2, cap为3</span></span><br><span class="line"></span><br><span class="line">    e = c[<span class="number">0</span>:<span class="number">2</span>:<span class="built_in">cap</span>(c)]     <span class="comment">// 有2个元素的切片, len为2, cap为3</span></span><br><span class="line"></span><br><span class="line">    f = c[:<span class="number">0</span>]             <span class="comment">// 有0个元素的切片, len为0, cap为3</span></span><br><span class="line"></span><br><span class="line">    g = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">3</span>)    <span class="comment">// 有3个元素的切片, len和cap都为3</span></span><br><span class="line"></span><br><span class="line">    h = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// 有2个元素的切片, len为2, cap为3</span></span><br><span class="line"></span><br><span class="line">    i = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, <span class="number">3</span>) <span class="comment">// 有0个元素的切片, len为0, cap为3</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"><span class="string">``</span></span><br><span class="line">## 添加切片</span><br></pre></td></tr></table></figure><p>var a []int</p><p>a = append(a, 1)               // 追加1个元素</p><p>a = append(a, 1, 2, 3)         // 追加多个元素, 手写解包方式</p><p>a = append(a, []int{1,2,3}…) // 追加一个切片, 切片需要解包</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`在容量不足的情况下，append的操作会导致重新分配内存，从而导致巨大的内存分配和复制数据代价`</span><br></pre></td></tr></table></figure><p>var a = []int{1,2,3}</p><p>a = append([]int{0}, a…)        // 在开头添加1个元素</p><p>a = append([]int{-3,-2,-1}, a…) // 在开头添加1个切片<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span> []int</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> = append(<span class="selector-tag">a</span>[:i], append([]int&#123;x&#125;, <span class="selector-tag">a</span>[<span class="selector-tag">i</span>:]...)...)     <span class="comment">// 在第i个位置插入x</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> = append(<span class="selector-tag">a</span>[:i], append([]int&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;, <span class="selector-tag">a</span>[<span class="selector-tag">i</span>:]...)...) <span class="comment">// 在第i个位置插入切片</span></span><br><span class="line"><span class="selector-tag">a</span> = append(<span class="selector-tag">a</span>, x...)       <span class="comment">// 为x切片扩展足够的空间</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">copy</span><span class="params">(a[i+len(x)</span></span>:], <span class="selector-tag">a</span>[<span class="selector-tag">i</span>:]) <span class="comment">// a[i:]向后移动len(x)个位置</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">copy</span><span class="params">(a[i:], x)</span></span>            <span class="comment">// 复制新添加的切片</span></span><br></pre></td></tr></table></figure></p><h2 id="删除切片"><a href="#删除切片" class="headerlink" title="删除切片"></a>删除切片</h2><p>需要重新赋值切片防止内存泄漏<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FindPhoneNumber</span><span class="params">(filename <span class="keyword">string</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    b, _ := ioutil.ReadFile(filename)</span><br><span class="line"></span><br><span class="line">    b = regexp.MustCompile(<span class="string">"[0-9]+"</span>).Find(b)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">append</span>([]<span class="keyword">byte</span>&#123;&#125;, b...) <span class="comment">// 这里</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>删除切片有时候会影响GC<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span> []*int&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> = <span class="selector-tag">a</span>[:len(a)-<span class="number">1</span>]    <span class="comment">// 本删除的最后一个元素依然被引用, 可能导致GC操作被阻碍</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span> []*int&#123; ... &#125;</span><br><span class="line"><span class="selector-tag">a</span>[len(a)-<span class="number">1</span>] = nil <span class="comment">// GC回收最后一个元素内存</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> = <span class="selector-tag">a</span>[:len(a)-<span class="number">1</span>]  <span class="comment">// 从切片删除最后一个元素</span></span><br></pre></td></tr></table></figure></p><p>可以用copy和append组合可以避免创建中间的临时切片，同样是完成添加元素的操作：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> = append(<span class="selector-tag">a</span>, <span class="number">0</span>)     <span class="comment">// 切片扩展1个空间</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">copy</span><span class="params">(a[i+<span class="number">1</span>:], a[i:])</span></span> <span class="comment">// a[i:]向后移动1个位置</span></span><br><span class="line"></span><br><span class="line">s[i] = x             <span class="comment">// 设置新添加的元素</span></span><br></pre></td></tr></table></figure></p><p>第一句append用于扩展切片的长度，为要插入的元素留出空间。第二句copy操作将要插入位置开始之后的元素向后挪动一个位置。第三句真实地将新添加的元素赋值到对应的位置。操作语句虽然冗长了一点，但是相比前面的方法，可以减少中间创建的临时切片。<br>用copy和append组合也可以实现在中间位置插入多个元素(也就是插入一个切片):<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> = append(<span class="selector-tag">a</span>, x...)       <span class="comment">// 为x切片扩展足够的空间</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">copy</span><span class="params">(a[i+len(x)</span></span>:], <span class="selector-tag">a</span>[<span class="selector-tag">i</span>:]) <span class="comment">// a[i:]向后移动len(x)个位置</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">copy</span><span class="params">(a[i:], x)</span></span>            <span class="comment">// 复制新添加的切片</span></span><br></pre></td></tr></table></figure></p><p>也可以用copy完成删除开头的元素：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> = []int&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> = <span class="selector-tag">a</span>[:copy(<span class="selector-tag">a</span>, <span class="selector-tag">a</span>[<span class="number">1</span>:])] <span class="comment">// 删除开头1个元素</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> = <span class="selector-tag">a</span>[:copy(<span class="selector-tag">a</span>, <span class="selector-tag">a</span>[N:])] <span class="comment">// 删除开头N个元素</span></span><br></pre></td></tr></table></figure></p><p>对于删除中间的元素，需要对剩余的元素进行一次整体挪动，同样可以用append或copy原地完成：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> = []int&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, ...&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> = append(<span class="selector-tag">a</span>[:i], <span class="selector-tag">a</span>[i+<span class="number">1</span>:]...) <span class="comment">// 删除中间1个元素</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> = append(<span class="selector-tag">a</span>[:i], <span class="selector-tag">a</span>[i+N:]...) <span class="comment">// 删除中间N个元素</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> = <span class="selector-tag">a</span>[:copy(<span class="selector-tag">a</span>[<span class="selector-tag">i</span>:], <span class="selector-tag">a</span>[i+<span class="number">1</span>:])]  <span class="comment">// 删除中间1个元素</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> = <span class="selector-tag">a</span>[:copy(<span class="selector-tag">a</span>[<span class="selector-tag">i</span>:], <span class="selector-tag">a</span>[i+N:])]  <span class="comment">// 删除中间N个元素</span></span><br></pre></td></tr></table></figure></p><h1 id="并发模型"><a href="#并发模型" class="headerlink" title="并发模型"></a>并发模型</h1><h2 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> total <span class="keyword">struct</span> &#123;</span><br><span class="line"></span><br><span class="line">    sync.Mutex</span><br><span class="line"></span><br><span class="line">    <span class="keyword">value</span> <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">通过sync.<span class="keyword">lock</span>()和sync.Done()</span><br></pre></td></tr></table></figure><h2 id="原子"><a href="#原子" class="headerlink" title="原子"></a>原子</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"></span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"sync/atomic"</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"><span class="comment">//用法：</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(wg *sync.WaitGroup)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">defer</span> wg.Done()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> i <span class="keyword">uint64</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++ &#123;</span><br><span class="line"></span><br><span class="line">        atomic.AddUint64(&amp;total, i)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line">    wg.Add(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> worker(&amp;wg)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> worker(&amp;wg)</span><br><span class="line"></span><br><span class="line">    wg.Wait()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">我们可以将通用的代码提取出来，就成了标准库中sync.Once的实现：</span><br><span class="line">type Once struct &#123;</span><br><span class="line"></span><br><span class="line">    m    Mutex</span><br><span class="line"></span><br><span class="line">    done uint32</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func (o *Once) <span class="keyword">Do</span>(f func()) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> atomic.LoadUint32(&amp;o.done) == 1 &#123;</span><br><span class="line"></span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    o.m.Lock()</span><br><span class="line"></span><br><span class="line">    defer o.m.Unlock()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> o.done == 0 &#123;</span><br><span class="line"></span><br><span class="line">        defer atomic.StoreUint32(&amp;o.done, 1)</span><br><span class="line"></span><br><span class="line">        f()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">基于sync.Once重新实现单件模式：</span><br><span class="line">var (</span><br><span class="line"></span><br><span class="line">   <span class="built_in"> instance </span>*singleton</span><br><span class="line"></span><br><span class="line">    once     sync.Once</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func Instance() *singleton &#123;</span><br><span class="line"></span><br><span class="line">    once.<span class="keyword">Do</span>(func() &#123;</span><br><span class="line"></span><br><span class="line">       <span class="built_in"> instance </span>= &amp;singleton&#123;&#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    return instance</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="带缓冲chan"><a href="#带缓冲chan" class="headerlink" title="带缓冲chan"></a>带缓冲chan</h2><p>测试了下才知道原来<br>&lt;-chan int  像这样的只能接收值<br>chan&lt;- int  像这样的只能发送值<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> limit = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, w := <span class="keyword">range</span> work &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">            limit &lt;- <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            w()</span><br><span class="line"></span><br><span class="line">            &lt;-limit</span><br><span class="line"></span><br><span class="line">        &#125;()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>) <span class="comment">// 带 10 个缓存</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开N个后台打印线程</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">cap</span>(done); i++ &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">            fmt.Println(<span class="string">"你好, 世界"</span>)</span><br><span class="line"></span><br><span class="line">            done &lt;- <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        &#125;()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待N个后台线程完成</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">cap</span>(done); i++ &#123;</span><br><span class="line"></span><br><span class="line">        &lt;-done</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//其实也可以用</span></span><br><span class="line">sync.WaitGroup</span><br></pre></td></tr></table></figure></p><h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">基于<span class="keyword">select</span>实现的管道的超时判断：</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> v := &lt;-in:</span><br><span class="line"></span><br><span class="line">        fmt.Println(v)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> &lt;-time.After(time.Second):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="comment">// 超时</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">通过<span class="keyword">select</span>的<span class="keyword">default</span>分支实现非阻塞的管道发送或接收操作：</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> v := &lt;-in:</span><br><span class="line"></span><br><span class="line">        fmt.Println(v)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 没有数据</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">通过<span class="keyword">select</span>来阻止main函数退出：</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// do some thins</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是管道的发送操作和接收操作是一一对应的，如果要停止多个Goroutine那么可能需要创建同样数量的管道，这个代价太大了。其实我们可以通过close关闭一个管道来实现广播的效果，所有从关闭管道接收的操作均会收到一个零值和一个可选的失败标志。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(cannel <span class="keyword">chan</span> <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line"></span><br><span class="line">            fmt.Println(<span class="string">"hello"</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 正常工作</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> &lt;-cannel:</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 退出</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    cancel := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">go</span> worker(cancel)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    time.Sleep(time.Second)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">close</span>(cancel)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p>异常必须放在defer func () {}()</p>]]></content>
      
      <categories>
          
          <category> Go语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
