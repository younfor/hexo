{"meta":{"title":"Younfor","subtitle":"随心而笔","description":"时间是最好的老师","author":"younfor","url":"http://younfor.com"},"pages":[{"title":"about","date":"2015-12-30T16:32:43.000Z","updated":"2018-06-09T12:57:10.000Z","comments":true,"path":"about/index.html","permalink":"http://younfor.com/about/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-06-09T11:54:04.000Z","updated":"2018-06-09T12:57:10.000Z","comments":true,"path":"tags/index.html","permalink":"http://younfor.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Go基础语法.md","slug":"Go基础语法","date":"2018-06-09T13:11:17.000Z","updated":"2018-06-09T14:33:27.000Z","comments":true,"path":"Go基础语法/","link":"","permalink":"http://younfor.com/Go基础语法/","excerpt":"","text":"1. 编码风格1.1 gofmt一般会自动规范代码风格 1.2 注释&amp;驼峰命名/ 需要注释的内容 / 1.3 包名1import \"bytes\" 2. 变量2.0 常量12345678910111213type ByteSize float64const ( _ = iota KB ByteSize = 1 &lt;&lt; (2 * iota) MB GB)// 主函数func main() &#123; fmt.Println(\"Hello World!\") fmt.Println(\"size %f\", GB) // size %f 64&#125; 2.1 声明1234var ( ErrInternal = errors.New(\"error1\") ErrInternal2 = errors.New(\"error2\")) 2.2 初始化Go语言提供了New和make new1234567891011121314151617181920// 0值初始化type SyncedBuffer struct &#123; lock sync.Mutex buffer bytes.Buffer&#125;p := new(SyncedBuffer) // type *SyncedBuffervar v SyncedBuffer // type SyncedBuffer// 如果是构造函数func NewFile(fd int, name string) *File &#123; if fd &lt; 0 &#123; return nil &#125; f := File&#123;fd, name, nil, 0&#125; // 如果不按顺序，就需要加名字 return &amp;f&#125;// 复合字面可以初始化多种结构a := [...]string &#123;Enone: \"no error\", Eio: \"Eio\", Einval: \"invalid argument\"&#125;s := []string &#123;Enone: \"no error\", Eio: \"Eio\", Einval: \"invalid argument\"&#125;m := map[int]string &#123;Enone: \"no error\", Eio: \"Eio\", Einval: \"invalid argument\"&#125; make`make一般用于初始化切片，映射，信道123make([]int, 10, 100)// 一般用法, 返回的不是指针v := make([]int, 100) 3. 分支循环3.1 if12345678if i &lt; f() &#123; g()&#125;if err := file.Chmod(0664); err != nil &#123; log.Print(err) return err&#125; 3.2 for1234567891011121314151617181920212223242526for init; condition; post &#123;&#125;for condition &#123;&#125;for &#123;&#125;// 举例sum := 0for i := 0; i &lt; 10; i++ &#123; sum += i&#125;// 遍历复合结构for key, value := range oldMap &#123; newMap[key] = value&#125;// 只遍历第一个for key := range oldMap &#123;&#125;// 只遍历第二个for _, value := range array &#123;&#125;// 遍历字符串for pos, char := range \"日本 \\ x80 语\" &#123; fmt.Printf()&#125;// 反转数字for i, j := 0, len(a) - 1; i &lt; j; i,j = i+1, j-1 &#123; a[i], a[j] = a[j], a[i]&#125; 3.3 switch12345678910111213141516171819202122switch &#123;case '0' &lt;= c &amp;&amp; c &lt;= '9' : return c - '0'case 'a' &lt;= c &amp;&amp; c &lt;= 'f' : return c - 'a' + 10&#125;// 处理相同条件switch c &#123;case 'a', 'b', 'c': return true&#125;// 判断类型var t interface&#123;&#125;t = getType()switch t := t.(type) &#123;default : fmt.Printf(\"%T\", t)case bool : fmt.Printf(\"boolean %t\\n\", t)case int: fmt.Printf(\"integer %d\\n\", t)&#125; 4. 函数4.1 多值返回1func (file *File) Write(b []byte) (n int, err error) 4.2 defer无论何种路径都能返回，如果定义多个按定义顺序相反顺序执行 5. 切片(数组)123456789// 切片是按值传递，但是底层可能是同一份数组// 二维切片type Transform [3][3]float64type LinesOfText [][]bytetest := LinesOfTest&#123; []byte(\"abc\"), []byte(\"abc\"), []byte(\"abc\"),&#125; 5.1 append12345678// 增加元素x := []int&#123;1,2,3&#125;x = append(x, 4, 5, 6)fmt.Println(x)// 增加切片y := []int&#123;1,2,3&#125;x = append(x, y...)fmt.Println(x) 6. Map映射1234567891011121314attend := map[string]bool&#123; \"Ann\" : true, \"Joe\" : true, ...&#125;// 判断是否存在var seconds intvar ok boolseconds, ok = timeZone[tz]if _, ok := timeZone[tz]; ok &#123; doSomething()&#125;// 删除映射delete(timeZone, \"PDT\") 初始化方式：File{fd, name, nil, 0}File{fd: fd, name: name}make([]int, 100) 7. 函数7.1 init在变量初始化之后，导入包初始化之后，就会初始化`以指针或值为接收者的区别在于：值方法可通过指针和值调用， 而指针方法只能通过指针来调用。 8. 接口8.1 断言12345str, ok := value.(string)if ok &#123; fmt.Printf(\"\")&#125; else &#123;&#125; 8.2 内嵌1234567891011121314151617// 接口type Reader interface &#123; Read(p []byte) (n int, err error)&#125;type Writer interface &#123; Write(p []byte) (n int, err error)&#125;type ReaderWriter interface &#123; Reader Writer&#125;// 结构体type ReaderWriter struct &#123; *Reader *Writer&#125; 9 并发9.1 chan123cj := make(chan int) // 无缓冲信道cj := make(chan int, 0) // 无缓冲信道cj := make(chan *os.File, 100) // 指向文件指针的带缓冲信道 9.2 例子12345678910111213141516171819c := make(chan int)go func() &#123; list.Sort() c &lt;- 1&#125;()doSomethingForAWhile()&lt;- c// 考虑带缓冲的任务func Serve(queue chan *Request) &#123; for req := range queue &#123; req := req sem &lt;- 1 go func() &#123; process(req) &lt;-sem &#125;() &#125;&#125; 10 panic&amp;recover","categories":[{"name":"Go语言","slug":"Go语言","permalink":"http://younfor.com/categories/Go语言/"}],"tags":[]},{"title":"First","slug":"First","date":"2015-12-30T16:34:21.000Z","updated":"2018-06-09T13:04:04.000Z","comments":true,"path":"First/","link":"","permalink":"http://younfor.com/First/","excerpt":"","text":"图片测试哦,","categories":[{"name":"随笔","slug":"随笔","permalink":"http://younfor.com/categories/随笔/"}],"tags":[{"name":"日记","slug":"日记","permalink":"http://younfor.com/tags/日记/"},{"name":"随笔","slug":"随笔","permalink":"http://younfor.com/tags/随笔/"}]}]}