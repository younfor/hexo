{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/material-flow/source/style.less","path":"style.less","modified":0,"renderable":1},{"_id":"themes/material-flow/source/fonts/icomoon.eot","path":"fonts/icomoon.eot","modified":0,"renderable":1},{"_id":"themes/material-flow/source/fonts/icomoon.svg","path":"fonts/icomoon.svg","modified":0,"renderable":1},{"_id":"themes/material-flow/source/fonts/icomoon.ttf","path":"fonts/icomoon.ttf","modified":0,"renderable":1},{"_id":"themes/material-flow/source/fonts/icomoon.woff","path":"fonts/icomoon.woff","modified":0,"renderable":1},{"_id":"themes/material-flow/source/fonts/selection.json","path":"fonts/selection.json","modified":0,"renderable":1},{"_id":"themes/material-flow/source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":0,"renderable":1},{"_id":"themes/material-flow/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"themes/material-flow/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/material-flow/source/js/jquery.fitvids.js","path":"js/jquery.fitvids.js","modified":0,"renderable":1},{"_id":"themes/material-flow/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"8e8fec8d07a679d26d1657c299640e8b1e4d144e","modified":1528549030000},{"_id":"source/CNAME","hash":"d837e5b15386fdb114697ace1f13d298d6e0d1d6","modified":1528549030000},{"_id":"source/baidu_verify_vYMDsKEXTK.html","hash":"8c34dab84b6c369834ba68da7b465394c5400996","modified":1528556483000},{"_id":"themes/material-flow/_config.yml","hash":"6b8f3626cd18328c1c44fd474b45836495633623","modified":1528556828000},{"_id":"themes/material-flow/LICENSE","hash":"44409ab0bcd7853e2ac93faad84e57299711e6bf","modified":1528552943000},{"_id":"themes/material-flow/README.md","hash":"2f14b9c1e7ad23e03da0599a9f348d61c79c474f","modified":1528552943000},{"_id":"source/_posts/Go高级编程.md","hash":"7f90cc0a3b0f11867928c39078afe3ad099e7b9a","modified":1528557180000},{"_id":"source/_posts/Go基础语法.md","hash":"da09c78d1da1787ffeb3cff15d1ad96921d1a2f8","modified":1528554807000},{"_id":"source/about/index.md","hash":"a3b7feb4535a9726a98902e1b74c75cbcb7a8e03","modified":1528549030000},{"_id":"source/tags/index.md","hash":"f29e949d6b1390fd5724101badfe0519545b6a61","modified":1528549030000},{"_id":"themes/material-flow/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1528552943000},{"_id":"themes/material-flow/.git/config","hash":"82381cee1ab01284f0764b866b459e10a56a791b","modified":1528552943000},{"_id":"themes/material-flow/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1528552926000},{"_id":"themes/material-flow/.git/index","hash":"dd7173c9b60453e5faa6ce1a1fbfa97245da9577","modified":1528556810000},{"_id":"themes/material-flow/.git/packed-refs","hash":"4b73b813f44c59541ad5caaba80ac82920ee3c0c","modified":1528552943000},{"_id":"themes/material-flow/layout/archive.ejs","hash":"735e6c0b1f8f837617b3a4119ac321a84f4ec5f7","modified":1528552943000},{"_id":"themes/material-flow/layout/category.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1528552943000},{"_id":"themes/material-flow/layout/index.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1528552943000},{"_id":"themes/material-flow/layout/layout.ejs","hash":"c137d708da9c5339dbcdf2e45c4851c08899a457","modified":1528552943000},{"_id":"themes/material-flow/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1528552943000},{"_id":"themes/material-flow/layout/tag.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1528552943000},{"_id":"themes/material-flow/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1528552943000},{"_id":"themes/material-flow/source/style.less","hash":"ad50444f75534f36001872d4c90e1d839614402b","modified":1528552943000},{"_id":"themes/material-flow/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1528552926000},{"_id":"themes/material-flow/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1528552926000},{"_id":"themes/material-flow/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1528552926000},{"_id":"themes/material-flow/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1528552926000},{"_id":"themes/material-flow/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1528552926000},{"_id":"themes/material-flow/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1528552926000},{"_id":"themes/material-flow/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1528552926000},{"_id":"themes/material-flow/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1528552926000},{"_id":"themes/material-flow/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1528552926000},{"_id":"themes/material-flow/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1528552926000},{"_id":"themes/material-flow/.git/logs/HEAD","hash":"2259feb7e44facf24d52511eec18f3fc454bfc15","modified":1528552943000},{"_id":"themes/material-flow/layout/_partial/archive.ejs","hash":"7d811a088748b758c0664645629adbebdd8d1c3f","modified":1528552943000},{"_id":"themes/material-flow/layout/_partial/article.ejs","hash":"b704e39a37391b8017d1c3ebddcb0e56262c4819","modified":1528552943000},{"_id":"themes/material-flow/layout/_partial/footer.ejs","hash":"a8d0ee768920a69818e0065a65a94109b72cb77d","modified":1528552943000},{"_id":"themes/material-flow/layout/_partial/categories.ejs","hash":"761fda43c385e81324b628dfab6377b82bfdf82a","modified":1528552943000},{"_id":"themes/material-flow/layout/_partial/head.ejs","hash":"e7e1f1b4d9830cf0a91efe6fcbabdbbd405567d0","modified":1528556808000},{"_id":"themes/material-flow/layout/_partial/loading.ejs","hash":"9c5721d5a5cff00860f2775b12dd73fe62375201","modified":1528552943000},{"_id":"themes/material-flow/layout/_partial/header.ejs","hash":"7ee2448ebb96c206e449ea6641d5ba5cc1a6c9d2","modified":1528552943000},{"_id":"themes/material-flow/layout/_partial/post.ejs","hash":"a808dafbac96483bf6c7d7909eca89c7d52ea888","modified":1528554490000},{"_id":"themes/material-flow/layout/_partial/scripts.ejs","hash":"456c65e7c1f93c66511e0976ea88a744d3e6b7de","modified":1528552943000},{"_id":"themes/material-flow/layout/_partial/side.ejs","hash":"fe78dea06ac3a4ce2efcfd6171aea8fb3f64ebe7","modified":1528552943000},{"_id":"themes/material-flow/layout/_widget/about.ejs","hash":"3733ad952dd72ff6df3cc3952111819f79b08673","modified":1528554685000},{"_id":"themes/material-flow/layout/_widget/categories.ejs","hash":"2be2c85e4c5275d08e524fabdb38f046054b874a","modified":1528552943000},{"_id":"themes/material-flow/layout/_widget/links.ejs","hash":"2d6c7fc92b0330a7a79b8b680cf9f4286fdf0291","modified":1528552943000},{"_id":"themes/material-flow/layout/_widget/tagcloud.ejs","hash":"914698bcc4210b5f984e12166eca3c86de631968","modified":1528552943000},{"_id":"themes/material-flow/source/fonts/icomoon.eot","hash":"931a892fd6307c0cfcbb71511ad4a38b3dd20edf","modified":1528552943000},{"_id":"themes/material-flow/source/fonts/icomoon.svg","hash":"37a9d40dfcd7d156cf452db75c425e797351e2b5","modified":1528552943000},{"_id":"themes/material-flow/source/fonts/icomoon.ttf","hash":"6192fb2b38c94f77d1fed08c1969fab5ffe9a30c","modified":1528552943000},{"_id":"themes/material-flow/source/fonts/icomoon.woff","hash":"0356e9be814a04187c641371fd95a7a8d9111200","modified":1528552943000},{"_id":"themes/material-flow/source/fonts/selection.json","hash":"498b5ba0cafb2eb5fa20f9034527eb912fa41827","modified":1528552943000},{"_id":"themes/material-flow/source/images/avatar.jpeg","hash":"e5e8261e748995a874a5ba8a2ea39a336b4619f5","modified":1528555504000},{"_id":"themes/material-flow/source/js/app.js","hash":"17aca227d841b932ac33af4c9e02a192832fdc85","modified":1528552943000},{"_id":"themes/material-flow/source/js/search.js","hash":"632ce023094442d350dcd2895ca5f948364746cb","modified":1528552943000},{"_id":"themes/material-flow/source/js/jquery.fitvids.js","hash":"57946a22c79654014eb00fb548f727d302221873","modified":1528552943000},{"_id":"themes/material-flow/source/less/_archive.less","hash":"0b15989a0d19ce550cf5d0021376c5ad1d4790b9","modified":1528552943000},{"_id":"themes/material-flow/source/less/_article.less","hash":"37d645669b564df960c02680c0ee6532361b4d7b","modified":1528552943000},{"_id":"themes/material-flow/source/less/_defines.less","hash":"6b8ffd4e1b478e046722487bae15a500f3fd3092","modified":1528552943000},{"_id":"themes/material-flow/source/less/_base.less","hash":"828efc946f54ce2bfd5970e1d8d7b08f8f515786","modified":1528552943000},{"_id":"themes/material-flow/source/less/_header.less","hash":"36f32479c42be1ed503903e1cb88daca5b7792ca","modified":1528552943000},{"_id":"themes/material-flow/source/less/_footer.less","hash":"973b1f9c62159f345833db5c30db03c351c66c5c","modified":1528552943000},{"_id":"themes/material-flow/source/less/_fonts.less","hash":"d9e56fa5affcdee1c530ee5d5268a7e07644c05a","modified":1528552943000},{"_id":"themes/material-flow/snapshots/phone.png","hash":"8e78f25ee179e3ff27fff101050792184935d319","modified":1528552943000},{"_id":"themes/material-flow/source/less/_main.less","hash":"6e2c43e15d1e05bcddbccc1d4830b4687261f1eb","modified":1528552943000},{"_id":"themes/material-flow/source/less/_pagination.less","hash":"165e2c369faf70858b731bb6d483d8991259887e","modified":1528552943000},{"_id":"themes/material-flow/source/less/_search.less","hash":"ab1e3d8fdd489adde30723c40726e5e8187a8b6c","modified":1528552943000},{"_id":"themes/material-flow/source/less/_normalize.less","hash":"02fe53286d071637534d5aa2c57c76c168c0d521","modified":1528552943000},{"_id":"themes/material-flow/source/less/_side.less","hash":"210ffc4e3fc41a5202618e17fc744a8b2b6bc54e","modified":1528552943000},{"_id":"themes/material-flow/source/less/_toc.less","hash":"76729eb95cf89eb17436e13610847102d4795a63","modified":1528552943000},{"_id":"themes/material-flow/source/less/_tog.less","hash":"bff0ab3b06e14a3c171ccd53061f8ccddb1e2fc2","modified":1528552943000},{"_id":"themes/material-flow/source/less/_widget.less","hash":"a6fc757f2daf58089490eefe0701b9889a8bd4bd","modified":1528552943000},{"_id":"themes/material-flow/source/less/_typo.less","hash":"8635fe95a08614f22833c6c159ebf6cf3d731e12","modified":1528552943000},{"_id":"source/_posts/First/logo.png","hash":"3dcb821344fc004c2a87f81cf4b6cf9de213d3a8","modified":1528549030000},{"_id":"themes/material-flow/snapshots/article.png","hash":"3f1aff6057a807b55edd2435421b59a1f4e82c40","modified":1528552943000},{"_id":"themes/material-flow/source/images/avatar.png","hash":"3dcb821344fc004c2a87f81cf4b6cf9de213d3a8","modified":1528555247000},{"_id":"themes/material-flow/.git/objects/pack/pack-d944c0094ecd3550ef8b68fe46d2ab802977d6bc.idx","hash":"bf4b804875745d7ca585ae8e42c5f39bf1cdffe8","modified":1528552943000},{"_id":"themes/material-flow/.git/refs/heads/master","hash":"0717be1bbf800fb479e27aabba6a962571a7a0da","modified":1528552943000},{"_id":"themes/material-flow/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1528552943000},{"_id":"themes/material-flow/.git/logs/refs/heads/master","hash":"2259feb7e44facf24d52511eec18f3fc454bfc15","modified":1528552943000},{"_id":"themes/material-flow/snapshots/index.png","hash":"a4aa937770d1573032f3e830be3cd75672a26036","modified":1528552943000},{"_id":"themes/material-flow/.git/logs/refs/remotes/origin/HEAD","hash":"2259feb7e44facf24d52511eec18f3fc454bfc15","modified":1528552943000},{"_id":"themes/material-flow/.git/objects/pack/pack-d944c0094ecd3550ef8b68fe46d2ab802977d6bc.pack","hash":"342ce9a385fd3d7f6e8572bbd3654aff4028f103","modified":1528552943000},{"_id":"public/atom.xml","hash":"072bbe1df26180048b5d01e5f9588afee90d6e35","modified":1528557186859},{"_id":"public/content.json","hash":"b5d9c4a4841d33305e5ba72f0d13c729c1b0dded","modified":1528557186919},{"_id":"public/search.xml","hash":"ac0a1ce3e5d6ee3b6262af02910f0f5ac62c4391","modified":1528557186921},{"_id":"public/baidu_verify_vYMDsKEXTK.html","hash":"907e97fafbf0f5f4896a30d8f4d2a37d357525cd","modified":1528557030741},{"_id":"public/about/index.html","hash":"2413c1d1a4fd8a6e8ed96e7d720aad07bbf76049","modified":1528557030761},{"_id":"public/tags/index.html","hash":"8b7a367979748f3cdfece05229496716ed229514","modified":1528557030762},{"_id":"public/categories/Go语言/index.html","hash":"7f39c6048c12a6b92465f131882303b1285710de","modified":1528557030762},{"_id":"public/archives/index.html","hash":"f572525132ec4d4e99b883153de53e5e9d46d981","modified":1528557030762},{"_id":"public/archives/2018/index.html","hash":"4acdea8f9b42dc269e986cf7980003353b88a185","modified":1528557030762},{"_id":"public/archives/2018/06/index.html","hash":"f7df6f4c54d8d4cab9d875ce12351a1b542c7184","modified":1528557030762},{"_id":"public/index.html","hash":"fd4c71f89289b57ba5232dab2bb24bdf7b322c1b","modified":1528557030762},{"_id":"public/Go基础语法/index.html","hash":"62b55b0cd30deaead4adc7843e1075961dc388f0","modified":1528557030762},{"_id":"public/tags/Go/index.html","hash":"952275b0c96bc87c460e72fa2bbc6e521aa7a683","modified":1528557030764},{"_id":"public/Go高级编程/index.html","hash":"1effcca18dd8c30385d36afa543f3ccc69e60821","modified":1528557186923},{"_id":"public/CNAME","hash":"d837e5b15386fdb114697ace1f13d298d6e0d1d6","modified":1528557030766},{"_id":"public/fonts/icomoon.eot","hash":"931a892fd6307c0cfcbb71511ad4a38b3dd20edf","modified":1528557030766},{"_id":"public/fonts/icomoon.svg","hash":"37a9d40dfcd7d156cf452db75c425e797351e2b5","modified":1528557030766},{"_id":"public/fonts/icomoon.ttf","hash":"6192fb2b38c94f77d1fed08c1969fab5ffe9a30c","modified":1528557030766},{"_id":"public/fonts/icomoon.woff","hash":"0356e9be814a04187c641371fd95a7a8d9111200","modified":1528557030766},{"_id":"public/images/avatar.jpeg","hash":"e5e8261e748995a874a5ba8a2ea39a336b4619f5","modified":1528557030766},{"_id":"public/images/avatar.png","hash":"3dcb821344fc004c2a87f81cf4b6cf9de213d3a8","modified":1528557030775},{"_id":"public/js/app.js","hash":"17aca227d841b932ac33af4c9e02a192832fdc85","modified":1528557030779},{"_id":"public/js/jquery.fitvids.js","hash":"57946a22c79654014eb00fb548f727d302221873","modified":1528557030779},{"_id":"public/fonts/selection.json","hash":"c38f13105ee7c35a67476dd80eaa2ffd037c124b","modified":1528557030782},{"_id":"public/js/search.js","hash":"632ce023094442d350dcd2895ca5f948364746cb","modified":1528557030782},{"_id":"public/style.css","hash":"132d38054823d2e95655397efbab16b95a935071","modified":1528557030996}],"Category":[{"name":"Go语言","_id":"cji7je0ab00040qilq1fujk9g"}],"Data":[],"Page":[{"_content":"vYMDsKEXTK","source":"baidu_verify_vYMDsKEXTK.html","raw":"vYMDsKEXTK","date":"2018-06-09T15:01:57.000Z","updated":"2018-06-09T15:01:23.000Z","path":"baidu_verify_vYMDsKEXTK.html","title":"","comments":1,"layout":"page","_id":"cji7je09e00000qilfm0dh0y2","content":"vYMDsKEXTK","site":{"data":{}},"excerpt":"","more":"vYMDsKEXTK"},{"title":"about","date":"2015-12-30T16:32:43.000Z","_content":"","source":"about/index.md","raw":"title: about\ndate: 2015-12-31 00:32:43\n---\n","updated":"2018-06-09T12:57:10.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cji7je0a800020qilx7b5mpzu","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-06-09T11:54:04.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-06-09 19:54:04\n---\n","updated":"2018-06-09T12:57:10.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cji7je0aa00030qilr111s9io","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Go基础语法.md","date":"2018-06-09T13:11:17.000Z","_content":" # 1. 编码风格\n## 1.1 gofmt\n一般会自动规范代码风格\n ## 1.2 注释&驼峰命名\n/* \n    需要注释的内容\n*/\n## 1.3 包名\n```\nimport \"bytes\"\n```\n# 2. 变量\n## 2.0 常量\n```\ntype ByteSize float64\nconst (\n\t_           = iota\n\tKB ByteSize = 1 << (2 * iota)\n\tMB\n\tGB\n)\n// 主函数\nfunc main() {\n\tfmt.Println(\"Hello World!\")\n\tfmt.Println(\"size %f\", GB)\n\t// size %f 64\n}\n```\n## 2.1 声明\n```\nvar (\n    ErrInternal = errors.New(\"error1\")\n    ErrInternal2 = errors.New(\"error2\")\n)\n```\n## 2.2 初始化\nGo语言提供了New和make\n### new\n```\n// 0值初始化\ntype SyncedBuffer struct {\n    lock sync.Mutex\n    buffer bytes.Buffer\n}\np := new(SyncedBuffer)     // type *SyncedBuffer\nvar v SyncedBuffer            // type SyncedBuffer\n\n// 如果是构造函数\nfunc NewFile(fd int, name string) *File {\n    if fd < 0 {\n        return nil\n    }\n    f := File{fd, name, nil, 0} // 如果不按顺序，就需要加名字\n    return &f\n}\n// 复合字面可以初始化多种结构\na := [...]string {Enone: \"no error\", Eio: \"Eio\", Einval: \"invalid argument\"}\ns := []string {Enone: \"no error\", Eio: \"Eio\", Einval: \"invalid argument\"}\nm := map[int]string {Enone: \"no error\", Eio: \"Eio\", Einval: \"invalid argument\"}\n```\n### make\n`make一般用于初始化切片，映射，信道\n```\nmake([]int, 10, 100)\n// 一般用法, 返回的不是指针\nv := make([]int, 100) \n```\n# 3. 分支循环\n## 3.1 if\n```\nif i < f() {\n    g()\n}\n\nif err := file.Chmod(0664); err != nil {\n    log.Print(err)\n    return err\n}\n```\n## 3.2 for\n```\nfor init; condition; post {}\nfor condition {}\nfor {}\n// 举例\nsum := 0\nfor i := 0; i < 10; i++ {\n    sum += i\n}\n// 遍历复合结构\nfor key, value := range oldMap {\n    newMap[key] = value\n}\n// 只遍历第一个\nfor key := range oldMap {\n}\n// 只遍历第二个\nfor _, value := range array {\n}\n// 遍历字符串\nfor pos, char := range \"日本 \\ x80 语\" {\n    fmt.Printf()\n}\n// 反转数字\nfor i, j := 0, len(a) - 1; i < j; i,j = i+1, j-1 {\n    a[i], a[j] = a[j], a[i]\n}\n```\n## 3.3 switch\n```\nswitch {\ncase '0' <= c && c <= '9' :\n    return c - '0'\ncase 'a' <= c && c <= 'f' :\n    return c - 'a' + 10\n}\n// 处理相同条件\nswitch c {\ncase 'a', 'b', 'c':\n    return true\n}\n// 判断类型\nvar t interface{}\nt = getType()\nswitch t := t.(type) {\ndefault :\n    fmt.Printf(\"%T\", t)\ncase bool :\n    fmt.Printf(\"boolean %t\\n\", t)\ncase int:\n    fmt.Printf(\"integer %d\\n\", t)\n}\n```\n# 4. 函数\n## 4.1 多值返回\n```\nfunc (file *File) Write(b []byte) (n int, err error)\n```\n## 4.2 defer\n无论何种路径都能返回，如果定义多个按定义顺序相反顺序执行\n# 5. 切片(数组)\n```\n// 切片是按值传递，但是底层可能是同一份数组\n// 二维切片\ntype Transform [3][3]float64\ntype LinesOfText [][]byte\ntest := LinesOfTest{\n    []byte(\"abc\"),\n    []byte(\"abc\"),\n    []byte(\"abc\"),\n}\n```\n## 5.1 append\n```\n// 增加元素\nx := []int{1,2,3}\nx = append(x, 4, 5, 6)\nfmt.Println(x)\n// 增加切片\ny := []int{1,2,3}\nx = append(x, y...)\nfmt.Println(x)\n```\n# 6. Map映射\n```\nattend := map[string]bool{\n    \"Ann\" : true,\n    \"Joe\" : true,\n    ...\n}\n// 判断是否存在\nvar seconds int\nvar ok bool\nseconds, ok = timeZone[tz]\nif _, ok := timeZone[tz]; ok {\n    doSomething()\n}\n// 删除映射\ndelete(timeZone, \"PDT\")\n```\n初始化方式：\nFile{fd, name, nil, 0}\nFile{fd: fd, name: name}\nmake([]int, 100)\n# 7. 函数\n## 7.1 init\n在变量初始化之后，导入包初始化之后，就会初始化\n`以指针或值为接收者的区别在于：值方法可通过指针和值调用， 而指针方法只能通过指针来调用。\n# 8. 接口\n## 8.1 断言\n```\nstr, ok := value.(string)\nif ok {\n    fmt.Printf(\"\")\n} else {\n}\n```\n## 8.2 内嵌\n```\n// 接口\ntype Reader interface {\n    Read(p []byte) (n int, err error)\n}\n\ntype Writer interface {\n    Write(p []byte) (n int, err error)\n}\ntype ReaderWriter interface {\n    Reader\n    Writer\n}\n// 结构体\ntype ReaderWriter struct {\n    *Reader\n    *Writer\n}\n```\n# 9 并发\n## 9.1 chan\n```\ncj := make(chan int)                // 无缓冲信道\ncj := make(chan int, 0)            // 无缓冲信道\ncj := make(chan *os.File, 100) // 指向文件指针的带缓冲信道\n```\n## 9.2 例子\n```\nc := make(chan int)\ngo func() {\n    list.Sort()\n    c <- 1\n}()\ndoSomethingForAWhile()\n<- c\n\n// 考虑带缓冲的任务\nfunc Serve(queue chan *Request) {\n       for req := range queue {\n            req := req\n           sem <- 1\n            go func() {\n                process(req)\n                <-sem\n            }()\n        }\n}\n```\n# 10 panic&recover\n","source":"_posts/Go基础语法.md","raw":"---\ntitle: Go基础语法.md\ndate: 2018-06-09 21:11:17\ncategories: Go语言\n---\n # 1. 编码风格\n## 1.1 gofmt\n一般会自动规范代码风格\n ## 1.2 注释&驼峰命名\n/* \n    需要注释的内容\n*/\n## 1.3 包名\n```\nimport \"bytes\"\n```\n# 2. 变量\n## 2.0 常量\n```\ntype ByteSize float64\nconst (\n\t_           = iota\n\tKB ByteSize = 1 << (2 * iota)\n\tMB\n\tGB\n)\n// 主函数\nfunc main() {\n\tfmt.Println(\"Hello World!\")\n\tfmt.Println(\"size %f\", GB)\n\t// size %f 64\n}\n```\n## 2.1 声明\n```\nvar (\n    ErrInternal = errors.New(\"error1\")\n    ErrInternal2 = errors.New(\"error2\")\n)\n```\n## 2.2 初始化\nGo语言提供了New和make\n### new\n```\n// 0值初始化\ntype SyncedBuffer struct {\n    lock sync.Mutex\n    buffer bytes.Buffer\n}\np := new(SyncedBuffer)     // type *SyncedBuffer\nvar v SyncedBuffer            // type SyncedBuffer\n\n// 如果是构造函数\nfunc NewFile(fd int, name string) *File {\n    if fd < 0 {\n        return nil\n    }\n    f := File{fd, name, nil, 0} // 如果不按顺序，就需要加名字\n    return &f\n}\n// 复合字面可以初始化多种结构\na := [...]string {Enone: \"no error\", Eio: \"Eio\", Einval: \"invalid argument\"}\ns := []string {Enone: \"no error\", Eio: \"Eio\", Einval: \"invalid argument\"}\nm := map[int]string {Enone: \"no error\", Eio: \"Eio\", Einval: \"invalid argument\"}\n```\n### make\n`make一般用于初始化切片，映射，信道\n```\nmake([]int, 10, 100)\n// 一般用法, 返回的不是指针\nv := make([]int, 100) \n```\n# 3. 分支循环\n## 3.1 if\n```\nif i < f() {\n    g()\n}\n\nif err := file.Chmod(0664); err != nil {\n    log.Print(err)\n    return err\n}\n```\n## 3.2 for\n```\nfor init; condition; post {}\nfor condition {}\nfor {}\n// 举例\nsum := 0\nfor i := 0; i < 10; i++ {\n    sum += i\n}\n// 遍历复合结构\nfor key, value := range oldMap {\n    newMap[key] = value\n}\n// 只遍历第一个\nfor key := range oldMap {\n}\n// 只遍历第二个\nfor _, value := range array {\n}\n// 遍历字符串\nfor pos, char := range \"日本 \\ x80 语\" {\n    fmt.Printf()\n}\n// 反转数字\nfor i, j := 0, len(a) - 1; i < j; i,j = i+1, j-1 {\n    a[i], a[j] = a[j], a[i]\n}\n```\n## 3.3 switch\n```\nswitch {\ncase '0' <= c && c <= '9' :\n    return c - '0'\ncase 'a' <= c && c <= 'f' :\n    return c - 'a' + 10\n}\n// 处理相同条件\nswitch c {\ncase 'a', 'b', 'c':\n    return true\n}\n// 判断类型\nvar t interface{}\nt = getType()\nswitch t := t.(type) {\ndefault :\n    fmt.Printf(\"%T\", t)\ncase bool :\n    fmt.Printf(\"boolean %t\\n\", t)\ncase int:\n    fmt.Printf(\"integer %d\\n\", t)\n}\n```\n# 4. 函数\n## 4.1 多值返回\n```\nfunc (file *File) Write(b []byte) (n int, err error)\n```\n## 4.2 defer\n无论何种路径都能返回，如果定义多个按定义顺序相反顺序执行\n# 5. 切片(数组)\n```\n// 切片是按值传递，但是底层可能是同一份数组\n// 二维切片\ntype Transform [3][3]float64\ntype LinesOfText [][]byte\ntest := LinesOfTest{\n    []byte(\"abc\"),\n    []byte(\"abc\"),\n    []byte(\"abc\"),\n}\n```\n## 5.1 append\n```\n// 增加元素\nx := []int{1,2,3}\nx = append(x, 4, 5, 6)\nfmt.Println(x)\n// 增加切片\ny := []int{1,2,3}\nx = append(x, y...)\nfmt.Println(x)\n```\n# 6. Map映射\n```\nattend := map[string]bool{\n    \"Ann\" : true,\n    \"Joe\" : true,\n    ...\n}\n// 判断是否存在\nvar seconds int\nvar ok bool\nseconds, ok = timeZone[tz]\nif _, ok := timeZone[tz]; ok {\n    doSomething()\n}\n// 删除映射\ndelete(timeZone, \"PDT\")\n```\n初始化方式：\nFile{fd, name, nil, 0}\nFile{fd: fd, name: name}\nmake([]int, 100)\n# 7. 函数\n## 7.1 init\n在变量初始化之后，导入包初始化之后，就会初始化\n`以指针或值为接收者的区别在于：值方法可通过指针和值调用， 而指针方法只能通过指针来调用。\n# 8. 接口\n## 8.1 断言\n```\nstr, ok := value.(string)\nif ok {\n    fmt.Printf(\"\")\n} else {\n}\n```\n## 8.2 内嵌\n```\n// 接口\ntype Reader interface {\n    Read(p []byte) (n int, err error)\n}\n\ntype Writer interface {\n    Write(p []byte) (n int, err error)\n}\ntype ReaderWriter interface {\n    Reader\n    Writer\n}\n// 结构体\ntype ReaderWriter struct {\n    *Reader\n    *Writer\n}\n```\n# 9 并发\n## 9.1 chan\n```\ncj := make(chan int)                // 无缓冲信道\ncj := make(chan int, 0)            // 无缓冲信道\ncj := make(chan *os.File, 100) // 指向文件指针的带缓冲信道\n```\n## 9.2 例子\n```\nc := make(chan int)\ngo func() {\n    list.Sort()\n    c <- 1\n}()\ndoSomethingForAWhile()\n<- c\n\n// 考虑带缓冲的任务\nfunc Serve(queue chan *Request) {\n       for req := range queue {\n            req := req\n           sem <- 1\n            go func() {\n                process(req)\n                <-sem\n            }()\n        }\n}\n```\n# 10 panic&recover\n","slug":"Go基础语法","published":1,"updated":"2018-06-09T14:33:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji7je0a400010qilczymuvrv","content":"<h1 id=\"1-编码风格\"><a href=\"#1-编码风格\" class=\"headerlink\" title=\"1. 编码风格\"></a>1. 编码风格</h1><h2 id=\"1-1-gofmt\"><a href=\"#1-1-gofmt\" class=\"headerlink\" title=\"1.1 gofmt\"></a>1.1 gofmt</h2><p>一般会自动规范代码风格</p>\n<h2 id=\"1-2-注释-amp-驼峰命名\"><a href=\"#1-2-注释-amp-驼峰命名\" class=\"headerlink\" title=\"1.2 注释&amp;驼峰命名\"></a>1.2 注释&amp;驼峰命名</h2><p>/<em><br>    需要注释的内容\n</em>/</p>\n<h2 id=\"1-3-包名\"><a href=\"#1-3-包名\" class=\"headerlink\" title=\"1.3 包名\"></a>1.3 包名</h2><figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"bytes\"</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"2-变量\"><a href=\"#2-变量\" class=\"headerlink\" title=\"2. 变量\"></a>2. 变量</h1><h2 id=\"2-0-常量\"><a href=\"#2-0-常量\" class=\"headerlink\" title=\"2.0 常量\"></a>2.0 常量</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> ByteSize <span class=\"keyword\">float64</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\t_           = <span class=\"literal\">iota</span></span><br><span class=\"line\">\tKB ByteSize = <span class=\"number\">1</span> &lt;&lt; (<span class=\"number\">2</span> * <span class=\"literal\">iota</span>)</span><br><span class=\"line\">\tMB</span><br><span class=\"line\">\tGB</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">// 主函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Hello World!\"</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"size %f\"</span>, GB)</span><br><span class=\"line\">\t<span class=\"comment\">// size %f 64</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-1-声明\"><a href=\"#2-1-声明\" class=\"headerlink\" title=\"2.1 声明\"></a>2.1 声明</h2><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var (</span><br><span class=\"line\">    ErrInternal = errors.New(<span class=\"string\">\"error1\"</span>)</span><br><span class=\"line\">    ErrInternal2 = errors.New(<span class=\"string\">\"error2\"</span>)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-2-初始化\"><a href=\"#2-2-初始化\" class=\"headerlink\" title=\"2.2 初始化\"></a>2.2 初始化</h2><p>Go语言提供了New和make</p>\n<h3 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 0值初始化</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> SyncedBuffer <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    lock sync.Mutex</span><br><span class=\"line\">    buffer bytes.Buffer</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">p := <span class=\"built_in\">new</span>(SyncedBuffer)     <span class=\"comment\">// type *SyncedBuffer</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> v SyncedBuffer            <span class=\"comment\">// type SyncedBuffer</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果是构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewFile</span><span class=\"params\">(fd <span class=\"keyword\">int</span>, name <span class=\"keyword\">string</span>)</span> *<span class=\"title\">File</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> fd &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    f := File&#123;fd, name, <span class=\"literal\">nil</span>, <span class=\"number\">0</span>&#125; <span class=\"comment\">// 如果不按顺序，就需要加名字</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;f</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 复合字面可以初始化多种结构</span></span><br><span class=\"line\">a := [...]<span class=\"keyword\">string</span> &#123;Enone: <span class=\"string\">\"no error\"</span>, Eio: <span class=\"string\">\"Eio\"</span>, Einval: <span class=\"string\">\"invalid argument\"</span>&#125;</span><br><span class=\"line\">s := []<span class=\"keyword\">string</span> &#123;Enone: <span class=\"string\">\"no error\"</span>, Eio: <span class=\"string\">\"Eio\"</span>, Einval: <span class=\"string\">\"invalid argument\"</span>&#125;</span><br><span class=\"line\">m := <span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">string</span> &#123;Enone: <span class=\"string\">\"no error\"</span>, Eio: <span class=\"string\">\"Eio\"</span>, Einval: <span class=\"string\">\"invalid argument\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"make\"><a href=\"#make\" class=\"headerlink\" title=\"make\"></a>make</h3><p>`make一般用于初始化切片，映射，信道<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">10</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"comment\">// 一般用法, 返回的不是指针</span></span><br><span class=\"line\">v := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"3-分支循环\"><a href=\"#3-分支循环\" class=\"headerlink\" title=\"3. 分支循环\"></a>3. 分支循环</h1><h2 id=\"3-1-if\"><a href=\"#3-1-if\" class=\"headerlink\" title=\"3.1 if\"></a>3.1 if</h2><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> i &lt; <span class=\"built_in\">f</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">g</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">err</span> := <span class=\"keyword\">file</span>.Chmod(0664); <span class=\"keyword\">err</span> != nil &#123;</span><br><span class=\"line\">    <span class=\"keyword\">log</span>.<span class=\"keyword\">Print</span>(<span class=\"keyword\">err</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">err</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2-for\"><a href=\"#3-2-for\" class=\"headerlink\" title=\"3.2 for\"></a>3.2 for</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> init; condition; post &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> condition &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// 举例</span></span><br><span class=\"line\">sum := <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">    sum += i</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 遍历复合结构</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> key, value := <span class=\"keyword\">range</span> oldMap &#123;</span><br><span class=\"line\">    newMap[key] = value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 只遍历第一个</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> key := <span class=\"keyword\">range</span> oldMap &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 只遍历第二个</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> _, value := <span class=\"keyword\">range</span> array &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 遍历字符串</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> pos, char := <span class=\"keyword\">range</span> <span class=\"string\">\"日本 \\ x80 语\"</span> &#123;</span><br><span class=\"line\">    fmt.Printf()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 反转数字</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i, j := <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(a) - <span class=\"number\">1</span>; i &lt; j; i,j = i+<span class=\"number\">1</span>, j<span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">    a[i], a[j] = a[j], a[i]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-3-switch\"><a href=\"#3-3-switch\" class=\"headerlink\" title=\"3.3 switch\"></a>3.3 switch</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">'0'</span> &lt;= c &amp;&amp; c &lt;= <span class=\"string\">'9'</span> :</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c - <span class=\"string\">'0'</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">'a'</span> &lt;= c &amp;&amp; c &lt;= <span class=\"string\">'f'</span> :</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c - <span class=\"string\">'a'</span> + <span class=\"number\">10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 处理相同条件</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> c &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 判断类型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> t <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">t = getType()</span><br><span class=\"line\"><span class=\"keyword\">switch</span> t := t.(<span class=\"keyword\">type</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">default</span> :</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"%T\"</span>, t)</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">bool</span> :</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"boolean %t\\n\"</span>, t)</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">int</span>:</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"integer %d\\n\"</span>, t)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-函数\"><a href=\"#4-函数\" class=\"headerlink\" title=\"4. 函数\"></a>4. 函数</h1><h2 id=\"4-1-多值返回\"><a href=\"#4-1-多值返回\" class=\"headerlink\" title=\"4.1 多值返回\"></a>4.1 多值返回</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(file *File)</span> <span class=\"title\">Write</span><span class=\"params\">(b []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err error)</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-2-defer\"><a href=\"#4-2-defer\" class=\"headerlink\" title=\"4.2 defer\"></a>4.2 defer</h2><p>无论何种路径都能返回，如果定义多个按定义顺序相反顺序执行</p>\n<h1 id=\"5-切片-数组\"><a href=\"#5-切片-数组\" class=\"headerlink\" title=\"5. 切片(数组)\"></a>5. 切片(数组)</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 切片是按值传递，但是底层可能是同一份数组</span></span><br><span class=\"line\"><span class=\"comment\">// 二维切片</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Transform [<span class=\"number\">3</span>][<span class=\"number\">3</span>]<span class=\"keyword\">float64</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> LinesOfText [][]<span class=\"keyword\">byte</span></span><br><span class=\"line\">test := LinesOfTest&#123;</span><br><span class=\"line\">    []<span class=\"keyword\">byte</span>(<span class=\"string\">\"abc\"</span>),</span><br><span class=\"line\">    []<span class=\"keyword\">byte</span>(<span class=\"string\">\"abc\"</span>),</span><br><span class=\"line\">    []<span class=\"keyword\">byte</span>(<span class=\"string\">\"abc\"</span>),</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-1-append\"><a href=\"#5-1-append\" class=\"headerlink\" title=\"5.1 append\"></a>5.1 append</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 增加元素</span></span><br><span class=\"line\">x := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">x = <span class=\"built_in\">append</span>(x, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">fmt.Println(x)</span><br><span class=\"line\"><span class=\"comment\">// 增加切片</span></span><br><span class=\"line\">y := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">x = <span class=\"built_in\">append</span>(x, y...)</span><br><span class=\"line\">fmt.Println(x)</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-Map映射\"><a href=\"#6-Map映射\" class=\"headerlink\" title=\"6. Map映射\"></a>6. Map映射</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">attend := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">bool</span>&#123;</span><br><span class=\"line\">    <span class=\"string\">\"Ann\"</span> : <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Joe\"</span> : <span class=\"literal\">true</span>,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 判断是否存在</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> seconds <span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ok <span class=\"keyword\">bool</span></span><br><span class=\"line\">seconds, ok = timeZone[tz]</span><br><span class=\"line\"><span class=\"keyword\">if</span> _, ok := timeZone[tz]; ok &#123;</span><br><span class=\"line\">    doSomething()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 删除映射</span></span><br><span class=\"line\"><span class=\"built_in\">delete</span>(timeZone, <span class=\"string\">\"PDT\"</span>)</span><br></pre></td></tr></table></figure>\n<p>初始化方式：<br>File{fd, name, nil, 0}<br>File{fd: fd, name: name}<br>make([]int, 100)</p>\n<h1 id=\"7-函数\"><a href=\"#7-函数\" class=\"headerlink\" title=\"7. 函数\"></a>7. 函数</h1><h2 id=\"7-1-init\"><a href=\"#7-1-init\" class=\"headerlink\" title=\"7.1 init\"></a>7.1 init</h2><p>在变量初始化之后，导入包初始化之后，就会初始化<br>`以指针或值为接收者的区别在于：值方法可通过指针和值调用， 而指针方法只能通过指针来调用。</p>\n<h1 id=\"8-接口\"><a href=\"#8-接口\" class=\"headerlink\" title=\"8. 接口\"></a>8. 接口</h1><h2 id=\"8-1-断言\"><a href=\"#8-1-断言\" class=\"headerlink\" title=\"8.1 断言\"></a>8.1 断言</h2><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str, ok := <span class=\"keyword\">value</span>.(string)</span><br><span class=\"line\"><span class=\"keyword\">if</span> ok &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-2-内嵌\"><a href=\"#8-2-内嵌\" class=\"headerlink\" title=\"8.2 内嵌\"></a>8.2 内嵌</h2><figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 接口</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"type\">Reader</span> interface &#123;</span><br><span class=\"line\">    <span class=\"type\">Read</span>(p []byte) (n int, err error)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"type\">Writer</span> interface &#123;</span><br><span class=\"line\">    <span class=\"type\">Write</span>(p []byte) (n int, err error)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"type\">ReaderWriter</span> interface &#123;</span><br><span class=\"line\">    <span class=\"type\">Reader</span></span><br><span class=\"line\">    <span class=\"type\">Writer</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 结构体</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"type\">ReaderWriter</span> struct &#123;</span><br><span class=\"line\">    *<span class=\"type\">Reader</span></span><br><span class=\"line\">    *<span class=\"type\">Writer</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"9-并发\"><a href=\"#9-并发\" class=\"headerlink\" title=\"9 并发\"></a>9 并发</h1><h2 id=\"9-1-chan\"><a href=\"#9-1-chan\" class=\"headerlink\" title=\"9.1 chan\"></a>9.1 chan</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cj := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)                <span class=\"comment\">// 无缓冲信道</span></span><br><span class=\"line\">cj := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">0</span>)            <span class=\"comment\">// 无缓冲信道</span></span><br><span class=\"line\">cj := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> *os.File, <span class=\"number\">100</span>) <span class=\"comment\">// 指向文件指针的带缓冲信道</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"9-2-例子\"><a href=\"#9-2-例子\" class=\"headerlink\" title=\"9.2 例子\"></a>9.2 例子</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    list.Sort()</span><br><span class=\"line\">    c &lt;- <span class=\"number\">1</span></span><br><span class=\"line\">&#125;()</span><br><span class=\"line\">doSomethingForAWhile()</span><br><span class=\"line\">&lt;- c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 考虑带缓冲的任务</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Serve</span><span class=\"params\">(queue <span class=\"keyword\">chan</span> *Request)</span></span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">for</span> req := <span class=\"keyword\">range</span> queue &#123;</span><br><span class=\"line\">            req := req</span><br><span class=\"line\">           sem &lt;- <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">                process(req)</span><br><span class=\"line\">                &lt;-sem</span><br><span class=\"line\">            &#125;()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"10-panic-amp-recover\"><a href=\"#10-panic-amp-recover\" class=\"headerlink\" title=\"10 panic&amp;recover\"></a>10 panic&amp;recover</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-编码风格\"><a href=\"#1-编码风格\" class=\"headerlink\" title=\"1. 编码风格\"></a>1. 编码风格</h1><h2 id=\"1-1-gofmt\"><a href=\"#1-1-gofmt\" class=\"headerlink\" title=\"1.1 gofmt\"></a>1.1 gofmt</h2><p>一般会自动规范代码风格</p>\n<h2 id=\"1-2-注释-amp-驼峰命名\"><a href=\"#1-2-注释-amp-驼峰命名\" class=\"headerlink\" title=\"1.2 注释&amp;驼峰命名\"></a>1.2 注释&amp;驼峰命名</h2><p>/<em><br>    需要注释的内容\n</em>/</p>\n<h2 id=\"1-3-包名\"><a href=\"#1-3-包名\" class=\"headerlink\" title=\"1.3 包名\"></a>1.3 包名</h2><figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"bytes\"</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"2-变量\"><a href=\"#2-变量\" class=\"headerlink\" title=\"2. 变量\"></a>2. 变量</h1><h2 id=\"2-0-常量\"><a href=\"#2-0-常量\" class=\"headerlink\" title=\"2.0 常量\"></a>2.0 常量</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> ByteSize <span class=\"keyword\">float64</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\t_           = <span class=\"literal\">iota</span></span><br><span class=\"line\">\tKB ByteSize = <span class=\"number\">1</span> &lt;&lt; (<span class=\"number\">2</span> * <span class=\"literal\">iota</span>)</span><br><span class=\"line\">\tMB</span><br><span class=\"line\">\tGB</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">// 主函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Hello World!\"</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"size %f\"</span>, GB)</span><br><span class=\"line\">\t<span class=\"comment\">// size %f 64</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-1-声明\"><a href=\"#2-1-声明\" class=\"headerlink\" title=\"2.1 声明\"></a>2.1 声明</h2><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var (</span><br><span class=\"line\">    ErrInternal = errors.New(<span class=\"string\">\"error1\"</span>)</span><br><span class=\"line\">    ErrInternal2 = errors.New(<span class=\"string\">\"error2\"</span>)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-2-初始化\"><a href=\"#2-2-初始化\" class=\"headerlink\" title=\"2.2 初始化\"></a>2.2 初始化</h2><p>Go语言提供了New和make</p>\n<h3 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 0值初始化</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> SyncedBuffer <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    lock sync.Mutex</span><br><span class=\"line\">    buffer bytes.Buffer</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">p := <span class=\"built_in\">new</span>(SyncedBuffer)     <span class=\"comment\">// type *SyncedBuffer</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> v SyncedBuffer            <span class=\"comment\">// type SyncedBuffer</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果是构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewFile</span><span class=\"params\">(fd <span class=\"keyword\">int</span>, name <span class=\"keyword\">string</span>)</span> *<span class=\"title\">File</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> fd &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    f := File&#123;fd, name, <span class=\"literal\">nil</span>, <span class=\"number\">0</span>&#125; <span class=\"comment\">// 如果不按顺序，就需要加名字</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;f</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 复合字面可以初始化多种结构</span></span><br><span class=\"line\">a := [...]<span class=\"keyword\">string</span> &#123;Enone: <span class=\"string\">\"no error\"</span>, Eio: <span class=\"string\">\"Eio\"</span>, Einval: <span class=\"string\">\"invalid argument\"</span>&#125;</span><br><span class=\"line\">s := []<span class=\"keyword\">string</span> &#123;Enone: <span class=\"string\">\"no error\"</span>, Eio: <span class=\"string\">\"Eio\"</span>, Einval: <span class=\"string\">\"invalid argument\"</span>&#125;</span><br><span class=\"line\">m := <span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">string</span> &#123;Enone: <span class=\"string\">\"no error\"</span>, Eio: <span class=\"string\">\"Eio\"</span>, Einval: <span class=\"string\">\"invalid argument\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"make\"><a href=\"#make\" class=\"headerlink\" title=\"make\"></a>make</h3><p>`make一般用于初始化切片，映射，信道<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">10</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"comment\">// 一般用法, 返回的不是指针</span></span><br><span class=\"line\">v := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"3-分支循环\"><a href=\"#3-分支循环\" class=\"headerlink\" title=\"3. 分支循环\"></a>3. 分支循环</h1><h2 id=\"3-1-if\"><a href=\"#3-1-if\" class=\"headerlink\" title=\"3.1 if\"></a>3.1 if</h2><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> i &lt; <span class=\"built_in\">f</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">g</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">err</span> := <span class=\"keyword\">file</span>.Chmod(0664); <span class=\"keyword\">err</span> != nil &#123;</span><br><span class=\"line\">    <span class=\"keyword\">log</span>.<span class=\"keyword\">Print</span>(<span class=\"keyword\">err</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">err</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2-for\"><a href=\"#3-2-for\" class=\"headerlink\" title=\"3.2 for\"></a>3.2 for</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> init; condition; post &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> condition &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// 举例</span></span><br><span class=\"line\">sum := <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">    sum += i</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 遍历复合结构</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> key, value := <span class=\"keyword\">range</span> oldMap &#123;</span><br><span class=\"line\">    newMap[key] = value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 只遍历第一个</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> key := <span class=\"keyword\">range</span> oldMap &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 只遍历第二个</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> _, value := <span class=\"keyword\">range</span> array &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 遍历字符串</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> pos, char := <span class=\"keyword\">range</span> <span class=\"string\">\"日本 \\ x80 语\"</span> &#123;</span><br><span class=\"line\">    fmt.Printf()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 反转数字</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i, j := <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(a) - <span class=\"number\">1</span>; i &lt; j; i,j = i+<span class=\"number\">1</span>, j<span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">    a[i], a[j] = a[j], a[i]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-3-switch\"><a href=\"#3-3-switch\" class=\"headerlink\" title=\"3.3 switch\"></a>3.3 switch</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">'0'</span> &lt;= c &amp;&amp; c &lt;= <span class=\"string\">'9'</span> :</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c - <span class=\"string\">'0'</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">'a'</span> &lt;= c &amp;&amp; c &lt;= <span class=\"string\">'f'</span> :</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c - <span class=\"string\">'a'</span> + <span class=\"number\">10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 处理相同条件</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> c &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 判断类型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> t <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">t = getType()</span><br><span class=\"line\"><span class=\"keyword\">switch</span> t := t.(<span class=\"keyword\">type</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">default</span> :</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"%T\"</span>, t)</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">bool</span> :</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"boolean %t\\n\"</span>, t)</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">int</span>:</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"integer %d\\n\"</span>, t)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-函数\"><a href=\"#4-函数\" class=\"headerlink\" title=\"4. 函数\"></a>4. 函数</h1><h2 id=\"4-1-多值返回\"><a href=\"#4-1-多值返回\" class=\"headerlink\" title=\"4.1 多值返回\"></a>4.1 多值返回</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(file *File)</span> <span class=\"title\">Write</span><span class=\"params\">(b []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err error)</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-2-defer\"><a href=\"#4-2-defer\" class=\"headerlink\" title=\"4.2 defer\"></a>4.2 defer</h2><p>无论何种路径都能返回，如果定义多个按定义顺序相反顺序执行</p>\n<h1 id=\"5-切片-数组\"><a href=\"#5-切片-数组\" class=\"headerlink\" title=\"5. 切片(数组)\"></a>5. 切片(数组)</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 切片是按值传递，但是底层可能是同一份数组</span></span><br><span class=\"line\"><span class=\"comment\">// 二维切片</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Transform [<span class=\"number\">3</span>][<span class=\"number\">3</span>]<span class=\"keyword\">float64</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> LinesOfText [][]<span class=\"keyword\">byte</span></span><br><span class=\"line\">test := LinesOfTest&#123;</span><br><span class=\"line\">    []<span class=\"keyword\">byte</span>(<span class=\"string\">\"abc\"</span>),</span><br><span class=\"line\">    []<span class=\"keyword\">byte</span>(<span class=\"string\">\"abc\"</span>),</span><br><span class=\"line\">    []<span class=\"keyword\">byte</span>(<span class=\"string\">\"abc\"</span>),</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-1-append\"><a href=\"#5-1-append\" class=\"headerlink\" title=\"5.1 append\"></a>5.1 append</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 增加元素</span></span><br><span class=\"line\">x := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">x = <span class=\"built_in\">append</span>(x, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">fmt.Println(x)</span><br><span class=\"line\"><span class=\"comment\">// 增加切片</span></span><br><span class=\"line\">y := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">x = <span class=\"built_in\">append</span>(x, y...)</span><br><span class=\"line\">fmt.Println(x)</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-Map映射\"><a href=\"#6-Map映射\" class=\"headerlink\" title=\"6. Map映射\"></a>6. Map映射</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">attend := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">bool</span>&#123;</span><br><span class=\"line\">    <span class=\"string\">\"Ann\"</span> : <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Joe\"</span> : <span class=\"literal\">true</span>,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 判断是否存在</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> seconds <span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ok <span class=\"keyword\">bool</span></span><br><span class=\"line\">seconds, ok = timeZone[tz]</span><br><span class=\"line\"><span class=\"keyword\">if</span> _, ok := timeZone[tz]; ok &#123;</span><br><span class=\"line\">    doSomething()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 删除映射</span></span><br><span class=\"line\"><span class=\"built_in\">delete</span>(timeZone, <span class=\"string\">\"PDT\"</span>)</span><br></pre></td></tr></table></figure>\n<p>初始化方式：<br>File{fd, name, nil, 0}<br>File{fd: fd, name: name}<br>make([]int, 100)</p>\n<h1 id=\"7-函数\"><a href=\"#7-函数\" class=\"headerlink\" title=\"7. 函数\"></a>7. 函数</h1><h2 id=\"7-1-init\"><a href=\"#7-1-init\" class=\"headerlink\" title=\"7.1 init\"></a>7.1 init</h2><p>在变量初始化之后，导入包初始化之后，就会初始化<br>`以指针或值为接收者的区别在于：值方法可通过指针和值调用， 而指针方法只能通过指针来调用。</p>\n<h1 id=\"8-接口\"><a href=\"#8-接口\" class=\"headerlink\" title=\"8. 接口\"></a>8. 接口</h1><h2 id=\"8-1-断言\"><a href=\"#8-1-断言\" class=\"headerlink\" title=\"8.1 断言\"></a>8.1 断言</h2><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str, ok := <span class=\"keyword\">value</span>.(string)</span><br><span class=\"line\"><span class=\"keyword\">if</span> ok &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-2-内嵌\"><a href=\"#8-2-内嵌\" class=\"headerlink\" title=\"8.2 内嵌\"></a>8.2 内嵌</h2><figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 接口</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"type\">Reader</span> interface &#123;</span><br><span class=\"line\">    <span class=\"type\">Read</span>(p []byte) (n int, err error)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"type\">Writer</span> interface &#123;</span><br><span class=\"line\">    <span class=\"type\">Write</span>(p []byte) (n int, err error)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"type\">ReaderWriter</span> interface &#123;</span><br><span class=\"line\">    <span class=\"type\">Reader</span></span><br><span class=\"line\">    <span class=\"type\">Writer</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 结构体</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"type\">ReaderWriter</span> struct &#123;</span><br><span class=\"line\">    *<span class=\"type\">Reader</span></span><br><span class=\"line\">    *<span class=\"type\">Writer</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"9-并发\"><a href=\"#9-并发\" class=\"headerlink\" title=\"9 并发\"></a>9 并发</h1><h2 id=\"9-1-chan\"><a href=\"#9-1-chan\" class=\"headerlink\" title=\"9.1 chan\"></a>9.1 chan</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cj := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)                <span class=\"comment\">// 无缓冲信道</span></span><br><span class=\"line\">cj := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">0</span>)            <span class=\"comment\">// 无缓冲信道</span></span><br><span class=\"line\">cj := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> *os.File, <span class=\"number\">100</span>) <span class=\"comment\">// 指向文件指针的带缓冲信道</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"9-2-例子\"><a href=\"#9-2-例子\" class=\"headerlink\" title=\"9.2 例子\"></a>9.2 例子</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    list.Sort()</span><br><span class=\"line\">    c &lt;- <span class=\"number\">1</span></span><br><span class=\"line\">&#125;()</span><br><span class=\"line\">doSomethingForAWhile()</span><br><span class=\"line\">&lt;- c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 考虑带缓冲的任务</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Serve</span><span class=\"params\">(queue <span class=\"keyword\">chan</span> *Request)</span></span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">for</span> req := <span class=\"keyword\">range</span> queue &#123;</span><br><span class=\"line\">            req := req</span><br><span class=\"line\">           sem &lt;- <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">                process(req)</span><br><span class=\"line\">                &lt;-sem</span><br><span class=\"line\">            &#125;()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"10-panic-amp-recover\"><a href=\"#10-panic-amp-recover\" class=\"headerlink\" title=\"10 panic&amp;recover\"></a>10 panic&amp;recover</h1>"},{"title":"Go高级编程.md","date":"2018-06-09T03:11:17.000Z","_content":"\nhttps://books.studygolang.com/advanced-go-programming-book/ch2-cgo/ch2-04-memory.html\n# 1.数组\n## 1.1数组定义方式\n```\nvar a [3]int                    // 定义一个长度为3的int类型数组, 元素全部为0\n\nvar b = [...]int{1, 2, 3}       // 定义一个长度为3的int类型数组, 元素为 1, 2, 3\n\nvar c = [...]int{2: 3, 1: 2}    // 定义一个长度为3的int类型数组, 元素为 0, 2, 3\n\nvar d = [...]int{1, 2, 4: 5, 6} // 定义一个长度为6的int类型数组, 元素为 1, 2, 0, 0, 5, 6\n\n```\n## 1.2数组指针\n```\nvar a = [...]int{1, 2, 3} // a 是一个数组\n\nvar b = &a                // b 是指向数组的指针\n\n\nfmt.Println(a[0], a[1])   // 打印数组的前2个元素\n\nfmt.Println(b[0], b[1])   // 通过数组指针访问数组元素的方式和数组类似\n\n\nfor i, v := range b {     // 通过数组指针迭代数组的元素\n\n    fmt.Println(i, v)\n\n}\n```\n## 1.3数组遍历\n```\n    for i := range a {\n\n        fmt.Printf(\"b[%d]: %d\\n\", i, b[i])\n\n    }\n\n    for i, v := range b {\n\n        fmt.Printf(\"b[%d]: %d\\n\", i, v)\n\n    }\n\n    for i := 0; i < len(c); i++ {\n\n        fmt.Printf(\"b[%d]: %d\\n\", i, b[i])\n\n    }\n\n```\n## 1.4函数数组、管道数组\n```\n// 图像解码器数组\n\nvar decoder1 [2]func(io.Reader) (image.Image, error)\n\nvar decoder2 = [...]func(io.Reader) (image.Image, error){\n\n    png.Decode,\n\n    jpeg.Decode,\n\n}\n\n\n// 接口数组\n\nvar unknown1 [2]interface{}\n\nvar unknown2 = [...]interface{}{123, \"你好\"}\n\n\n// 管道数组\n\nvar chanList = [2]chan int{}\n\n```\n## 1.5空数组\n长度为0的数组在内存中并不占用空间。空数组虽然很少直接使用，但是可以用于强调某种特有类型的操作时避免分配额外的内存空间，比如用于管道的同步操作：\n```\n    c1 := make(chan [0]int)\n\n    go func() {\n\n        fmt.Println(\"c1\")\n\n        c1 <- [0]int{}\n\n    }()\n\n    <-c1\n\n```\n在这里，我们并不关心管道中传输数据的真实类型，其中管道接收和发送操作只是用于消息的同步。对于这种场景，我们用空数组来作为管道类型可以减少管道元素赋值时的开销。当然一般更倾向于用无类型的匿名结构体代替：\n```\n    c2 := make(chan struct{})\n\n    go func() {\n\n        fmt.Println(\"c2\")\n\n        c2 <- struct{}{} // struct{}部分是类型, {}表示对应的结构体值\n\n    }()\n\n    <-c2\n```\n# 2.字符串\n## 2.1类似切片\n字符串虽然不是切片，但是支持切片操作，不同位置的切片底层也访问的同一块内存数据（因为字符串是只读的，相同的字符串面值常量通常是对应同一个字符串常量）：\n```\ns := \"hello, world\"\n\nhello := s[:5]\n\nworld := s[7:]\n\n\ns1 := \"hello, world\"[:5]\n\ns2 := \"hello, world\"[7:]\n\n```\n和数组一样，内置的len和cap函数返回相同的结果，都对应字符串的长度。也可以通过reflect.StringHeader结构访问字符串的长度（这里只是为了演示字符串的结构，并不是推荐的做法）：\n```\nfmt.Println(\"len(s):\", (*reflect.StringHeader)(unsafe.Pointer(&s)).Len)   // 12\n\nfmt.Println(\"len(s1):\", (*reflect.StringHeader)(unsafe.Pointer(&s1)).Len) // 5\n\nfmt.Println(\"len(s2):\", (*reflect.StringHeader)(unsafe.Pointer(&s2)).Len) // 5\n```\n# 3.切片(slice)\n```\nvar (\n\n    a []int               // nil切片, 和 nil 相等, 一般用来表示一个不存在的切片\n\n    b = []int{}           // 空切片, 和 nil 不相等, 一般用来表示一个空的集合\n\n    c = []int{1, 2, 3}    // 有3个元素的切片, len和cap都为3\n\n    d = c[:2]             // 有2个元素的切片, len为2, cap为3\n\n    e = c[0:2:cap(c)]     // 有2个元素的切片, len为2, cap为3\n\n    f = c[:0]             // 有0个元素的切片, len为0, cap为3\n\n    g = make([]int, 3)    // 有3个元素的切片, len和cap都为3\n\n    h = make([]int, 2, 3) // 有2个元素的切片, len为2, cap为3\n\n    i = make([]int, 0, 3) // 有0个元素的切片, len为0, cap为3\n\n)\n``\n## 3.1添加切片\n```\nvar a []int\n\na = append(a, 1)               // 追加1个元素\n\na = append(a, 1, 2, 3)         // 追加多个元素, 手写解包方式\n\na = append(a, []int{1,2,3}...) // 追加一个切片, 切片需要解包\n\n\n```\n`在容量不足的情况下，append的操作会导致重新分配内存，从而导致巨大的内存分配和复制数据代价`\n```\nvar a = []int{1,2,3}\n\na = append([]int{0}, a...)        // 在开头添加1个元素\n\na = append([]int{-3,-2,-1}, a...) // 在开头添加1个切片\n```\n```\nvar a []int\n\na = append(a[:i], append([]int{x}, a[i:]...)...)     // 在第i个位置插入x\n\na = append(a[:i], append([]int{1,2,3}, a[i:]...)...) // 在第i个位置插入切片\na = append(a, x...)       // 为x切片扩展足够的空间\n\ncopy(a[i+len(x):], a[i:]) // a[i:]向后移动len(x)个位置\n\ncopy(a[i:], x)            // 复制新添加的切片\n```\n## 3.2删除切片\n需要重新赋值切片防止内存泄漏\n```\nfunc FindPhoneNumber(filename string) []byte {\n\n    b, _ := ioutil.ReadFile(filename)\n\n    b = regexp.MustCompile(\"[0-9]+\").Find(b)\n\n    return append([]byte{}, b...) // 这里\n\n}\n\n```\n删除切片有时候会影响GC\n```\nvar a []*int{ ... }\n\na = a[:len(a)-1]    // 本删除的最后一个元素依然被引用, 可能导致GC操作被阻碍\n\nvar a []*int{ ... }\na[len(a)-1] = nil // GC回收最后一个元素内存\n\na = a[:len(a)-1]  // 从切片删除最后一个元素\n\n```\n可以用copy和append组合可以避免创建中间的临时切片，同样是完成添加元素的操作：\n```\na = append(a, 0)     // 切片扩展1个空间\n\ncopy(a[i+1:], a[i:]) // a[i:]向后移动1个位置\n\ns[i] = x             // 设置新添加的元素\n\n```\n第一句append用于扩展切片的长度，为要插入的元素留出空间。第二句copy操作将要插入位置开始之后的元素向后挪动一个位置。第三句真实地将新添加的元素赋值到对应的位置。操作语句虽然冗长了一点，但是相比前面的方法，可以减少中间创建的临时切片。\n用copy和append组合也可以实现在中间位置插入多个元素(也就是插入一个切片):\n```\na = append(a, x...)       // 为x切片扩展足够的空间\n\ncopy(a[i+len(x):], a[i:]) // a[i:]向后移动len(x)个位置\n\ncopy(a[i:], x)            // 复制新添加的切片\n```\n也可以用copy完成删除开头的元素：\n```\na = []int{1, 2, 3}\n\na = a[:copy(a, a[1:])] // 删除开头1个元素\n\na = a[:copy(a, a[N:])] // 删除开头N个元素\n\n```\n对于删除中间的元素，需要对剩余的元素进行一次整体挪动，同样可以用append或copy原地完成：\n```\na = []int{1, 2, 3, ...}\n\n\na = append(a[:i], a[i+1:]...) // 删除中间1个元素\n\na = append(a[:i], a[i+N:]...) // 删除中间N个元素\n\n\na = a[:copy(a[i:], a[i+1:])]  // 删除中间1个元素\n\na = a[:copy(a[i:], a[i+N:])]  // 删除中间N个元素\n```\n# 4.并发模型\n## 4.1加锁\n```\nvar total struct {\n\n    sync.Mutex\n\n    value int\n\n}\n通过sync.lock()和sync.Done()\n```\n## 4.2原子\n```\nimport (\n\n    \"sync\"\n\n    \"sync/atomic\"\n\n)\n//用法：\nfunc worker(wg *sync.WaitGroup) {\n\n    defer wg.Done()\n\n\n    var i uint64\n\n    for i = 0; i <= 100; i++ {\n\n        atomic.AddUint64(&total, i)\n\n    }\n\n}\n\n\nfunc main() {\n\n    var wg sync.WaitGroup\n\n    wg.Add(2)\n\n\n    go worker(&wg)\n\n    go worker(&wg)\n\n    wg.Wait()\n\n}\n```\n## 4.3单例\n```\n我们可以将通用的代码提取出来，就成了标准库中sync.Once的实现：\ntype Once struct {\n\n    m    Mutex\n\n    done uint32\n\n}\n\n\nfunc (o *Once) Do(f func()) {\n\n    if atomic.LoadUint32(&o.done) == 1 {\n\n        return\n\n    }\n\n\n    o.m.Lock()\n\n    defer o.m.Unlock()\n\n\n    if o.done == 0 {\n\n        defer atomic.StoreUint32(&o.done, 1)\n\n        f()\n\n    }\n\n}\n\n基于sync.Once重新实现单件模式：\nvar (\n\n    instance *singleton\n\n    once     sync.Once\n\n)\n\n\nfunc Instance() *singleton {\n\n    once.Do(func() {\n\n        instance = &singleton{}\n\n    })\n\n    return instance\n\n}\n```\n## 4.4带缓冲chan\n测试了下才知道原来\n<-chan int  像这样的只能接收值\nchan<- int  像这样的只能发送值\n```\nvar limit = make(chan int, 3)\n\n\nfunc main() {\n\n    for _, w := range work {\n\n        go func() {\n\n            limit <- 1\n\n            w()\n\n            <-limit\n\n        }()\n\n    }\n\n    select{}\n\n}\nfunc main() {\n\n    done := make(chan int, 10) // 带 10 个缓存\n\n\n    // 开N个后台打印线程\n\n    for i := 0; i < cap(done); i++ {\n\n        go func(){\n\n            fmt.Println(\"你好, 世界\")\n\n            done <- 1\n\n        }()\n\n    }\n\n\n    // 等待N个后台线程完成\n\n    for i := 0; i < cap(done); i++ {\n\n        <-done\n\n    }\n\n}\n//其实也可以用\nsync.WaitGroup\n```\n## 4.5 select\n```\n基于select实现的管道的超时判断：\n    select {\n\n    case v := <-in:\n\n        fmt.Println(v)\n\n    case <-time.After(time.Second):\n\n        return // 超时\n\n    }\n\n通过select的default分支实现非阻塞的管道发送或接收操作：\n    select {\n\n    case v := <-in:\n\n        fmt.Println(v)\n\n    default:\n\n        // 没有数据\n\n    }\n\n通过select来阻止main函数退出：\nfunc main() {\n\n    // do some thins\n\n    select{}\n\n}\n```\n但是管道的发送操作和接收操作是一一对应的，如果要停止多个Goroutine那么可能需要创建同样数量的管道，这个代价太大了。其实我们可以通过close关闭一个管道来实现广播的效果，所有从关闭管道接收的操作均会收到一个零值和一个可选的失败标志。\n```\nfunc worker(cannel chan bool) {\n\n    for {\n\n        select {\n\n        default:\n\n            fmt.Println(\"hello\")\n\n            // 正常工作\n\n        case <-cannel:\n\n            // 退出\n\n        }\n\n    }\n\n}\n\n\nfunc main() {\n\n    cancel := make(chan bool)\n\n\n    for i := 0; i < 10; i++ {\n\n        go worker(cancel)\n\n    }\n\n\n    time.Sleep(time.Second)\n\n    close(cancel)\n\n}\n```\n# 5.异常\n异常必须放在defer func () {}()\n","source":"_posts/Go高级编程.md","raw":"---\ntitle: Go高级编程.md\ndate: 2018-06-09 11:11:17\ncategories: Go语言\ntags: [Go]\n---\n\nhttps://books.studygolang.com/advanced-go-programming-book/ch2-cgo/ch2-04-memory.html\n# 1.数组\n## 1.1数组定义方式\n```\nvar a [3]int                    // 定义一个长度为3的int类型数组, 元素全部为0\n\nvar b = [...]int{1, 2, 3}       // 定义一个长度为3的int类型数组, 元素为 1, 2, 3\n\nvar c = [...]int{2: 3, 1: 2}    // 定义一个长度为3的int类型数组, 元素为 0, 2, 3\n\nvar d = [...]int{1, 2, 4: 5, 6} // 定义一个长度为6的int类型数组, 元素为 1, 2, 0, 0, 5, 6\n\n```\n## 1.2数组指针\n```\nvar a = [...]int{1, 2, 3} // a 是一个数组\n\nvar b = &a                // b 是指向数组的指针\n\n\nfmt.Println(a[0], a[1])   // 打印数组的前2个元素\n\nfmt.Println(b[0], b[1])   // 通过数组指针访问数组元素的方式和数组类似\n\n\nfor i, v := range b {     // 通过数组指针迭代数组的元素\n\n    fmt.Println(i, v)\n\n}\n```\n## 1.3数组遍历\n```\n    for i := range a {\n\n        fmt.Printf(\"b[%d]: %d\\n\", i, b[i])\n\n    }\n\n    for i, v := range b {\n\n        fmt.Printf(\"b[%d]: %d\\n\", i, v)\n\n    }\n\n    for i := 0; i < len(c); i++ {\n\n        fmt.Printf(\"b[%d]: %d\\n\", i, b[i])\n\n    }\n\n```\n## 1.4函数数组、管道数组\n```\n// 图像解码器数组\n\nvar decoder1 [2]func(io.Reader) (image.Image, error)\n\nvar decoder2 = [...]func(io.Reader) (image.Image, error){\n\n    png.Decode,\n\n    jpeg.Decode,\n\n}\n\n\n// 接口数组\n\nvar unknown1 [2]interface{}\n\nvar unknown2 = [...]interface{}{123, \"你好\"}\n\n\n// 管道数组\n\nvar chanList = [2]chan int{}\n\n```\n## 1.5空数组\n长度为0的数组在内存中并不占用空间。空数组虽然很少直接使用，但是可以用于强调某种特有类型的操作时避免分配额外的内存空间，比如用于管道的同步操作：\n```\n    c1 := make(chan [0]int)\n\n    go func() {\n\n        fmt.Println(\"c1\")\n\n        c1 <- [0]int{}\n\n    }()\n\n    <-c1\n\n```\n在这里，我们并不关心管道中传输数据的真实类型，其中管道接收和发送操作只是用于消息的同步。对于这种场景，我们用空数组来作为管道类型可以减少管道元素赋值时的开销。当然一般更倾向于用无类型的匿名结构体代替：\n```\n    c2 := make(chan struct{})\n\n    go func() {\n\n        fmt.Println(\"c2\")\n\n        c2 <- struct{}{} // struct{}部分是类型, {}表示对应的结构体值\n\n    }()\n\n    <-c2\n```\n# 2.字符串\n## 2.1类似切片\n字符串虽然不是切片，但是支持切片操作，不同位置的切片底层也访问的同一块内存数据（因为字符串是只读的，相同的字符串面值常量通常是对应同一个字符串常量）：\n```\ns := \"hello, world\"\n\nhello := s[:5]\n\nworld := s[7:]\n\n\ns1 := \"hello, world\"[:5]\n\ns2 := \"hello, world\"[7:]\n\n```\n和数组一样，内置的len和cap函数返回相同的结果，都对应字符串的长度。也可以通过reflect.StringHeader结构访问字符串的长度（这里只是为了演示字符串的结构，并不是推荐的做法）：\n```\nfmt.Println(\"len(s):\", (*reflect.StringHeader)(unsafe.Pointer(&s)).Len)   // 12\n\nfmt.Println(\"len(s1):\", (*reflect.StringHeader)(unsafe.Pointer(&s1)).Len) // 5\n\nfmt.Println(\"len(s2):\", (*reflect.StringHeader)(unsafe.Pointer(&s2)).Len) // 5\n```\n# 3.切片(slice)\n```\nvar (\n\n    a []int               // nil切片, 和 nil 相等, 一般用来表示一个不存在的切片\n\n    b = []int{}           // 空切片, 和 nil 不相等, 一般用来表示一个空的集合\n\n    c = []int{1, 2, 3}    // 有3个元素的切片, len和cap都为3\n\n    d = c[:2]             // 有2个元素的切片, len为2, cap为3\n\n    e = c[0:2:cap(c)]     // 有2个元素的切片, len为2, cap为3\n\n    f = c[:0]             // 有0个元素的切片, len为0, cap为3\n\n    g = make([]int, 3)    // 有3个元素的切片, len和cap都为3\n\n    h = make([]int, 2, 3) // 有2个元素的切片, len为2, cap为3\n\n    i = make([]int, 0, 3) // 有0个元素的切片, len为0, cap为3\n\n)\n``\n## 3.1添加切片\n```\nvar a []int\n\na = append(a, 1)               // 追加1个元素\n\na = append(a, 1, 2, 3)         // 追加多个元素, 手写解包方式\n\na = append(a, []int{1,2,3}...) // 追加一个切片, 切片需要解包\n\n\n```\n`在容量不足的情况下，append的操作会导致重新分配内存，从而导致巨大的内存分配和复制数据代价`\n```\nvar a = []int{1,2,3}\n\na = append([]int{0}, a...)        // 在开头添加1个元素\n\na = append([]int{-3,-2,-1}, a...) // 在开头添加1个切片\n```\n```\nvar a []int\n\na = append(a[:i], append([]int{x}, a[i:]...)...)     // 在第i个位置插入x\n\na = append(a[:i], append([]int{1,2,3}, a[i:]...)...) // 在第i个位置插入切片\na = append(a, x...)       // 为x切片扩展足够的空间\n\ncopy(a[i+len(x):], a[i:]) // a[i:]向后移动len(x)个位置\n\ncopy(a[i:], x)            // 复制新添加的切片\n```\n## 3.2删除切片\n需要重新赋值切片防止内存泄漏\n```\nfunc FindPhoneNumber(filename string) []byte {\n\n    b, _ := ioutil.ReadFile(filename)\n\n    b = regexp.MustCompile(\"[0-9]+\").Find(b)\n\n    return append([]byte{}, b...) // 这里\n\n}\n\n```\n删除切片有时候会影响GC\n```\nvar a []*int{ ... }\n\na = a[:len(a)-1]    // 本删除的最后一个元素依然被引用, 可能导致GC操作被阻碍\n\nvar a []*int{ ... }\na[len(a)-1] = nil // GC回收最后一个元素内存\n\na = a[:len(a)-1]  // 从切片删除最后一个元素\n\n```\n可以用copy和append组合可以避免创建中间的临时切片，同样是完成添加元素的操作：\n```\na = append(a, 0)     // 切片扩展1个空间\n\ncopy(a[i+1:], a[i:]) // a[i:]向后移动1个位置\n\ns[i] = x             // 设置新添加的元素\n\n```\n第一句append用于扩展切片的长度，为要插入的元素留出空间。第二句copy操作将要插入位置开始之后的元素向后挪动一个位置。第三句真实地将新添加的元素赋值到对应的位置。操作语句虽然冗长了一点，但是相比前面的方法，可以减少中间创建的临时切片。\n用copy和append组合也可以实现在中间位置插入多个元素(也就是插入一个切片):\n```\na = append(a, x...)       // 为x切片扩展足够的空间\n\ncopy(a[i+len(x):], a[i:]) // a[i:]向后移动len(x)个位置\n\ncopy(a[i:], x)            // 复制新添加的切片\n```\n也可以用copy完成删除开头的元素：\n```\na = []int{1, 2, 3}\n\na = a[:copy(a, a[1:])] // 删除开头1个元素\n\na = a[:copy(a, a[N:])] // 删除开头N个元素\n\n```\n对于删除中间的元素，需要对剩余的元素进行一次整体挪动，同样可以用append或copy原地完成：\n```\na = []int{1, 2, 3, ...}\n\n\na = append(a[:i], a[i+1:]...) // 删除中间1个元素\n\na = append(a[:i], a[i+N:]...) // 删除中间N个元素\n\n\na = a[:copy(a[i:], a[i+1:])]  // 删除中间1个元素\n\na = a[:copy(a[i:], a[i+N:])]  // 删除中间N个元素\n```\n# 4.并发模型\n## 4.1加锁\n```\nvar total struct {\n\n    sync.Mutex\n\n    value int\n\n}\n通过sync.lock()和sync.Done()\n```\n## 4.2原子\n```\nimport (\n\n    \"sync\"\n\n    \"sync/atomic\"\n\n)\n//用法：\nfunc worker(wg *sync.WaitGroup) {\n\n    defer wg.Done()\n\n\n    var i uint64\n\n    for i = 0; i <= 100; i++ {\n\n        atomic.AddUint64(&total, i)\n\n    }\n\n}\n\n\nfunc main() {\n\n    var wg sync.WaitGroup\n\n    wg.Add(2)\n\n\n    go worker(&wg)\n\n    go worker(&wg)\n\n    wg.Wait()\n\n}\n```\n## 4.3单例\n```\n我们可以将通用的代码提取出来，就成了标准库中sync.Once的实现：\ntype Once struct {\n\n    m    Mutex\n\n    done uint32\n\n}\n\n\nfunc (o *Once) Do(f func()) {\n\n    if atomic.LoadUint32(&o.done) == 1 {\n\n        return\n\n    }\n\n\n    o.m.Lock()\n\n    defer o.m.Unlock()\n\n\n    if o.done == 0 {\n\n        defer atomic.StoreUint32(&o.done, 1)\n\n        f()\n\n    }\n\n}\n\n基于sync.Once重新实现单件模式：\nvar (\n\n    instance *singleton\n\n    once     sync.Once\n\n)\n\n\nfunc Instance() *singleton {\n\n    once.Do(func() {\n\n        instance = &singleton{}\n\n    })\n\n    return instance\n\n}\n```\n## 4.4带缓冲chan\n测试了下才知道原来\n<-chan int  像这样的只能接收值\nchan<- int  像这样的只能发送值\n```\nvar limit = make(chan int, 3)\n\n\nfunc main() {\n\n    for _, w := range work {\n\n        go func() {\n\n            limit <- 1\n\n            w()\n\n            <-limit\n\n        }()\n\n    }\n\n    select{}\n\n}\nfunc main() {\n\n    done := make(chan int, 10) // 带 10 个缓存\n\n\n    // 开N个后台打印线程\n\n    for i := 0; i < cap(done); i++ {\n\n        go func(){\n\n            fmt.Println(\"你好, 世界\")\n\n            done <- 1\n\n        }()\n\n    }\n\n\n    // 等待N个后台线程完成\n\n    for i := 0; i < cap(done); i++ {\n\n        <-done\n\n    }\n\n}\n//其实也可以用\nsync.WaitGroup\n```\n## 4.5 select\n```\n基于select实现的管道的超时判断：\n    select {\n\n    case v := <-in:\n\n        fmt.Println(v)\n\n    case <-time.After(time.Second):\n\n        return // 超时\n\n    }\n\n通过select的default分支实现非阻塞的管道发送或接收操作：\n    select {\n\n    case v := <-in:\n\n        fmt.Println(v)\n\n    default:\n\n        // 没有数据\n\n    }\n\n通过select来阻止main函数退出：\nfunc main() {\n\n    // do some thins\n\n    select{}\n\n}\n```\n但是管道的发送操作和接收操作是一一对应的，如果要停止多个Goroutine那么可能需要创建同样数量的管道，这个代价太大了。其实我们可以通过close关闭一个管道来实现广播的效果，所有从关闭管道接收的操作均会收到一个零值和一个可选的失败标志。\n```\nfunc worker(cannel chan bool) {\n\n    for {\n\n        select {\n\n        default:\n\n            fmt.Println(\"hello\")\n\n            // 正常工作\n\n        case <-cannel:\n\n            // 退出\n\n        }\n\n    }\n\n}\n\n\nfunc main() {\n\n    cancel := make(chan bool)\n\n\n    for i := 0; i < 10; i++ {\n\n        go worker(cancel)\n\n    }\n\n\n    time.Sleep(time.Second)\n\n    close(cancel)\n\n}\n```\n# 5.异常\n异常必须放在defer func () {}()\n","slug":"Go高级编程","published":1,"updated":"2018-06-09T15:13:00.000Z","_id":"cji7je0ai00060qilhzysqwwo","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://books.studygolang.com/advanced-go-programming-book/ch2-cgo/ch2-04-memory.html\" target=\"_blank\" rel=\"noopener\">https://books.studygolang.com/advanced-go-programming-book/ch2-cgo/ch2-04-memory.html</a></p>\n<h1 id=\"1-数组\"><a href=\"#1-数组\" class=\"headerlink\" title=\"1.数组\"></a>1.数组</h1><h2 id=\"1-1数组定义方式\"><a href=\"#1-1数组定义方式\" class=\"headerlink\" title=\"1.1数组定义方式\"></a>1.1数组定义方式</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">a</span> [<span class=\"number\">3</span>]int                    <span class=\"comment\">// 定义一个长度为3的int类型数组, 元素全部为0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">b</span> = [...]int&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;       <span class=\"comment\">// 定义一个长度为3的int类型数组, 元素为 1, 2, 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> c = [...]int&#123;<span class=\"number\">2</span>: <span class=\"number\">3</span>, <span class=\"number\">1</span>: <span class=\"number\">2</span>&#125;    <span class=\"comment\">// 定义一个长度为3的int类型数组, 元素为 0, 2, 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> d = [...]int&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>: <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125; <span class=\"comment\">// 定义一个长度为6的int类型数组, 元素为 1, 2, 0, 0, 5, 6</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"1-2数组指针\"><a href=\"#1-2数组指针\" class=\"headerlink\" title=\"1.2数组指针\"></a>1.2数组指针</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">a</span> = [...]int&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125; <span class=\"comment\">// a 是一个数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">b</span> = &amp;<span class=\"selector-tag\">a</span>                <span class=\"comment\">// b 是指向数组的指针</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Println(<span class=\"selector-tag\">a</span>[<span class=\"number\">0</span>], <span class=\"selector-tag\">a</span>[<span class=\"number\">1</span>])   <span class=\"comment\">// 打印数组的前2个元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Println(<span class=\"selector-tag\">b</span>[<span class=\"number\">0</span>], <span class=\"selector-tag\">b</span>[<span class=\"number\">1</span>])   <span class=\"comment\">// 通过数组指针访问数组元素的方式和数组类似</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"selector-tag\">i</span>, v := range <span class=\"selector-tag\">b</span> &#123;     <span class=\"comment\">// 通过数组指针迭代数组的元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(<span class=\"selector-tag\">i</span>, v)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-3数组遍历\"><a href=\"#1-3数组遍历\" class=\"headerlink\" title=\"1.3数组遍历\"></a>1.3数组遍历</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> a &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"b[%d]: %d\\n\"</span>, i, b[i])</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i, v := <span class=\"keyword\">range</span> b &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"b[%d]: %d\\n\"</span>, i, v)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(c); i++ &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"b[%d]: %d\\n\"</span>, i, b[i])</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-4函数数组、管道数组\"><a href=\"#1-4函数数组、管道数组\" class=\"headerlink\" title=\"1.4函数数组、管道数组\"></a>1.4函数数组、管道数组</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 图像解码器数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> decoder1 [<span class=\"number\">2</span>]func(io.Reader) (image<span class=\"selector-class\">.Image</span>, error)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> decoder2 = [...]func(io.Reader) (image<span class=\"selector-class\">.Image</span>, error)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    png<span class=\"selector-class\">.Decode</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    jpeg<span class=\"selector-class\">.Decode</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接口数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> unknown1 [<span class=\"number\">2</span>]interface&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> unknown2 = [...]interface&#123;&#125;&#123;<span class=\"number\">123</span>, <span class=\"string\">\"你好\"</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 管道数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> chanList = [<span class=\"number\">2</span>]chan int&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-5空数组\"><a href=\"#1-5空数组\" class=\"headerlink\" title=\"1.5空数组\"></a>1.5空数组</h2><p>长度为0的数组在内存中并不占用空间。空数组虽然很少直接使用，但是可以用于强调某种特有类型的操作时避免分配额外的内存空间，比如用于管道的同步操作：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c1 := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> [<span class=\"number\">0</span>]<span class=\"keyword\">int</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"c1\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    c1 &lt;- [<span class=\"number\">0</span>]<span class=\"keyword\">int</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;-c1</span><br></pre></td></tr></table></figure></p>\n<p>在这里，我们并不关心管道中传输数据的真实类型，其中管道接收和发送操作只是用于消息的同步。对于这种场景，我们用空数组来作为管道类型可以减少管道元素赋值时的开销。当然一般更倾向于用无类型的匿名结构体代替：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c2 := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"c2\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    c2 &lt;- <span class=\"keyword\">struct</span>&#123;&#125;&#123;&#125; <span class=\"comment\">// struct&#123;&#125;部分是类型, &#123;&#125;表示对应的结构体值</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;-c2</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"2-字符串\"><a href=\"#2-字符串\" class=\"headerlink\" title=\"2.字符串\"></a>2.字符串</h1><h2 id=\"2-1类似切片\"><a href=\"#2-1类似切片\" class=\"headerlink\" title=\"2.1类似切片\"></a>2.1类似切片</h2><p>字符串虽然不是切片，但是支持切片操作，不同位置的切片底层也访问的同一块内存数据（因为字符串是只读的，相同的字符串面值常量通常是对应同一个字符串常量）：<br><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s := <span class=\"string\">\"hello, world\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">hello := s[:5]</span><br><span class=\"line\"></span><br><span class=\"line\">world := s[7:]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">s1 := <span class=\"string\">\"hello, world\"</span>[:5]</span><br><span class=\"line\"></span><br><span class=\"line\">s2 := <span class=\"string\">\"hello, world\"</span>[7:]</span><br></pre></td></tr></table></figure></p>\n<p>和数组一样，内置的len和cap函数返回相同的结果，都对应字符串的长度。也可以通过reflect.StringHeader结构访问字符串的长度（这里只是为了演示字符串的结构，并不是推荐的做法）：<br><figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fmt.Println(<span class=\"string\">\"len(s):\"</span>, (*reflect.StringHeader)(unsafe.Pointer(<span class=\"meta\">&amp;s)).Len)   <span class=\"comment\">// 12</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"len(s1):\"</span>, (*reflect.StringHeader)(unsafe.Pointer(<span class=\"meta\">&amp;s1)).Len) <span class=\"comment\">// 5</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"len(s2):\"</span>, (*reflect.StringHeader)(unsafe.Pointer(<span class=\"meta\">&amp;s2)).Len) <span class=\"comment\">// 5</span></span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"3-切片-slice\"><a href=\"#3-切片-slice\" class=\"headerlink\" title=\"3.切片(slice)\"></a>3.切片(slice)</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\"></span><br><span class=\"line\">    a []<span class=\"keyword\">int</span>               <span class=\"comment\">// nil切片, 和 nil 相等, 一般用来表示一个不存在的切片</span></span><br><span class=\"line\"></span><br><span class=\"line\">    b = []<span class=\"keyword\">int</span>&#123;&#125;           <span class=\"comment\">// 空切片, 和 nil 不相等, 一般用来表示一个空的集合</span></span><br><span class=\"line\"></span><br><span class=\"line\">    c = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;    <span class=\"comment\">// 有3个元素的切片, len和cap都为3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    d = c[:<span class=\"number\">2</span>]             <span class=\"comment\">// 有2个元素的切片, len为2, cap为3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    e = c[<span class=\"number\">0</span>:<span class=\"number\">2</span>:<span class=\"built_in\">cap</span>(c)]     <span class=\"comment\">// 有2个元素的切片, len为2, cap为3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    f = c[:<span class=\"number\">0</span>]             <span class=\"comment\">// 有0个元素的切片, len为0, cap为3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    g = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">3</span>)    <span class=\"comment\">// 有3个元素的切片, len和cap都为3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    h = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>) <span class=\"comment\">// 有2个元素的切片, len为2, cap为3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    i = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>) <span class=\"comment\">// 有0个元素的切片, len为0, cap为3</span></span><br><span class=\"line\"></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"string\">``</span></span><br><span class=\"line\">## <span class=\"number\">3.1</span>添加切片</span><br></pre></td></tr></table></figure>\n<p>var a []int</p>\n<p>a = append(a, 1)               // 追加1个元素</p>\n<p>a = append(a, 1, 2, 3)         // 追加多个元素, 手写解包方式</p>\n<p>a = append(a, []int{1,2,3}…) // 追加一个切片, 切片需要解包</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`在容量不足的情况下，append的操作会导致重新分配内存，从而导致巨大的内存分配和复制数据代价`</span><br></pre></td></tr></table></figure>\n<p>var a = []int{1,2,3}</p>\n<p>a = append([]int{0}, a…)        // 在开头添加1个元素</p>\n<p>a = append([]int{-3,-2,-1}, a…) // 在开头添加1个切片<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">a</span> []int</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> = append(<span class=\"selector-tag\">a</span>[:i], append([]int&#123;x&#125;, <span class=\"selector-tag\">a</span>[<span class=\"selector-tag\">i</span>:]...)...)     <span class=\"comment\">// 在第i个位置插入x</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> = append(<span class=\"selector-tag\">a</span>[:i], append([]int&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;, <span class=\"selector-tag\">a</span>[<span class=\"selector-tag\">i</span>:]...)...) <span class=\"comment\">// 在第i个位置插入切片</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> = append(<span class=\"selector-tag\">a</span>, x...)       <span class=\"comment\">// 为x切片扩展足够的空间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">copy</span><span class=\"params\">(a[i+len(x)</span></span>:], <span class=\"selector-tag\">a</span>[<span class=\"selector-tag\">i</span>:]) <span class=\"comment\">// a[i:]向后移动len(x)个位置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">copy</span><span class=\"params\">(a[i:], x)</span></span>            <span class=\"comment\">// 复制新添加的切片</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-2删除切片\"><a href=\"#3-2删除切片\" class=\"headerlink\" title=\"3.2删除切片\"></a>3.2删除切片</h2><p>需要重新赋值切片防止内存泄漏<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">FindPhoneNumber</span><span class=\"params\">(filename <span class=\"keyword\">string</span>)</span> []<span class=\"title\">byte</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    b, _ := ioutil.ReadFile(filename)</span><br><span class=\"line\"></span><br><span class=\"line\">    b = regexp.MustCompile(<span class=\"string\">\"[0-9]+\"</span>).Find(b)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">append</span>([]<span class=\"keyword\">byte</span>&#123;&#125;, b...) <span class=\"comment\">// 这里</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>删除切片有时候会影响GC<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">a</span> []*int&#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> = <span class=\"selector-tag\">a</span>[:len(a)-<span class=\"number\">1</span>]    <span class=\"comment\">// 本删除的最后一个元素依然被引用, 可能导致GC操作被阻碍</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">a</span> []*int&#123; ... &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span>[len(a)-<span class=\"number\">1</span>] = nil <span class=\"comment\">// GC回收最后一个元素内存</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> = <span class=\"selector-tag\">a</span>[:len(a)-<span class=\"number\">1</span>]  <span class=\"comment\">// 从切片删除最后一个元素</span></span><br></pre></td></tr></table></figure></p>\n<p>可以用copy和append组合可以避免创建中间的临时切片，同样是完成添加元素的操作：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span> = append(<span class=\"selector-tag\">a</span>, <span class=\"number\">0</span>)     <span class=\"comment\">// 切片扩展1个空间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">copy</span><span class=\"params\">(a[i+<span class=\"number\">1</span>:], a[i:])</span></span> <span class=\"comment\">// a[i:]向后移动1个位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">s[i] = x             <span class=\"comment\">// 设置新添加的元素</span></span><br></pre></td></tr></table></figure></p>\n<p>第一句append用于扩展切片的长度，为要插入的元素留出空间。第二句copy操作将要插入位置开始之后的元素向后挪动一个位置。第三句真实地将新添加的元素赋值到对应的位置。操作语句虽然冗长了一点，但是相比前面的方法，可以减少中间创建的临时切片。<br>用copy和append组合也可以实现在中间位置插入多个元素(也就是插入一个切片):<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span> = append(<span class=\"selector-tag\">a</span>, x...)       <span class=\"comment\">// 为x切片扩展足够的空间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">copy</span><span class=\"params\">(a[i+len(x)</span></span>:], <span class=\"selector-tag\">a</span>[<span class=\"selector-tag\">i</span>:]) <span class=\"comment\">// a[i:]向后移动len(x)个位置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">copy</span><span class=\"params\">(a[i:], x)</span></span>            <span class=\"comment\">// 复制新添加的切片</span></span><br></pre></td></tr></table></figure></p>\n<p>也可以用copy完成删除开头的元素：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span> = []int&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> = <span class=\"selector-tag\">a</span>[:copy(<span class=\"selector-tag\">a</span>, <span class=\"selector-tag\">a</span>[<span class=\"number\">1</span>:])] <span class=\"comment\">// 删除开头1个元素</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> = <span class=\"selector-tag\">a</span>[:copy(<span class=\"selector-tag\">a</span>, <span class=\"selector-tag\">a</span>[N:])] <span class=\"comment\">// 删除开头N个元素</span></span><br></pre></td></tr></table></figure></p>\n<p>对于删除中间的元素，需要对剩余的元素进行一次整体挪动，同样可以用append或copy原地完成：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span> = []int&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, ...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> = append(<span class=\"selector-tag\">a</span>[:i], <span class=\"selector-tag\">a</span>[i+<span class=\"number\">1</span>:]...) <span class=\"comment\">// 删除中间1个元素</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> = append(<span class=\"selector-tag\">a</span>[:i], <span class=\"selector-tag\">a</span>[i+N:]...) <span class=\"comment\">// 删除中间N个元素</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> = <span class=\"selector-tag\">a</span>[:copy(<span class=\"selector-tag\">a</span>[<span class=\"selector-tag\">i</span>:], <span class=\"selector-tag\">a</span>[i+<span class=\"number\">1</span>:])]  <span class=\"comment\">// 删除中间1个元素</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> = <span class=\"selector-tag\">a</span>[:copy(<span class=\"selector-tag\">a</span>[<span class=\"selector-tag\">i</span>:], <span class=\"selector-tag\">a</span>[i+N:])]  <span class=\"comment\">// 删除中间N个元素</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"4-并发模型\"><a href=\"#4-并发模型\" class=\"headerlink\" title=\"4.并发模型\"></a>4.并发模型</h1><h2 id=\"4-1加锁\"><a href=\"#4-1加锁\" class=\"headerlink\" title=\"4.1加锁\"></a>4.1加锁</h2><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> total <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    sync.Mutex</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">value</span> <span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">通过sync.<span class=\"keyword\">lock</span>()和sync.Done()</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-2原子\"><a href=\"#4-2原子\" class=\"headerlink\" title=\"4.2原子\"></a>4.2原子</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">\"sync\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">\"sync/atomic\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">//用法：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">worker</span><span class=\"params\">(wg *sync.WaitGroup)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> i <span class=\"keyword\">uint64</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">100</span>; i++ &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        atomic.AddUint64(&amp;total, i)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\"></span><br><span class=\"line\">    wg.Add(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">go</span> worker(&amp;wg)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">go</span> worker(&amp;wg)</span><br><span class=\"line\"></span><br><span class=\"line\">    wg.Wait()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-3单例\"><a href=\"#4-3单例\" class=\"headerlink\" title=\"4.3单例\"></a>4.3单例</h2><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我们可以将通用的代码提取出来，就成了标准库中sync.Once的实现：</span><br><span class=\"line\">type Once struct &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    m    Mutex</span><br><span class=\"line\"></span><br><span class=\"line\">    done uint32</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">func (o *Once) <span class=\"keyword\">Do</span>(f func()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> atomic.LoadUint32(&amp;o.done) == 1 &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        return</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    o.m.Lock()</span><br><span class=\"line\"></span><br><span class=\"line\">    defer o.m.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> o.done == 0 &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        defer atomic.StoreUint32(&amp;o.done, 1)</span><br><span class=\"line\"></span><br><span class=\"line\">        f()</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">基于sync.Once重新实现单件模式：</span><br><span class=\"line\">var (</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\"> instance </span>*singleton</span><br><span class=\"line\"></span><br><span class=\"line\">    once     sync.Once</span><br><span class=\"line\"></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">func Instance() *singleton &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    once.<span class=\"keyword\">Do</span>(func() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"built_in\"> instance </span>= &amp;singleton&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    return instance</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-4带缓冲chan\"><a href=\"#4-4带缓冲chan\" class=\"headerlink\" title=\"4.4带缓冲chan\"></a>4.4带缓冲chan</h2><p>测试了下才知道原来<br>&lt;-chan int  像这样的只能接收值<br>chan&lt;- int  像这样的只能发送值<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> limit = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, w := <span class=\"keyword\">range</span> work &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            limit &lt;- <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">            w()</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;-limit</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">select</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    done := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">10</span>) <span class=\"comment\">// 带 10 个缓存</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 开N个后台打印线程</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">cap</span>(done); i++ &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            fmt.Println(<span class=\"string\">\"你好, 世界\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            done &lt;- <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 等待N个后台线程完成</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">cap</span>(done); i++ &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;-done</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//其实也可以用</span></span><br><span class=\"line\">sync.WaitGroup</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-5-select\"><a href=\"#4-5-select\" class=\"headerlink\" title=\"4.5 select\"></a>4.5 select</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">基于<span class=\"keyword\">select</span>实现的管道的超时判断：</span><br><span class=\"line\">    <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> v := &lt;-in:</span><br><span class=\"line\"></span><br><span class=\"line\">        fmt.Println(v)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;-time.After(time.Second):</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"comment\">// 超时</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">通过<span class=\"keyword\">select</span>的<span class=\"keyword\">default</span>分支实现非阻塞的管道发送或接收操作：</span><br><span class=\"line\">    <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> v := &lt;-in:</span><br><span class=\"line\"></span><br><span class=\"line\">        fmt.Println(v)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 没有数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">通过<span class=\"keyword\">select</span>来阻止main函数退出：</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// do some thins</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">select</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是管道的发送操作和接收操作是一一对应的，如果要停止多个Goroutine那么可能需要创建同样数量的管道，这个代价太大了。其实我们可以通过close关闭一个管道来实现广播的效果，所有从关闭管道接收的操作均会收到一个零值和一个可选的失败标志。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">worker</span><span class=\"params\">(cannel <span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span>)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">            fmt.Println(<span class=\"string\">\"hello\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 正常工作</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> &lt;-cannel:</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 退出</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    cancel := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">go</span> worker(cancel)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    time.Sleep(time.Second)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">close</span>(cancel)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"5-异常\"><a href=\"#5-异常\" class=\"headerlink\" title=\"5.异常\"></a>5.异常</h1><p>异常必须放在defer func () {}()</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://books.studygolang.com/advanced-go-programming-book/ch2-cgo/ch2-04-memory.html\" target=\"_blank\" rel=\"noopener\">https://books.studygolang.com/advanced-go-programming-book/ch2-cgo/ch2-04-memory.html</a></p>\n<h1 id=\"1-数组\"><a href=\"#1-数组\" class=\"headerlink\" title=\"1.数组\"></a>1.数组</h1><h2 id=\"1-1数组定义方式\"><a href=\"#1-1数组定义方式\" class=\"headerlink\" title=\"1.1数组定义方式\"></a>1.1数组定义方式</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">a</span> [<span class=\"number\">3</span>]int                    <span class=\"comment\">// 定义一个长度为3的int类型数组, 元素全部为0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">b</span> = [...]int&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;       <span class=\"comment\">// 定义一个长度为3的int类型数组, 元素为 1, 2, 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> c = [...]int&#123;<span class=\"number\">2</span>: <span class=\"number\">3</span>, <span class=\"number\">1</span>: <span class=\"number\">2</span>&#125;    <span class=\"comment\">// 定义一个长度为3的int类型数组, 元素为 0, 2, 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> d = [...]int&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>: <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125; <span class=\"comment\">// 定义一个长度为6的int类型数组, 元素为 1, 2, 0, 0, 5, 6</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"1-2数组指针\"><a href=\"#1-2数组指针\" class=\"headerlink\" title=\"1.2数组指针\"></a>1.2数组指针</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">a</span> = [...]int&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125; <span class=\"comment\">// a 是一个数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">b</span> = &amp;<span class=\"selector-tag\">a</span>                <span class=\"comment\">// b 是指向数组的指针</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Println(<span class=\"selector-tag\">a</span>[<span class=\"number\">0</span>], <span class=\"selector-tag\">a</span>[<span class=\"number\">1</span>])   <span class=\"comment\">// 打印数组的前2个元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Println(<span class=\"selector-tag\">b</span>[<span class=\"number\">0</span>], <span class=\"selector-tag\">b</span>[<span class=\"number\">1</span>])   <span class=\"comment\">// 通过数组指针访问数组元素的方式和数组类似</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"selector-tag\">i</span>, v := range <span class=\"selector-tag\">b</span> &#123;     <span class=\"comment\">// 通过数组指针迭代数组的元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(<span class=\"selector-tag\">i</span>, v)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-3数组遍历\"><a href=\"#1-3数组遍历\" class=\"headerlink\" title=\"1.3数组遍历\"></a>1.3数组遍历</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> a &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"b[%d]: %d\\n\"</span>, i, b[i])</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i, v := <span class=\"keyword\">range</span> b &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"b[%d]: %d\\n\"</span>, i, v)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(c); i++ &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"b[%d]: %d\\n\"</span>, i, b[i])</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-4函数数组、管道数组\"><a href=\"#1-4函数数组、管道数组\" class=\"headerlink\" title=\"1.4函数数组、管道数组\"></a>1.4函数数组、管道数组</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 图像解码器数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> decoder1 [<span class=\"number\">2</span>]func(io.Reader) (image<span class=\"selector-class\">.Image</span>, error)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> decoder2 = [...]func(io.Reader) (image<span class=\"selector-class\">.Image</span>, error)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    png<span class=\"selector-class\">.Decode</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    jpeg<span class=\"selector-class\">.Decode</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 接口数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> unknown1 [<span class=\"number\">2</span>]interface&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> unknown2 = [...]interface&#123;&#125;&#123;<span class=\"number\">123</span>, <span class=\"string\">\"你好\"</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 管道数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> chanList = [<span class=\"number\">2</span>]chan int&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-5空数组\"><a href=\"#1-5空数组\" class=\"headerlink\" title=\"1.5空数组\"></a>1.5空数组</h2><p>长度为0的数组在内存中并不占用空间。空数组虽然很少直接使用，但是可以用于强调某种特有类型的操作时避免分配额外的内存空间，比如用于管道的同步操作：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c1 := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> [<span class=\"number\">0</span>]<span class=\"keyword\">int</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"c1\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    c1 &lt;- [<span class=\"number\">0</span>]<span class=\"keyword\">int</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;-c1</span><br></pre></td></tr></table></figure></p>\n<p>在这里，我们并不关心管道中传输数据的真实类型，其中管道接收和发送操作只是用于消息的同步。对于这种场景，我们用空数组来作为管道类型可以减少管道元素赋值时的开销。当然一般更倾向于用无类型的匿名结构体代替：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c2 := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"c2\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    c2 &lt;- <span class=\"keyword\">struct</span>&#123;&#125;&#123;&#125; <span class=\"comment\">// struct&#123;&#125;部分是类型, &#123;&#125;表示对应的结构体值</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;-c2</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"2-字符串\"><a href=\"#2-字符串\" class=\"headerlink\" title=\"2.字符串\"></a>2.字符串</h1><h2 id=\"2-1类似切片\"><a href=\"#2-1类似切片\" class=\"headerlink\" title=\"2.1类似切片\"></a>2.1类似切片</h2><p>字符串虽然不是切片，但是支持切片操作，不同位置的切片底层也访问的同一块内存数据（因为字符串是只读的，相同的字符串面值常量通常是对应同一个字符串常量）：<br><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s := <span class=\"string\">\"hello, world\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">hello := s[:5]</span><br><span class=\"line\"></span><br><span class=\"line\">world := s[7:]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">s1 := <span class=\"string\">\"hello, world\"</span>[:5]</span><br><span class=\"line\"></span><br><span class=\"line\">s2 := <span class=\"string\">\"hello, world\"</span>[7:]</span><br></pre></td></tr></table></figure></p>\n<p>和数组一样，内置的len和cap函数返回相同的结果，都对应字符串的长度。也可以通过reflect.StringHeader结构访问字符串的长度（这里只是为了演示字符串的结构，并不是推荐的做法）：<br><figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fmt.Println(<span class=\"string\">\"len(s):\"</span>, (*reflect.StringHeader)(unsafe.Pointer(<span class=\"meta\">&amp;s)).Len)   <span class=\"comment\">// 12</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"len(s1):\"</span>, (*reflect.StringHeader)(unsafe.Pointer(<span class=\"meta\">&amp;s1)).Len) <span class=\"comment\">// 5</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"len(s2):\"</span>, (*reflect.StringHeader)(unsafe.Pointer(<span class=\"meta\">&amp;s2)).Len) <span class=\"comment\">// 5</span></span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"3-切片-slice\"><a href=\"#3-切片-slice\" class=\"headerlink\" title=\"3.切片(slice)\"></a>3.切片(slice)</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\"></span><br><span class=\"line\">    a []<span class=\"keyword\">int</span>               <span class=\"comment\">// nil切片, 和 nil 相等, 一般用来表示一个不存在的切片</span></span><br><span class=\"line\"></span><br><span class=\"line\">    b = []<span class=\"keyword\">int</span>&#123;&#125;           <span class=\"comment\">// 空切片, 和 nil 不相等, 一般用来表示一个空的集合</span></span><br><span class=\"line\"></span><br><span class=\"line\">    c = []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;    <span class=\"comment\">// 有3个元素的切片, len和cap都为3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    d = c[:<span class=\"number\">2</span>]             <span class=\"comment\">// 有2个元素的切片, len为2, cap为3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    e = c[<span class=\"number\">0</span>:<span class=\"number\">2</span>:<span class=\"built_in\">cap</span>(c)]     <span class=\"comment\">// 有2个元素的切片, len为2, cap为3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    f = c[:<span class=\"number\">0</span>]             <span class=\"comment\">// 有0个元素的切片, len为0, cap为3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    g = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">3</span>)    <span class=\"comment\">// 有3个元素的切片, len和cap都为3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    h = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>) <span class=\"comment\">// 有2个元素的切片, len为2, cap为3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    i = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>) <span class=\"comment\">// 有0个元素的切片, len为0, cap为3</span></span><br><span class=\"line\"></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"string\">``</span></span><br><span class=\"line\">## <span class=\"number\">3.1</span>添加切片</span><br></pre></td></tr></table></figure>\n<p>var a []int</p>\n<p>a = append(a, 1)               // 追加1个元素</p>\n<p>a = append(a, 1, 2, 3)         // 追加多个元素, 手写解包方式</p>\n<p>a = append(a, []int{1,2,3}…) // 追加一个切片, 切片需要解包</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`在容量不足的情况下，append的操作会导致重新分配内存，从而导致巨大的内存分配和复制数据代价`</span><br></pre></td></tr></table></figure>\n<p>var a = []int{1,2,3}</p>\n<p>a = append([]int{0}, a…)        // 在开头添加1个元素</p>\n<p>a = append([]int{-3,-2,-1}, a…) // 在开头添加1个切片<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">a</span> []int</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> = append(<span class=\"selector-tag\">a</span>[:i], append([]int&#123;x&#125;, <span class=\"selector-tag\">a</span>[<span class=\"selector-tag\">i</span>:]...)...)     <span class=\"comment\">// 在第i个位置插入x</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> = append(<span class=\"selector-tag\">a</span>[:i], append([]int&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;, <span class=\"selector-tag\">a</span>[<span class=\"selector-tag\">i</span>:]...)...) <span class=\"comment\">// 在第i个位置插入切片</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> = append(<span class=\"selector-tag\">a</span>, x...)       <span class=\"comment\">// 为x切片扩展足够的空间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">copy</span><span class=\"params\">(a[i+len(x)</span></span>:], <span class=\"selector-tag\">a</span>[<span class=\"selector-tag\">i</span>:]) <span class=\"comment\">// a[i:]向后移动len(x)个位置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">copy</span><span class=\"params\">(a[i:], x)</span></span>            <span class=\"comment\">// 复制新添加的切片</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-2删除切片\"><a href=\"#3-2删除切片\" class=\"headerlink\" title=\"3.2删除切片\"></a>3.2删除切片</h2><p>需要重新赋值切片防止内存泄漏<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">FindPhoneNumber</span><span class=\"params\">(filename <span class=\"keyword\">string</span>)</span> []<span class=\"title\">byte</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    b, _ := ioutil.ReadFile(filename)</span><br><span class=\"line\"></span><br><span class=\"line\">    b = regexp.MustCompile(<span class=\"string\">\"[0-9]+\"</span>).Find(b)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">append</span>([]<span class=\"keyword\">byte</span>&#123;&#125;, b...) <span class=\"comment\">// 这里</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>删除切片有时候会影响GC<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">a</span> []*int&#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> = <span class=\"selector-tag\">a</span>[:len(a)-<span class=\"number\">1</span>]    <span class=\"comment\">// 本删除的最后一个元素依然被引用, 可能导致GC操作被阻碍</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">a</span> []*int&#123; ... &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span>[len(a)-<span class=\"number\">1</span>] = nil <span class=\"comment\">// GC回收最后一个元素内存</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> = <span class=\"selector-tag\">a</span>[:len(a)-<span class=\"number\">1</span>]  <span class=\"comment\">// 从切片删除最后一个元素</span></span><br></pre></td></tr></table></figure></p>\n<p>可以用copy和append组合可以避免创建中间的临时切片，同样是完成添加元素的操作：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span> = append(<span class=\"selector-tag\">a</span>, <span class=\"number\">0</span>)     <span class=\"comment\">// 切片扩展1个空间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">copy</span><span class=\"params\">(a[i+<span class=\"number\">1</span>:], a[i:])</span></span> <span class=\"comment\">// a[i:]向后移动1个位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">s[i] = x             <span class=\"comment\">// 设置新添加的元素</span></span><br></pre></td></tr></table></figure></p>\n<p>第一句append用于扩展切片的长度，为要插入的元素留出空间。第二句copy操作将要插入位置开始之后的元素向后挪动一个位置。第三句真实地将新添加的元素赋值到对应的位置。操作语句虽然冗长了一点，但是相比前面的方法，可以减少中间创建的临时切片。<br>用copy和append组合也可以实现在中间位置插入多个元素(也就是插入一个切片):<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span> = append(<span class=\"selector-tag\">a</span>, x...)       <span class=\"comment\">// 为x切片扩展足够的空间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">copy</span><span class=\"params\">(a[i+len(x)</span></span>:], <span class=\"selector-tag\">a</span>[<span class=\"selector-tag\">i</span>:]) <span class=\"comment\">// a[i:]向后移动len(x)个位置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">copy</span><span class=\"params\">(a[i:], x)</span></span>            <span class=\"comment\">// 复制新添加的切片</span></span><br></pre></td></tr></table></figure></p>\n<p>也可以用copy完成删除开头的元素：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span> = []int&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> = <span class=\"selector-tag\">a</span>[:copy(<span class=\"selector-tag\">a</span>, <span class=\"selector-tag\">a</span>[<span class=\"number\">1</span>:])] <span class=\"comment\">// 删除开头1个元素</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> = <span class=\"selector-tag\">a</span>[:copy(<span class=\"selector-tag\">a</span>, <span class=\"selector-tag\">a</span>[N:])] <span class=\"comment\">// 删除开头N个元素</span></span><br></pre></td></tr></table></figure></p>\n<p>对于删除中间的元素，需要对剩余的元素进行一次整体挪动，同样可以用append或copy原地完成：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span> = []int&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, ...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> = append(<span class=\"selector-tag\">a</span>[:i], <span class=\"selector-tag\">a</span>[i+<span class=\"number\">1</span>:]...) <span class=\"comment\">// 删除中间1个元素</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> = append(<span class=\"selector-tag\">a</span>[:i], <span class=\"selector-tag\">a</span>[i+N:]...) <span class=\"comment\">// 删除中间N个元素</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> = <span class=\"selector-tag\">a</span>[:copy(<span class=\"selector-tag\">a</span>[<span class=\"selector-tag\">i</span>:], <span class=\"selector-tag\">a</span>[i+<span class=\"number\">1</span>:])]  <span class=\"comment\">// 删除中间1个元素</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> = <span class=\"selector-tag\">a</span>[:copy(<span class=\"selector-tag\">a</span>[<span class=\"selector-tag\">i</span>:], <span class=\"selector-tag\">a</span>[i+N:])]  <span class=\"comment\">// 删除中间N个元素</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"4-并发模型\"><a href=\"#4-并发模型\" class=\"headerlink\" title=\"4.并发模型\"></a>4.并发模型</h1><h2 id=\"4-1加锁\"><a href=\"#4-1加锁\" class=\"headerlink\" title=\"4.1加锁\"></a>4.1加锁</h2><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> total <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    sync.Mutex</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">value</span> <span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">通过sync.<span class=\"keyword\">lock</span>()和sync.Done()</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-2原子\"><a href=\"#4-2原子\" class=\"headerlink\" title=\"4.2原子\"></a>4.2原子</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">\"sync\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">\"sync/atomic\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">//用法：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">worker</span><span class=\"params\">(wg *sync.WaitGroup)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> i <span class=\"keyword\">uint64</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">100</span>; i++ &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        atomic.AddUint64(&amp;total, i)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\"></span><br><span class=\"line\">    wg.Add(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">go</span> worker(&amp;wg)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">go</span> worker(&amp;wg)</span><br><span class=\"line\"></span><br><span class=\"line\">    wg.Wait()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-3单例\"><a href=\"#4-3单例\" class=\"headerlink\" title=\"4.3单例\"></a>4.3单例</h2><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我们可以将通用的代码提取出来，就成了标准库中sync.Once的实现：</span><br><span class=\"line\">type Once struct &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    m    Mutex</span><br><span class=\"line\"></span><br><span class=\"line\">    done uint32</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">func (o *Once) <span class=\"keyword\">Do</span>(f func()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> atomic.LoadUint32(&amp;o.done) == 1 &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        return</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    o.m.Lock()</span><br><span class=\"line\"></span><br><span class=\"line\">    defer o.m.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> o.done == 0 &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        defer atomic.StoreUint32(&amp;o.done, 1)</span><br><span class=\"line\"></span><br><span class=\"line\">        f()</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">基于sync.Once重新实现单件模式：</span><br><span class=\"line\">var (</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\"> instance </span>*singleton</span><br><span class=\"line\"></span><br><span class=\"line\">    once     sync.Once</span><br><span class=\"line\"></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">func Instance() *singleton &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    once.<span class=\"keyword\">Do</span>(func() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"built_in\"> instance </span>= &amp;singleton&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    return instance</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-4带缓冲chan\"><a href=\"#4-4带缓冲chan\" class=\"headerlink\" title=\"4.4带缓冲chan\"></a>4.4带缓冲chan</h2><p>测试了下才知道原来<br>&lt;-chan int  像这样的只能接收值<br>chan&lt;- int  像这样的只能发送值<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> limit = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, w := <span class=\"keyword\">range</span> work &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            limit &lt;- <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">            w()</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;-limit</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">select</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    done := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">10</span>) <span class=\"comment\">// 带 10 个缓存</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 开N个后台打印线程</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">cap</span>(done); i++ &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            fmt.Println(<span class=\"string\">\"你好, 世界\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            done &lt;- <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 等待N个后台线程完成</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">cap</span>(done); i++ &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;-done</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//其实也可以用</span></span><br><span class=\"line\">sync.WaitGroup</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-5-select\"><a href=\"#4-5-select\" class=\"headerlink\" title=\"4.5 select\"></a>4.5 select</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">基于<span class=\"keyword\">select</span>实现的管道的超时判断：</span><br><span class=\"line\">    <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> v := &lt;-in:</span><br><span class=\"line\"></span><br><span class=\"line\">        fmt.Println(v)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;-time.After(time.Second):</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"comment\">// 超时</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">通过<span class=\"keyword\">select</span>的<span class=\"keyword\">default</span>分支实现非阻塞的管道发送或接收操作：</span><br><span class=\"line\">    <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> v := &lt;-in:</span><br><span class=\"line\"></span><br><span class=\"line\">        fmt.Println(v)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 没有数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">通过<span class=\"keyword\">select</span>来阻止main函数退出：</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// do some thins</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">select</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是管道的发送操作和接收操作是一一对应的，如果要停止多个Goroutine那么可能需要创建同样数量的管道，这个代价太大了。其实我们可以通过close关闭一个管道来实现广播的效果，所有从关闭管道接收的操作均会收到一个零值和一个可选的失败标志。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">worker</span><span class=\"params\">(cannel <span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span>)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">            fmt.Println(<span class=\"string\">\"hello\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 正常工作</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> &lt;-cannel:</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 退出</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    cancel := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">go</span> worker(cancel)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    time.Sleep(time.Second)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">close</span>(cancel)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"5-异常\"><a href=\"#5-异常\" class=\"headerlink\" title=\"5.异常\"></a>5.异常</h1><p>异常必须放在defer func () {}()</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cji7je0a400010qilczymuvrv","category_id":"cji7je0ab00040qilq1fujk9g","_id":"cji7je0ae00050qilcy1luai4"},{"post_id":"cji7je0ai00060qilhzysqwwo","category_id":"cji7je0ab00040qilq1fujk9g","_id":"cji7je0al00080qilw04h97i1"}],"PostTag":[{"post_id":"cji7je0ai00060qilhzysqwwo","tag_id":"cji7je0ak00070qilpiap3245","_id":"cji7je0al00090qilpx6bgzw6"}],"Tag":[{"name":"Go","_id":"cji7je0ak00070qilpiap3245"}]}}