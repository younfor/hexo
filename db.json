{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/material-flow/source/style.less","path":"style.less","modified":0,"renderable":1},{"_id":"themes/material-flow/source/fonts/icomoon.eot","path":"fonts/icomoon.eot","modified":0,"renderable":1},{"_id":"themes/material-flow/source/fonts/icomoon.svg","path":"fonts/icomoon.svg","modified":0,"renderable":1},{"_id":"themes/material-flow/source/fonts/icomoon.ttf","path":"fonts/icomoon.ttf","modified":0,"renderable":1},{"_id":"themes/material-flow/source/fonts/icomoon.woff","path":"fonts/icomoon.woff","modified":0,"renderable":1},{"_id":"themes/material-flow/source/fonts/selection.json","path":"fonts/selection.json","modified":0,"renderable":1},{"_id":"themes/material-flow/source/js/jquery.fitvids.js","path":"js/jquery.fitvids.js","modified":0,"renderable":1},{"_id":"themes/material-flow/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"themes/material-flow/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/material-flow/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/material-flow/source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"8e8fec8d07a679d26d1657c299640e8b1e4d144e","modified":1528549030000},{"_id":"source/CNAME","hash":"d837e5b15386fdb114697ace1f13d298d6e0d1d6","modified":1528549030000},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1528549030000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1528549030000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1528549030000},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1528549030000},{"_id":"themes/landscape/_config.yml","hash":"46a76b753828a40e448134393bff8256b2d86254","modified":1528552472000},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1528549030000},{"_id":"source/_posts/First.md","hash":"e750efae895fb209f4e086fe2b7e7f2acf854791","modified":1528549444000},{"_id":"source/_posts/Go基础语法.md","hash":"da09c78d1da1787ffeb3cff15d1ad96921d1a2f8","modified":1528554807000},{"_id":"source/about/index.md","hash":"a3b7feb4535a9726a98902e1b74c75cbcb7a8e03","modified":1528549030000},{"_id":"source/tags/index.md","hash":"f29e949d6b1390fd5724101badfe0519545b6a61","modified":1528549030000},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1528549030000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1528549030000},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1528549030000},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1528549030000},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1528549030000},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1528549030000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1528549030000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1528549030000},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1528549030000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1528549030000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1528549030000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1528549030000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1528549030000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1528549030000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1528549030000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1528549030000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1528549030000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1528549030000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1528549030000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1528549030000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1528549030000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1528549030000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1528549030000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"9b1995b965c5912fba4c2bb222c91278b3eb2dc8","modified":1528552435000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1528549030000},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1528549030000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1528549030000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1528549030000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1528552188000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1528549030000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1528549030000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1528549030000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1528549030000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1528549030000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1528549030000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1528549030000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1528549030000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1528549030000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1528549030000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1528549030000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1528549030000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1528549030000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1528549030000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1528549030000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1528549030000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1528549030000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1528549030000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1528549030000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1528549030000},{"_id":"source/_posts/First/logo.png","hash":"3dcb821344fc004c2a87f81cf4b6cf9de213d3a8","modified":1528549030000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1528549030000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1528549030000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1528549030000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1528549030000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1528549030000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1528549030000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1528549030000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1528549030000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1528549030000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1528549030000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1528549030000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1528549030000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1528549030000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1528549030000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1528549030000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1528549030000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1528549030000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1528549030000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1528549030000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1528549030000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1528549030000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1528549030000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1528549030000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1528549030000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1528549030000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1528549030000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1528549030000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1528549030000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1528549030000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1528549030000},{"_id":"public/atom.xml","hash":"9e83561afb58f08a01ba2393e9e3c6e3936a82f4","modified":1528554816220},{"_id":"public/about/index.html","hash":"dfd241e10cd4b8e44639f92e60521e3331e8d7a2","modified":1528555556204},{"_id":"public/tags/index.html","hash":"f55e6e3e0a36a82ecbb8db482a9154ca8b0c9994","modified":1528555556204},{"_id":"public/First/index.html","hash":"2e9d2555b22a5e51997b08d489b99b954802158e","modified":1528555556204},{"_id":"public/archives/index.html","hash":"8486ab704f869254a5fee5c50e21535f065ef4e8","modified":1528555556204},{"_id":"public/archives/2015/index.html","hash":"b4251a2d9d21473547971c984da812210a66dc0c","modified":1528555556204},{"_id":"public/archives/2015/12/index.html","hash":"9eb71e4fffa917ddcbbcaab0f2627c4569a3393a","modified":1528555556204},{"_id":"public/archives/2018/index.html","hash":"b8469643a058f98a0ae6076ff7c3404feb69d2c9","modified":1528555556204},{"_id":"public/archives/2018/06/index.html","hash":"70b2ab683a591df4f22f3fe3df861111b5e9be7c","modified":1528555556205},{"_id":"public/categories/随笔/index.html","hash":"519744a3d0dc373bc6aea3d23f8d8701ab8d9350","modified":1528555556205},{"_id":"public/categories/Go语言/index.html","hash":"d27069c2c7614d85db30efa4ae83f1fb8e253d99","modified":1528555556205},{"_id":"public/tags/日记/index.html","hash":"0586609c2f9d4f377bad22c7f3aeec5a503171f2","modified":1528555556205},{"_id":"public/tags/随笔/index.html","hash":"07e64f0082c2260d4abecf3d23275b2617ab2a6a","modified":1528555556205},{"_id":"public/Go基础语法/index.html","hash":"eb38b8e008cb9587d33e9adddb21faeb7e25417d","modified":1528555556205},{"_id":"public/index.html","hash":"4e666d59993830c3b67f2d0d1ffeca4c0427aa8d","modified":1528555556205},{"_id":"themes/material-flow/LICENSE","hash":"44409ab0bcd7853e2ac93faad84e57299711e6bf","modified":1528552943000},{"_id":"themes/material-flow/README.md","hash":"2f14b9c1e7ad23e03da0599a9f348d61c79c474f","modified":1528552943000},{"_id":"themes/material-flow/_config.yml","hash":"65f62fb57b08124ce0440b257a56c10bd9f92640","modified":1528553422000},{"_id":"themes/material-flow/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1528552943000},{"_id":"themes/material-flow/.git/config","hash":"82381cee1ab01284f0764b866b459e10a56a791b","modified":1528552943000},{"_id":"themes/material-flow/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1528552926000},{"_id":"themes/material-flow/.git/index","hash":"7cc81f7855617695e58b76ff2431f027a2c57707","modified":1528552943000},{"_id":"themes/material-flow/.git/packed-refs","hash":"4b73b813f44c59541ad5caaba80ac82920ee3c0c","modified":1528552943000},{"_id":"themes/material-flow/layout/archive.ejs","hash":"735e6c0b1f8f837617b3a4119ac321a84f4ec5f7","modified":1528552943000},{"_id":"themes/material-flow/layout/category.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1528552943000},{"_id":"themes/material-flow/layout/index.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1528552943000},{"_id":"themes/material-flow/layout/layout.ejs","hash":"c137d708da9c5339dbcdf2e45c4851c08899a457","modified":1528552943000},{"_id":"themes/material-flow/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1528552943000},{"_id":"themes/material-flow/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1528552943000},{"_id":"themes/material-flow/layout/tag.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1528552943000},{"_id":"themes/material-flow/source/style.less","hash":"ad50444f75534f36001872d4c90e1d839614402b","modified":1528552943000},{"_id":"themes/material-flow/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1528552926000},{"_id":"themes/material-flow/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1528552926000},{"_id":"themes/material-flow/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1528552926000},{"_id":"themes/material-flow/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1528552926000},{"_id":"themes/material-flow/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1528552926000},{"_id":"themes/material-flow/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1528552926000},{"_id":"themes/material-flow/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1528552926000},{"_id":"themes/material-flow/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1528552926000},{"_id":"themes/material-flow/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1528552926000},{"_id":"themes/material-flow/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1528552926000},{"_id":"themes/material-flow/.git/logs/HEAD","hash":"2259feb7e44facf24d52511eec18f3fc454bfc15","modified":1528552943000},{"_id":"themes/material-flow/layout/_partial/archive.ejs","hash":"7d811a088748b758c0664645629adbebdd8d1c3f","modified":1528552943000},{"_id":"themes/material-flow/layout/_partial/article.ejs","hash":"b704e39a37391b8017d1c3ebddcb0e56262c4819","modified":1528552943000},{"_id":"themes/material-flow/layout/_partial/categories.ejs","hash":"761fda43c385e81324b628dfab6377b82bfdf82a","modified":1528552943000},{"_id":"themes/material-flow/layout/_partial/footer.ejs","hash":"a8d0ee768920a69818e0065a65a94109b72cb77d","modified":1528552943000},{"_id":"themes/material-flow/layout/_partial/head.ejs","hash":"e7e1f1b4d9830cf0a91efe6fcbabdbbd405567d0","modified":1528552943000},{"_id":"themes/material-flow/layout/_partial/header.ejs","hash":"7ee2448ebb96c206e449ea6641d5ba5cc1a6c9d2","modified":1528552943000},{"_id":"themes/material-flow/layout/_partial/loading.ejs","hash":"9c5721d5a5cff00860f2775b12dd73fe62375201","modified":1528552943000},{"_id":"themes/material-flow/layout/_partial/post.ejs","hash":"a808dafbac96483bf6c7d7909eca89c7d52ea888","modified":1528554490000},{"_id":"themes/material-flow/layout/_partial/scripts.ejs","hash":"456c65e7c1f93c66511e0976ea88a744d3e6b7de","modified":1528552943000},{"_id":"themes/material-flow/layout/_partial/side.ejs","hash":"fe78dea06ac3a4ce2efcfd6171aea8fb3f64ebe7","modified":1528552943000},{"_id":"themes/material-flow/layout/_widget/about.ejs","hash":"3733ad952dd72ff6df3cc3952111819f79b08673","modified":1528554685000},{"_id":"themes/material-flow/layout/_widget/categories.ejs","hash":"2be2c85e4c5275d08e524fabdb38f046054b874a","modified":1528552943000},{"_id":"themes/material-flow/layout/_widget/links.ejs","hash":"2d6c7fc92b0330a7a79b8b680cf9f4286fdf0291","modified":1528552943000},{"_id":"themes/material-flow/layout/_widget/tagcloud.ejs","hash":"914698bcc4210b5f984e12166eca3c86de631968","modified":1528552943000},{"_id":"themes/material-flow/snapshots/phone.png","hash":"8e78f25ee179e3ff27fff101050792184935d319","modified":1528552943000},{"_id":"themes/material-flow/source/fonts/icomoon.eot","hash":"931a892fd6307c0cfcbb71511ad4a38b3dd20edf","modified":1528552943000},{"_id":"themes/material-flow/source/fonts/icomoon.svg","hash":"37a9d40dfcd7d156cf452db75c425e797351e2b5","modified":1528552943000},{"_id":"themes/material-flow/source/fonts/icomoon.ttf","hash":"6192fb2b38c94f77d1fed08c1969fab5ffe9a30c","modified":1528552943000},{"_id":"themes/material-flow/source/fonts/icomoon.woff","hash":"0356e9be814a04187c641371fd95a7a8d9111200","modified":1528552943000},{"_id":"themes/material-flow/source/fonts/selection.json","hash":"498b5ba0cafb2eb5fa20f9034527eb912fa41827","modified":1528552943000},{"_id":"themes/material-flow/source/js/jquery.fitvids.js","hash":"57946a22c79654014eb00fb548f727d302221873","modified":1528552943000},{"_id":"themes/material-flow/source/js/app.js","hash":"17aca227d841b932ac33af4c9e02a192832fdc85","modified":1528552943000},{"_id":"themes/material-flow/source/js/search.js","hash":"632ce023094442d350dcd2895ca5f948364746cb","modified":1528552943000},{"_id":"themes/material-flow/source/less/_archive.less","hash":"0b15989a0d19ce550cf5d0021376c5ad1d4790b9","modified":1528552943000},{"_id":"themes/material-flow/source/less/_article.less","hash":"37d645669b564df960c02680c0ee6532361b4d7b","modified":1528552943000},{"_id":"themes/material-flow/source/less/_base.less","hash":"828efc946f54ce2bfd5970e1d8d7b08f8f515786","modified":1528552943000},{"_id":"themes/material-flow/source/less/_defines.less","hash":"6b8ffd4e1b478e046722487bae15a500f3fd3092","modified":1528552943000},{"_id":"themes/material-flow/source/less/_fonts.less","hash":"d9e56fa5affcdee1c530ee5d5268a7e07644c05a","modified":1528552943000},{"_id":"themes/material-flow/source/less/_footer.less","hash":"973b1f9c62159f345833db5c30db03c351c66c5c","modified":1528552943000},{"_id":"themes/material-flow/source/less/_header.less","hash":"36f32479c42be1ed503903e1cb88daca5b7792ca","modified":1528552943000},{"_id":"themes/material-flow/source/less/_main.less","hash":"6e2c43e15d1e05bcddbccc1d4830b4687261f1eb","modified":1528552943000},{"_id":"themes/material-flow/source/less/_normalize.less","hash":"02fe53286d071637534d5aa2c57c76c168c0d521","modified":1528552943000},{"_id":"themes/material-flow/source/less/_pagination.less","hash":"165e2c369faf70858b731bb6d483d8991259887e","modified":1528552943000},{"_id":"themes/material-flow/source/less/_search.less","hash":"ab1e3d8fdd489adde30723c40726e5e8187a8b6c","modified":1528552943000},{"_id":"themes/material-flow/source/less/_side.less","hash":"210ffc4e3fc41a5202618e17fc744a8b2b6bc54e","modified":1528552943000},{"_id":"themes/material-flow/source/less/_toc.less","hash":"76729eb95cf89eb17436e13610847102d4795a63","modified":1528552943000},{"_id":"themes/material-flow/source/less/_tog.less","hash":"bff0ab3b06e14a3c171ccd53061f8ccddb1e2fc2","modified":1528552943000},{"_id":"themes/material-flow/source/less/_typo.less","hash":"8635fe95a08614f22833c6c159ebf6cf3d731e12","modified":1528552943000},{"_id":"themes/material-flow/source/less/_widget.less","hash":"a6fc757f2daf58089490eefe0701b9889a8bd4bd","modified":1528552943000},{"_id":"themes/material-flow/snapshots/article.png","hash":"3f1aff6057a807b55edd2435421b59a1f4e82c40","modified":1528552943000},{"_id":"themes/material-flow/.git/objects/pack/pack-d944c0094ecd3550ef8b68fe46d2ab802977d6bc.idx","hash":"bf4b804875745d7ca585ae8e42c5f39bf1cdffe8","modified":1528552943000},{"_id":"themes/material-flow/.git/refs/heads/master","hash":"0717be1bbf800fb479e27aabba6a962571a7a0da","modified":1528552943000},{"_id":"themes/material-flow/.git/logs/refs/heads/master","hash":"2259feb7e44facf24d52511eec18f3fc454bfc15","modified":1528552943000},{"_id":"themes/material-flow/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1528552943000},{"_id":"themes/material-flow/snapshots/index.png","hash":"a4aa937770d1573032f3e830be3cd75672a26036","modified":1528552943000},{"_id":"themes/material-flow/.git/logs/refs/remotes/origin/HEAD","hash":"2259feb7e44facf24d52511eec18f3fc454bfc15","modified":1528552943000},{"_id":"themes/material-flow/.git/objects/pack/pack-d944c0094ecd3550ef8b68fe46d2ab802977d6bc.pack","hash":"342ce9a385fd3d7f6e8572bbd3654aff4028f103","modified":1528552943000},{"_id":"public/content.json","hash":"834a9ba0ebc2a7d17808854a1435812c788ce1a4","modified":1528554816222},{"_id":"public/search.xml","hash":"bcb9c856250d8296f32b9f6806ac8be86e212ca3","modified":1528554816150},{"_id":"public/fonts/icomoon.eot","hash":"931a892fd6307c0cfcbb71511ad4a38b3dd20edf","modified":1528553019317},{"_id":"public/fonts/icomoon.ttf","hash":"6192fb2b38c94f77d1fed08c1969fab5ffe9a30c","modified":1528553019317},{"_id":"public/fonts/icomoon.woff","hash":"0356e9be814a04187c641371fd95a7a8d9111200","modified":1528553019317},{"_id":"public/fonts/icomoon.svg","hash":"37a9d40dfcd7d156cf452db75c425e797351e2b5","modified":1528553019317},{"_id":"public/js/jquery.fitvids.js","hash":"57946a22c79654014eb00fb548f727d302221873","modified":1528553019334},{"_id":"public/js/app.js","hash":"17aca227d841b932ac33af4c9e02a192832fdc85","modified":1528553019334},{"_id":"public/js/search.js","hash":"632ce023094442d350dcd2895ca5f948364746cb","modified":1528553019339},{"_id":"public/fonts/selection.json","hash":"c38f13105ee7c35a67476dd80eaa2ffd037c124b","modified":1528553019340},{"_id":"public/style.css","hash":"132d38054823d2e95655397efbab16b95a935071","modified":1528553019530},{"_id":"themes/material-flow/source/images/avatar.png","hash":"3dcb821344fc004c2a87f81cf4b6cf9de213d3a8","modified":1528555247000},{"_id":"public/images/avatar.png","hash":"3dcb821344fc004c2a87f81cf4b6cf9de213d3a8","modified":1528555292429},{"_id":"themes/material-flow/source/images/avatar.jpeg","hash":"e5e8261e748995a874a5ba8a2ea39a336b4619f5","modified":1528555504000},{"_id":"public/images/avatar.jpeg","hash":"e5e8261e748995a874a5ba8a2ea39a336b4619f5","modified":1528555556206}],"Category":[{"name":"随笔","_id":"cji7g3pxp0004e0ilxaope5xg"},{"name":"Go语言","_id":"cji7g3pxt0006e0il0ofqtbk7"}],"Data":[],"Page":[{"title":"about","date":"2015-12-30T16:32:43.000Z","_content":"","source":"about/index.md","raw":"title: about\ndate: 2015-12-31 00:32:43\n---\n","updated":"2018-06-09T12:57:10.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cji7g3pxk0001e0ill9xnzuju","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-06-09T11:54:04.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-06-09 19:54:04\n---\n","updated":"2018-06-09T12:57:10.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cji7g3pxn0003e0ilxvbs0gtz","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"First","date":"2015-12-30T16:34:21.000Z","_content":"图片测试哦, ![image](/First/logo.png)\n","source":"_posts/First.md","raw":"title: First\ndate: 2015-12-31 00:34:21\ncategories: 随笔\ntags: [日记,随笔]\n---\n图片测试哦, ![image](/First/logo.png)\n","slug":"First","published":1,"updated":"2018-06-09T13:04:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji7g3pxe0000e0il4bz40ba4","content":"<p>图片测试哦, <img src=\"/First/logo.png\" alt=\"image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>图片测试哦, <img src=\"/First/logo.png\" alt=\"image\"></p>\n"},{"title":"Go基础语法.md","date":"2018-06-09T13:11:17.000Z","_content":" # 1. 编码风格\n## 1.1 gofmt\n一般会自动规范代码风格\n ## 1.2 注释&驼峰命名\n/* \n    需要注释的内容\n*/\n## 1.3 包名\n```\nimport \"bytes\"\n```\n# 2. 变量\n## 2.0 常量\n```\ntype ByteSize float64\nconst (\n\t_           = iota\n\tKB ByteSize = 1 << (2 * iota)\n\tMB\n\tGB\n)\n// 主函数\nfunc main() {\n\tfmt.Println(\"Hello World!\")\n\tfmt.Println(\"size %f\", GB)\n\t// size %f 64\n}\n```\n## 2.1 声明\n```\nvar (\n    ErrInternal = errors.New(\"error1\")\n    ErrInternal2 = errors.New(\"error2\")\n)\n```\n## 2.2 初始化\nGo语言提供了New和make\n### new\n```\n// 0值初始化\ntype SyncedBuffer struct {\n    lock sync.Mutex\n    buffer bytes.Buffer\n}\np := new(SyncedBuffer)     // type *SyncedBuffer\nvar v SyncedBuffer            // type SyncedBuffer\n\n// 如果是构造函数\nfunc NewFile(fd int, name string) *File {\n    if fd < 0 {\n        return nil\n    }\n    f := File{fd, name, nil, 0} // 如果不按顺序，就需要加名字\n    return &f\n}\n// 复合字面可以初始化多种结构\na := [...]string {Enone: \"no error\", Eio: \"Eio\", Einval: \"invalid argument\"}\ns := []string {Enone: \"no error\", Eio: \"Eio\", Einval: \"invalid argument\"}\nm := map[int]string {Enone: \"no error\", Eio: \"Eio\", Einval: \"invalid argument\"}\n```\n### make\n`make一般用于初始化切片，映射，信道\n```\nmake([]int, 10, 100)\n// 一般用法, 返回的不是指针\nv := make([]int, 100) \n```\n# 3. 分支循环\n## 3.1 if\n```\nif i < f() {\n    g()\n}\n\nif err := file.Chmod(0664); err != nil {\n    log.Print(err)\n    return err\n}\n```\n## 3.2 for\n```\nfor init; condition; post {}\nfor condition {}\nfor {}\n// 举例\nsum := 0\nfor i := 0; i < 10; i++ {\n    sum += i\n}\n// 遍历复合结构\nfor key, value := range oldMap {\n    newMap[key] = value\n}\n// 只遍历第一个\nfor key := range oldMap {\n}\n// 只遍历第二个\nfor _, value := range array {\n}\n// 遍历字符串\nfor pos, char := range \"日本 \\ x80 语\" {\n    fmt.Printf()\n}\n// 反转数字\nfor i, j := 0, len(a) - 1; i < j; i,j = i+1, j-1 {\n    a[i], a[j] = a[j], a[i]\n}\n```\n## 3.3 switch\n```\nswitch {\ncase '0' <= c && c <= '9' :\n    return c - '0'\ncase 'a' <= c && c <= 'f' :\n    return c - 'a' + 10\n}\n// 处理相同条件\nswitch c {\ncase 'a', 'b', 'c':\n    return true\n}\n// 判断类型\nvar t interface{}\nt = getType()\nswitch t := t.(type) {\ndefault :\n    fmt.Printf(\"%T\", t)\ncase bool :\n    fmt.Printf(\"boolean %t\\n\", t)\ncase int:\n    fmt.Printf(\"integer %d\\n\", t)\n}\n```\n# 4. 函数\n## 4.1 多值返回\n```\nfunc (file *File) Write(b []byte) (n int, err error)\n```\n## 4.2 defer\n无论何种路径都能返回，如果定义多个按定义顺序相反顺序执行\n# 5. 切片(数组)\n```\n// 切片是按值传递，但是底层可能是同一份数组\n// 二维切片\ntype Transform [3][3]float64\ntype LinesOfText [][]byte\ntest := LinesOfTest{\n    []byte(\"abc\"),\n    []byte(\"abc\"),\n    []byte(\"abc\"),\n}\n```\n## 5.1 append\n```\n// 增加元素\nx := []int{1,2,3}\nx = append(x, 4, 5, 6)\nfmt.Println(x)\n// 增加切片\ny := []int{1,2,3}\nx = append(x, y...)\nfmt.Println(x)\n```\n# 6. Map映射\n```\nattend := map[string]bool{\n    \"Ann\" : true,\n    \"Joe\" : true,\n    ...\n}\n// 判断是否存在\nvar seconds int\nvar ok bool\nseconds, ok = timeZone[tz]\nif _, ok := timeZone[tz]; ok {\n    doSomething()\n}\n// 删除映射\ndelete(timeZone, \"PDT\")\n```\n初始化方式：\nFile{fd, name, nil, 0}\nFile{fd: fd, name: name}\nmake([]int, 100)\n# 7. 函数\n## 7.1 init\n在变量初始化之后，导入包初始化之后，就会初始化\n`以指针或值为接收者的区别在于：值方法可通过指针和值调用， 而指针方法只能通过指针来调用。\n# 8. 接口\n## 8.1 断言\n```\nstr, ok := value.(string)\nif ok {\n    fmt.Printf(\"\")\n} else {\n}\n```\n## 8.2 内嵌\n```\n// 接口\ntype Reader interface {\n    Read(p []byte) (n int, err error)\n}\n\ntype Writer interface {\n    Write(p []byte) (n int, err error)\n}\ntype ReaderWriter interface {\n    Reader\n    Writer\n}\n// 结构体\ntype ReaderWriter struct {\n    *Reader\n    *Writer\n}\n```\n# 9 并发\n## 9.1 chan\n```\ncj := make(chan int)                // 无缓冲信道\ncj := make(chan int, 0)            // 无缓冲信道\ncj := make(chan *os.File, 100) // 指向文件指针的带缓冲信道\n```\n## 9.2 例子\n```\nc := make(chan int)\ngo func() {\n    list.Sort()\n    c <- 1\n}()\ndoSomethingForAWhile()\n<- c\n\n// 考虑带缓冲的任务\nfunc Serve(queue chan *Request) {\n       for req := range queue {\n            req := req\n           sem <- 1\n            go func() {\n                process(req)\n                <-sem\n            }()\n        }\n}\n```\n# 10 panic&recover\n","source":"_posts/Go基础语法.md","raw":"---\ntitle: Go基础语法.md\ndate: 2018-06-09 21:11:17\ncategories: Go语言\n---\n # 1. 编码风格\n## 1.1 gofmt\n一般会自动规范代码风格\n ## 1.2 注释&驼峰命名\n/* \n    需要注释的内容\n*/\n## 1.3 包名\n```\nimport \"bytes\"\n```\n# 2. 变量\n## 2.0 常量\n```\ntype ByteSize float64\nconst (\n\t_           = iota\n\tKB ByteSize = 1 << (2 * iota)\n\tMB\n\tGB\n)\n// 主函数\nfunc main() {\n\tfmt.Println(\"Hello World!\")\n\tfmt.Println(\"size %f\", GB)\n\t// size %f 64\n}\n```\n## 2.1 声明\n```\nvar (\n    ErrInternal = errors.New(\"error1\")\n    ErrInternal2 = errors.New(\"error2\")\n)\n```\n## 2.2 初始化\nGo语言提供了New和make\n### new\n```\n// 0值初始化\ntype SyncedBuffer struct {\n    lock sync.Mutex\n    buffer bytes.Buffer\n}\np := new(SyncedBuffer)     // type *SyncedBuffer\nvar v SyncedBuffer            // type SyncedBuffer\n\n// 如果是构造函数\nfunc NewFile(fd int, name string) *File {\n    if fd < 0 {\n        return nil\n    }\n    f := File{fd, name, nil, 0} // 如果不按顺序，就需要加名字\n    return &f\n}\n// 复合字面可以初始化多种结构\na := [...]string {Enone: \"no error\", Eio: \"Eio\", Einval: \"invalid argument\"}\ns := []string {Enone: \"no error\", Eio: \"Eio\", Einval: \"invalid argument\"}\nm := map[int]string {Enone: \"no error\", Eio: \"Eio\", Einval: \"invalid argument\"}\n```\n### make\n`make一般用于初始化切片，映射，信道\n```\nmake([]int, 10, 100)\n// 一般用法, 返回的不是指针\nv := make([]int, 100) \n```\n# 3. 分支循环\n## 3.1 if\n```\nif i < f() {\n    g()\n}\n\nif err := file.Chmod(0664); err != nil {\n    log.Print(err)\n    return err\n}\n```\n## 3.2 for\n```\nfor init; condition; post {}\nfor condition {}\nfor {}\n// 举例\nsum := 0\nfor i := 0; i < 10; i++ {\n    sum += i\n}\n// 遍历复合结构\nfor key, value := range oldMap {\n    newMap[key] = value\n}\n// 只遍历第一个\nfor key := range oldMap {\n}\n// 只遍历第二个\nfor _, value := range array {\n}\n// 遍历字符串\nfor pos, char := range \"日本 \\ x80 语\" {\n    fmt.Printf()\n}\n// 反转数字\nfor i, j := 0, len(a) - 1; i < j; i,j = i+1, j-1 {\n    a[i], a[j] = a[j], a[i]\n}\n```\n## 3.3 switch\n```\nswitch {\ncase '0' <= c && c <= '9' :\n    return c - '0'\ncase 'a' <= c && c <= 'f' :\n    return c - 'a' + 10\n}\n// 处理相同条件\nswitch c {\ncase 'a', 'b', 'c':\n    return true\n}\n// 判断类型\nvar t interface{}\nt = getType()\nswitch t := t.(type) {\ndefault :\n    fmt.Printf(\"%T\", t)\ncase bool :\n    fmt.Printf(\"boolean %t\\n\", t)\ncase int:\n    fmt.Printf(\"integer %d\\n\", t)\n}\n```\n# 4. 函数\n## 4.1 多值返回\n```\nfunc (file *File) Write(b []byte) (n int, err error)\n```\n## 4.2 defer\n无论何种路径都能返回，如果定义多个按定义顺序相反顺序执行\n# 5. 切片(数组)\n```\n// 切片是按值传递，但是底层可能是同一份数组\n// 二维切片\ntype Transform [3][3]float64\ntype LinesOfText [][]byte\ntest := LinesOfTest{\n    []byte(\"abc\"),\n    []byte(\"abc\"),\n    []byte(\"abc\"),\n}\n```\n## 5.1 append\n```\n// 增加元素\nx := []int{1,2,3}\nx = append(x, 4, 5, 6)\nfmt.Println(x)\n// 增加切片\ny := []int{1,2,3}\nx = append(x, y...)\nfmt.Println(x)\n```\n# 6. Map映射\n```\nattend := map[string]bool{\n    \"Ann\" : true,\n    \"Joe\" : true,\n    ...\n}\n// 判断是否存在\nvar seconds int\nvar ok bool\nseconds, ok = timeZone[tz]\nif _, ok := timeZone[tz]; ok {\n    doSomething()\n}\n// 删除映射\ndelete(timeZone, \"PDT\")\n```\n初始化方式：\nFile{fd, name, nil, 0}\nFile{fd: fd, name: name}\nmake([]int, 100)\n# 7. 函数\n## 7.1 init\n在变量初始化之后，导入包初始化之后，就会初始化\n`以指针或值为接收者的区别在于：值方法可通过指针和值调用， 而指针方法只能通过指针来调用。\n# 8. 接口\n## 8.1 断言\n```\nstr, ok := value.(string)\nif ok {\n    fmt.Printf(\"\")\n} else {\n}\n```\n## 8.2 内嵌\n```\n// 接口\ntype Reader interface {\n    Read(p []byte) (n int, err error)\n}\n\ntype Writer interface {\n    Write(p []byte) (n int, err error)\n}\ntype ReaderWriter interface {\n    Reader\n    Writer\n}\n// 结构体\ntype ReaderWriter struct {\n    *Reader\n    *Writer\n}\n```\n# 9 并发\n## 9.1 chan\n```\ncj := make(chan int)                // 无缓冲信道\ncj := make(chan int, 0)            // 无缓冲信道\ncj := make(chan *os.File, 100) // 指向文件指针的带缓冲信道\n```\n## 9.2 例子\n```\nc := make(chan int)\ngo func() {\n    list.Sort()\n    c <- 1\n}()\ndoSomethingForAWhile()\n<- c\n\n// 考虑带缓冲的任务\nfunc Serve(queue chan *Request) {\n       for req := range queue {\n            req := req\n           sem <- 1\n            go func() {\n                process(req)\n                <-sem\n            }()\n        }\n}\n```\n# 10 panic&recover\n","slug":"Go基础语法","published":1,"updated":"2018-06-09T14:33:27.000Z","_id":"cji7g3pxl0002e0ilb3ydeoai","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"1-编码风格\"><a href=\"#1-编码风格\" class=\"headerlink\" title=\"1. 编码风格\"></a>1. 编码风格</h1><h2 id=\"1-1-gofmt\"><a href=\"#1-1-gofmt\" class=\"headerlink\" title=\"1.1 gofmt\"></a>1.1 gofmt</h2><p>一般会自动规范代码风格</p>\n<h2 id=\"1-2-注释-amp-驼峰命名\"><a href=\"#1-2-注释-amp-驼峰命名\" class=\"headerlink\" title=\"1.2 注释&amp;驼峰命名\"></a>1.2 注释&amp;驼峰命名</h2><p>/<em><br>    需要注释的内容\n</em>/</p>\n<h2 id=\"1-3-包名\"><a href=\"#1-3-包名\" class=\"headerlink\" title=\"1.3 包名\"></a>1.3 包名</h2><figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"bytes\"</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"2-变量\"><a href=\"#2-变量\" class=\"headerlink\" title=\"2. 变量\"></a>2. 变量</h1><h2 id=\"2-0-常量\"><a href=\"#2-0-常量\" class=\"headerlink\" title=\"2.0 常量\"></a>2.0 常量</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> ByteSize <span class=\"keyword\">float64</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\t_           = <span class=\"literal\">iota</span></span><br><span class=\"line\">\tKB ByteSize = <span class=\"number\">1</span> &lt;&lt; (<span class=\"number\">2</span> * <span class=\"literal\">iota</span>)</span><br><span class=\"line\">\tMB</span><br><span class=\"line\">\tGB</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">// 主函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Hello World!\"</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"size %f\"</span>, GB)</span><br><span class=\"line\">\t<span class=\"comment\">// size %f 64</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-1-声明\"><a href=\"#2-1-声明\" class=\"headerlink\" title=\"2.1 声明\"></a>2.1 声明</h2><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var (</span><br><span class=\"line\">    ErrInternal = errors.New(<span class=\"string\">\"error1\"</span>)</span><br><span class=\"line\">    ErrInternal2 = errors.New(<span class=\"string\">\"error2\"</span>)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-2-初始化\"><a href=\"#2-2-初始化\" class=\"headerlink\" title=\"2.2 初始化\"></a>2.2 初始化</h2><p>Go语言提供了New和make</p>\n<h3 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 0值初始化</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> SyncedBuffer <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    lock sync.Mutex</span><br><span class=\"line\">    buffer bytes.Buffer</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">p := <span class=\"built_in\">new</span>(SyncedBuffer)     <span class=\"comment\">// type *SyncedBuffer</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> v SyncedBuffer            <span class=\"comment\">// type SyncedBuffer</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果是构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewFile</span><span class=\"params\">(fd <span class=\"keyword\">int</span>, name <span class=\"keyword\">string</span>)</span> *<span class=\"title\">File</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> fd &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    f := File&#123;fd, name, <span class=\"literal\">nil</span>, <span class=\"number\">0</span>&#125; <span class=\"comment\">// 如果不按顺序，就需要加名字</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;f</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 复合字面可以初始化多种结构</span></span><br><span class=\"line\">a := [...]<span class=\"keyword\">string</span> &#123;Enone: <span class=\"string\">\"no error\"</span>, Eio: <span class=\"string\">\"Eio\"</span>, Einval: <span class=\"string\">\"invalid argument\"</span>&#125;</span><br><span class=\"line\">s := []<span class=\"keyword\">string</span> &#123;Enone: <span class=\"string\">\"no error\"</span>, Eio: <span class=\"string\">\"Eio\"</span>, Einval: <span class=\"string\">\"invalid argument\"</span>&#125;</span><br><span class=\"line\">m := <span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">string</span> &#123;Enone: <span class=\"string\">\"no error\"</span>, Eio: <span class=\"string\">\"Eio\"</span>, Einval: <span class=\"string\">\"invalid argument\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"make\"><a href=\"#make\" class=\"headerlink\" title=\"make\"></a>make</h3><p>`make一般用于初始化切片，映射，信道<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">10</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"comment\">// 一般用法, 返回的不是指针</span></span><br><span class=\"line\">v := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"3-分支循环\"><a href=\"#3-分支循环\" class=\"headerlink\" title=\"3. 分支循环\"></a>3. 分支循环</h1><h2 id=\"3-1-if\"><a href=\"#3-1-if\" class=\"headerlink\" title=\"3.1 if\"></a>3.1 if</h2><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> i &lt; <span class=\"built_in\">f</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">g</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">err</span> := <span class=\"keyword\">file</span>.Chmod(0664); <span class=\"keyword\">err</span> != nil &#123;</span><br><span class=\"line\">    <span class=\"keyword\">log</span>.<span class=\"keyword\">Print</span>(<span class=\"keyword\">err</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">err</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2-for\"><a href=\"#3-2-for\" class=\"headerlink\" title=\"3.2 for\"></a>3.2 for</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> init; condition; post &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> condition &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// 举例</span></span><br><span class=\"line\">sum := <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">    sum += i</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 遍历复合结构</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> key, value := <span class=\"keyword\">range</span> oldMap &#123;</span><br><span class=\"line\">    newMap[key] = value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 只遍历第一个</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> key := <span class=\"keyword\">range</span> oldMap &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 只遍历第二个</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> _, value := <span class=\"keyword\">range</span> array &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 遍历字符串</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> pos, char := <span class=\"keyword\">range</span> <span class=\"string\">\"日本 \\ x80 语\"</span> &#123;</span><br><span class=\"line\">    fmt.Printf()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 反转数字</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i, j := <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(a) - <span class=\"number\">1</span>; i &lt; j; i,j = i+<span class=\"number\">1</span>, j<span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">    a[i], a[j] = a[j], a[i]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-3-switch\"><a href=\"#3-3-switch\" class=\"headerlink\" title=\"3.3 switch\"></a>3.3 switch</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">'0'</span> &lt;= c &amp;&amp; c &lt;= <span class=\"string\">'9'</span> :</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c - <span class=\"string\">'0'</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">'a'</span> &lt;= c &amp;&amp; c &lt;= <span class=\"string\">'f'</span> :</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c - <span class=\"string\">'a'</span> + <span class=\"number\">10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 处理相同条件</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> c &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 判断类型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> t <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">t = getType()</span><br><span class=\"line\"><span class=\"keyword\">switch</span> t := t.(<span class=\"keyword\">type</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">default</span> :</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"%T\"</span>, t)</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">bool</span> :</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"boolean %t\\n\"</span>, t)</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">int</span>:</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"integer %d\\n\"</span>, t)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-函数\"><a href=\"#4-函数\" class=\"headerlink\" title=\"4. 函数\"></a>4. 函数</h1><h2 id=\"4-1-多值返回\"><a href=\"#4-1-多值返回\" class=\"headerlink\" title=\"4.1 多值返回\"></a>4.1 多值返回</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(file *File)</span> <span class=\"title\">Write</span><span class=\"params\">(b []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err error)</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-2-defer\"><a href=\"#4-2-defer\" class=\"headerlink\" title=\"4.2 defer\"></a>4.2 defer</h2><p>无论何种路径都能返回，如果定义多个按定义顺序相反顺序执行</p>\n<h1 id=\"5-切片-数组\"><a href=\"#5-切片-数组\" class=\"headerlink\" title=\"5. 切片(数组)\"></a>5. 切片(数组)</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 切片是按值传递，但是底层可能是同一份数组</span></span><br><span class=\"line\"><span class=\"comment\">// 二维切片</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Transform [<span class=\"number\">3</span>][<span class=\"number\">3</span>]<span class=\"keyword\">float64</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> LinesOfText [][]<span class=\"keyword\">byte</span></span><br><span class=\"line\">test := LinesOfTest&#123;</span><br><span class=\"line\">    []<span class=\"keyword\">byte</span>(<span class=\"string\">\"abc\"</span>),</span><br><span class=\"line\">    []<span class=\"keyword\">byte</span>(<span class=\"string\">\"abc\"</span>),</span><br><span class=\"line\">    []<span class=\"keyword\">byte</span>(<span class=\"string\">\"abc\"</span>),</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-1-append\"><a href=\"#5-1-append\" class=\"headerlink\" title=\"5.1 append\"></a>5.1 append</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 增加元素</span></span><br><span class=\"line\">x := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">x = <span class=\"built_in\">append</span>(x, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">fmt.Println(x)</span><br><span class=\"line\"><span class=\"comment\">// 增加切片</span></span><br><span class=\"line\">y := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">x = <span class=\"built_in\">append</span>(x, y...)</span><br><span class=\"line\">fmt.Println(x)</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-Map映射\"><a href=\"#6-Map映射\" class=\"headerlink\" title=\"6. Map映射\"></a>6. Map映射</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">attend := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">bool</span>&#123;</span><br><span class=\"line\">    <span class=\"string\">\"Ann\"</span> : <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Joe\"</span> : <span class=\"literal\">true</span>,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 判断是否存在</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> seconds <span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ok <span class=\"keyword\">bool</span></span><br><span class=\"line\">seconds, ok = timeZone[tz]</span><br><span class=\"line\"><span class=\"keyword\">if</span> _, ok := timeZone[tz]; ok &#123;</span><br><span class=\"line\">    doSomething()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 删除映射</span></span><br><span class=\"line\"><span class=\"built_in\">delete</span>(timeZone, <span class=\"string\">\"PDT\"</span>)</span><br></pre></td></tr></table></figure>\n<p>初始化方式：<br>File{fd, name, nil, 0}<br>File{fd: fd, name: name}<br>make([]int, 100)</p>\n<h1 id=\"7-函数\"><a href=\"#7-函数\" class=\"headerlink\" title=\"7. 函数\"></a>7. 函数</h1><h2 id=\"7-1-init\"><a href=\"#7-1-init\" class=\"headerlink\" title=\"7.1 init\"></a>7.1 init</h2><p>在变量初始化之后，导入包初始化之后，就会初始化<br>`以指针或值为接收者的区别在于：值方法可通过指针和值调用， 而指针方法只能通过指针来调用。</p>\n<h1 id=\"8-接口\"><a href=\"#8-接口\" class=\"headerlink\" title=\"8. 接口\"></a>8. 接口</h1><h2 id=\"8-1-断言\"><a href=\"#8-1-断言\" class=\"headerlink\" title=\"8.1 断言\"></a>8.1 断言</h2><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str, ok := <span class=\"keyword\">value</span>.(string)</span><br><span class=\"line\"><span class=\"keyword\">if</span> ok &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-2-内嵌\"><a href=\"#8-2-内嵌\" class=\"headerlink\" title=\"8.2 内嵌\"></a>8.2 内嵌</h2><figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 接口</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"type\">Reader</span> interface &#123;</span><br><span class=\"line\">    <span class=\"type\">Read</span>(p []byte) (n int, err error)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"type\">Writer</span> interface &#123;</span><br><span class=\"line\">    <span class=\"type\">Write</span>(p []byte) (n int, err error)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"type\">ReaderWriter</span> interface &#123;</span><br><span class=\"line\">    <span class=\"type\">Reader</span></span><br><span class=\"line\">    <span class=\"type\">Writer</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 结构体</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"type\">ReaderWriter</span> struct &#123;</span><br><span class=\"line\">    *<span class=\"type\">Reader</span></span><br><span class=\"line\">    *<span class=\"type\">Writer</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"9-并发\"><a href=\"#9-并发\" class=\"headerlink\" title=\"9 并发\"></a>9 并发</h1><h2 id=\"9-1-chan\"><a href=\"#9-1-chan\" class=\"headerlink\" title=\"9.1 chan\"></a>9.1 chan</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cj := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)                <span class=\"comment\">// 无缓冲信道</span></span><br><span class=\"line\">cj := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">0</span>)            <span class=\"comment\">// 无缓冲信道</span></span><br><span class=\"line\">cj := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> *os.File, <span class=\"number\">100</span>) <span class=\"comment\">// 指向文件指针的带缓冲信道</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"9-2-例子\"><a href=\"#9-2-例子\" class=\"headerlink\" title=\"9.2 例子\"></a>9.2 例子</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    list.Sort()</span><br><span class=\"line\">    c &lt;- <span class=\"number\">1</span></span><br><span class=\"line\">&#125;()</span><br><span class=\"line\">doSomethingForAWhile()</span><br><span class=\"line\">&lt;- c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 考虑带缓冲的任务</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Serve</span><span class=\"params\">(queue <span class=\"keyword\">chan</span> *Request)</span></span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">for</span> req := <span class=\"keyword\">range</span> queue &#123;</span><br><span class=\"line\">            req := req</span><br><span class=\"line\">           sem &lt;- <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">                process(req)</span><br><span class=\"line\">                &lt;-sem</span><br><span class=\"line\">            &#125;()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"10-panic-amp-recover\"><a href=\"#10-panic-amp-recover\" class=\"headerlink\" title=\"10 panic&amp;recover\"></a>10 panic&amp;recover</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-编码风格\"><a href=\"#1-编码风格\" class=\"headerlink\" title=\"1. 编码风格\"></a>1. 编码风格</h1><h2 id=\"1-1-gofmt\"><a href=\"#1-1-gofmt\" class=\"headerlink\" title=\"1.1 gofmt\"></a>1.1 gofmt</h2><p>一般会自动规范代码风格</p>\n<h2 id=\"1-2-注释-amp-驼峰命名\"><a href=\"#1-2-注释-amp-驼峰命名\" class=\"headerlink\" title=\"1.2 注释&amp;驼峰命名\"></a>1.2 注释&amp;驼峰命名</h2><p>/<em><br>    需要注释的内容\n</em>/</p>\n<h2 id=\"1-3-包名\"><a href=\"#1-3-包名\" class=\"headerlink\" title=\"1.3 包名\"></a>1.3 包名</h2><figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"bytes\"</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"2-变量\"><a href=\"#2-变量\" class=\"headerlink\" title=\"2. 变量\"></a>2. 变量</h1><h2 id=\"2-0-常量\"><a href=\"#2-0-常量\" class=\"headerlink\" title=\"2.0 常量\"></a>2.0 常量</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> ByteSize <span class=\"keyword\">float64</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\t_           = <span class=\"literal\">iota</span></span><br><span class=\"line\">\tKB ByteSize = <span class=\"number\">1</span> &lt;&lt; (<span class=\"number\">2</span> * <span class=\"literal\">iota</span>)</span><br><span class=\"line\">\tMB</span><br><span class=\"line\">\tGB</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">// 主函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Hello World!\"</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"size %f\"</span>, GB)</span><br><span class=\"line\">\t<span class=\"comment\">// size %f 64</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-1-声明\"><a href=\"#2-1-声明\" class=\"headerlink\" title=\"2.1 声明\"></a>2.1 声明</h2><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var (</span><br><span class=\"line\">    ErrInternal = errors.New(<span class=\"string\">\"error1\"</span>)</span><br><span class=\"line\">    ErrInternal2 = errors.New(<span class=\"string\">\"error2\"</span>)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-2-初始化\"><a href=\"#2-2-初始化\" class=\"headerlink\" title=\"2.2 初始化\"></a>2.2 初始化</h2><p>Go语言提供了New和make</p>\n<h3 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 0值初始化</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> SyncedBuffer <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    lock sync.Mutex</span><br><span class=\"line\">    buffer bytes.Buffer</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">p := <span class=\"built_in\">new</span>(SyncedBuffer)     <span class=\"comment\">// type *SyncedBuffer</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> v SyncedBuffer            <span class=\"comment\">// type SyncedBuffer</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果是构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewFile</span><span class=\"params\">(fd <span class=\"keyword\">int</span>, name <span class=\"keyword\">string</span>)</span> *<span class=\"title\">File</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> fd &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    f := File&#123;fd, name, <span class=\"literal\">nil</span>, <span class=\"number\">0</span>&#125; <span class=\"comment\">// 如果不按顺序，就需要加名字</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;f</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 复合字面可以初始化多种结构</span></span><br><span class=\"line\">a := [...]<span class=\"keyword\">string</span> &#123;Enone: <span class=\"string\">\"no error\"</span>, Eio: <span class=\"string\">\"Eio\"</span>, Einval: <span class=\"string\">\"invalid argument\"</span>&#125;</span><br><span class=\"line\">s := []<span class=\"keyword\">string</span> &#123;Enone: <span class=\"string\">\"no error\"</span>, Eio: <span class=\"string\">\"Eio\"</span>, Einval: <span class=\"string\">\"invalid argument\"</span>&#125;</span><br><span class=\"line\">m := <span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">string</span> &#123;Enone: <span class=\"string\">\"no error\"</span>, Eio: <span class=\"string\">\"Eio\"</span>, Einval: <span class=\"string\">\"invalid argument\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"make\"><a href=\"#make\" class=\"headerlink\" title=\"make\"></a>make</h3><p>`make一般用于初始化切片，映射，信道<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">10</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"comment\">// 一般用法, 返回的不是指针</span></span><br><span class=\"line\">v := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"3-分支循环\"><a href=\"#3-分支循环\" class=\"headerlink\" title=\"3. 分支循环\"></a>3. 分支循环</h1><h2 id=\"3-1-if\"><a href=\"#3-1-if\" class=\"headerlink\" title=\"3.1 if\"></a>3.1 if</h2><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> i &lt; <span class=\"built_in\">f</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">g</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">err</span> := <span class=\"keyword\">file</span>.Chmod(0664); <span class=\"keyword\">err</span> != nil &#123;</span><br><span class=\"line\">    <span class=\"keyword\">log</span>.<span class=\"keyword\">Print</span>(<span class=\"keyword\">err</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">err</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2-for\"><a href=\"#3-2-for\" class=\"headerlink\" title=\"3.2 for\"></a>3.2 for</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> init; condition; post &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> condition &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// 举例</span></span><br><span class=\"line\">sum := <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">    sum += i</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 遍历复合结构</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> key, value := <span class=\"keyword\">range</span> oldMap &#123;</span><br><span class=\"line\">    newMap[key] = value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 只遍历第一个</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> key := <span class=\"keyword\">range</span> oldMap &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 只遍历第二个</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> _, value := <span class=\"keyword\">range</span> array &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 遍历字符串</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> pos, char := <span class=\"keyword\">range</span> <span class=\"string\">\"日本 \\ x80 语\"</span> &#123;</span><br><span class=\"line\">    fmt.Printf()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 反转数字</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i, j := <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(a) - <span class=\"number\">1</span>; i &lt; j; i,j = i+<span class=\"number\">1</span>, j<span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">    a[i], a[j] = a[j], a[i]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-3-switch\"><a href=\"#3-3-switch\" class=\"headerlink\" title=\"3.3 switch\"></a>3.3 switch</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">'0'</span> &lt;= c &amp;&amp; c &lt;= <span class=\"string\">'9'</span> :</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c - <span class=\"string\">'0'</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">'a'</span> &lt;= c &amp;&amp; c &lt;= <span class=\"string\">'f'</span> :</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c - <span class=\"string\">'a'</span> + <span class=\"number\">10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 处理相同条件</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> c &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 判断类型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> t <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">t = getType()</span><br><span class=\"line\"><span class=\"keyword\">switch</span> t := t.(<span class=\"keyword\">type</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">default</span> :</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"%T\"</span>, t)</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">bool</span> :</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"boolean %t\\n\"</span>, t)</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">int</span>:</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"integer %d\\n\"</span>, t)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-函数\"><a href=\"#4-函数\" class=\"headerlink\" title=\"4. 函数\"></a>4. 函数</h1><h2 id=\"4-1-多值返回\"><a href=\"#4-1-多值返回\" class=\"headerlink\" title=\"4.1 多值返回\"></a>4.1 多值返回</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(file *File)</span> <span class=\"title\">Write</span><span class=\"params\">(b []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err error)</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-2-defer\"><a href=\"#4-2-defer\" class=\"headerlink\" title=\"4.2 defer\"></a>4.2 defer</h2><p>无论何种路径都能返回，如果定义多个按定义顺序相反顺序执行</p>\n<h1 id=\"5-切片-数组\"><a href=\"#5-切片-数组\" class=\"headerlink\" title=\"5. 切片(数组)\"></a>5. 切片(数组)</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 切片是按值传递，但是底层可能是同一份数组</span></span><br><span class=\"line\"><span class=\"comment\">// 二维切片</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Transform [<span class=\"number\">3</span>][<span class=\"number\">3</span>]<span class=\"keyword\">float64</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> LinesOfText [][]<span class=\"keyword\">byte</span></span><br><span class=\"line\">test := LinesOfTest&#123;</span><br><span class=\"line\">    []<span class=\"keyword\">byte</span>(<span class=\"string\">\"abc\"</span>),</span><br><span class=\"line\">    []<span class=\"keyword\">byte</span>(<span class=\"string\">\"abc\"</span>),</span><br><span class=\"line\">    []<span class=\"keyword\">byte</span>(<span class=\"string\">\"abc\"</span>),</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-1-append\"><a href=\"#5-1-append\" class=\"headerlink\" title=\"5.1 append\"></a>5.1 append</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 增加元素</span></span><br><span class=\"line\">x := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">x = <span class=\"built_in\">append</span>(x, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">fmt.Println(x)</span><br><span class=\"line\"><span class=\"comment\">// 增加切片</span></span><br><span class=\"line\">y := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">x = <span class=\"built_in\">append</span>(x, y...)</span><br><span class=\"line\">fmt.Println(x)</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-Map映射\"><a href=\"#6-Map映射\" class=\"headerlink\" title=\"6. Map映射\"></a>6. Map映射</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">attend := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">bool</span>&#123;</span><br><span class=\"line\">    <span class=\"string\">\"Ann\"</span> : <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Joe\"</span> : <span class=\"literal\">true</span>,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 判断是否存在</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> seconds <span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ok <span class=\"keyword\">bool</span></span><br><span class=\"line\">seconds, ok = timeZone[tz]</span><br><span class=\"line\"><span class=\"keyword\">if</span> _, ok := timeZone[tz]; ok &#123;</span><br><span class=\"line\">    doSomething()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 删除映射</span></span><br><span class=\"line\"><span class=\"built_in\">delete</span>(timeZone, <span class=\"string\">\"PDT\"</span>)</span><br></pre></td></tr></table></figure>\n<p>初始化方式：<br>File{fd, name, nil, 0}<br>File{fd: fd, name: name}<br>make([]int, 100)</p>\n<h1 id=\"7-函数\"><a href=\"#7-函数\" class=\"headerlink\" title=\"7. 函数\"></a>7. 函数</h1><h2 id=\"7-1-init\"><a href=\"#7-1-init\" class=\"headerlink\" title=\"7.1 init\"></a>7.1 init</h2><p>在变量初始化之后，导入包初始化之后，就会初始化<br>`以指针或值为接收者的区别在于：值方法可通过指针和值调用， 而指针方法只能通过指针来调用。</p>\n<h1 id=\"8-接口\"><a href=\"#8-接口\" class=\"headerlink\" title=\"8. 接口\"></a>8. 接口</h1><h2 id=\"8-1-断言\"><a href=\"#8-1-断言\" class=\"headerlink\" title=\"8.1 断言\"></a>8.1 断言</h2><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str, ok := <span class=\"keyword\">value</span>.(string)</span><br><span class=\"line\"><span class=\"keyword\">if</span> ok &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-2-内嵌\"><a href=\"#8-2-内嵌\" class=\"headerlink\" title=\"8.2 内嵌\"></a>8.2 内嵌</h2><figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 接口</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"type\">Reader</span> interface &#123;</span><br><span class=\"line\">    <span class=\"type\">Read</span>(p []byte) (n int, err error)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"type\">Writer</span> interface &#123;</span><br><span class=\"line\">    <span class=\"type\">Write</span>(p []byte) (n int, err error)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"type\">ReaderWriter</span> interface &#123;</span><br><span class=\"line\">    <span class=\"type\">Reader</span></span><br><span class=\"line\">    <span class=\"type\">Writer</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 结构体</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"type\">ReaderWriter</span> struct &#123;</span><br><span class=\"line\">    *<span class=\"type\">Reader</span></span><br><span class=\"line\">    *<span class=\"type\">Writer</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"9-并发\"><a href=\"#9-并发\" class=\"headerlink\" title=\"9 并发\"></a>9 并发</h1><h2 id=\"9-1-chan\"><a href=\"#9-1-chan\" class=\"headerlink\" title=\"9.1 chan\"></a>9.1 chan</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cj := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)                <span class=\"comment\">// 无缓冲信道</span></span><br><span class=\"line\">cj := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, <span class=\"number\">0</span>)            <span class=\"comment\">// 无缓冲信道</span></span><br><span class=\"line\">cj := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> *os.File, <span class=\"number\">100</span>) <span class=\"comment\">// 指向文件指针的带缓冲信道</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"9-2-例子\"><a href=\"#9-2-例子\" class=\"headerlink\" title=\"9.2 例子\"></a>9.2 例子</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    list.Sort()</span><br><span class=\"line\">    c &lt;- <span class=\"number\">1</span></span><br><span class=\"line\">&#125;()</span><br><span class=\"line\">doSomethingForAWhile()</span><br><span class=\"line\">&lt;- c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 考虑带缓冲的任务</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Serve</span><span class=\"params\">(queue <span class=\"keyword\">chan</span> *Request)</span></span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">for</span> req := <span class=\"keyword\">range</span> queue &#123;</span><br><span class=\"line\">            req := req</span><br><span class=\"line\">           sem &lt;- <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">                process(req)</span><br><span class=\"line\">                &lt;-sem</span><br><span class=\"line\">            &#125;()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"10-panic-amp-recover\"><a href=\"#10-panic-amp-recover\" class=\"headerlink\" title=\"10 panic&amp;recover\"></a>10 panic&amp;recover</h1>"}],"PostAsset":[{"_id":"source/_posts/First/logo.png","slug":"logo.png","post":"cji7g3pxe0000e0il4bz40ba4","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cji7g3pxe0000e0il4bz40ba4","category_id":"cji7g3pxp0004e0ilxaope5xg","_id":"cji7g3pxu0008e0ili20hgag2"},{"post_id":"cji7g3pxl0002e0ilb3ydeoai","category_id":"cji7g3pxt0006e0il0ofqtbk7","_id":"cji7g3pxw000be0ilb4bhfnci"}],"PostTag":[{"post_id":"cji7g3pxe0000e0il4bz40ba4","tag_id":"cji7g3pxr0005e0il8qwpwlii","_id":"cji7g3pxv0009e0il40sg5p9n"},{"post_id":"cji7g3pxe0000e0il4bz40ba4","tag_id":"cji7g3pxt0007e0ilg4i9dc83","_id":"cji7g3pxw000ae0illt38m8gm"}],"Tag":[{"name":"日记","_id":"cji7g3pxr0005e0il8qwpwlii"},{"name":"随笔","_id":"cji7g3pxt0007e0ilg4i9dc83"}]}}